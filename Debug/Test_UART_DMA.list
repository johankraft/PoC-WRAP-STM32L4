
Test_UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c05c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  0800c1ec  0800c1ec  0000d1ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4e8  0800c4e8  0000e060  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4e8  0800c4e8  0000d4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4f0  0800c4f0  0000e060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4f0  0800c4f0  0000d4f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c4f4  0800c4f4  0000d4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800c4f8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a4c  20000060  0800c558  0000e060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004aac  0800c558  0000eaac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034589  00000000  00000000  0000e090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007909  00000000  00000000  00042619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a50  00000000  00000000  00049f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000209a  00000000  00000000  0004c978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034fc6  00000000  00000000  0004ea12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000439e5  00000000  00000000  000839d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ad07  00000000  00000000  000c73bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e20c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b3a0  00000000  00000000  001e2108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001ed4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c1d4 	.word	0x0800c1d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800c1d4 	.word	0x0800c1d4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <xTraceStreamPortInitialize>:
RecorderData* RecorderDataPtr TRC_CFG_RECORDER_DATA_ATTRIBUTE; /*cstat !MISRAC2004-8.7 !MISRAC2004-8.10 !MISRAC2012-Rule-8.4 !MISRAC2012-Rule-8.7 !MISRAC2012-Rule-8.9_b Suppress global object check*/

TraceStreamPortData_t* pxStreamPortData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceStreamPortInitialize(TraceStreamPortBuffer_t* pxBuffer)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	TraceRingBuffer_t* pxRingBuffer;

	TRC_ASSERT_EQUAL_SIZE(TraceStreamPortBuffer_t, TraceStreamPortData_t);
	
	if (pxBuffer == (void*)0)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d101      	bne.n	80004d2 <xTraceStreamPortInitialize+0x12>
	{
		return TRC_FAIL;
 80004ce:	2301      	movs	r3, #1
 80004d0:	e091      	b.n	80005f6 <xTraceStreamPortInitialize+0x136>
	}

	pxStreamPortData = (TraceStreamPortData_t*)pxBuffer; /*cstat !MISRAC2004-11.4 !MISRAC2012-Rule-11.3 Suppress conversion between pointer types checks*/
 80004d2:	4a4b      	ldr	r2, [pc, #300]	@ (8000600 <xTraceStreamPortInitialize+0x140>)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	6013      	str	r3, [r2, #0]
	pxRingBuffer = &pxStreamPortData->xRingBuffer;
 80004d8:	4b49      	ldr	r3, [pc, #292]	@ (8000600 <xTraceStreamPortInitialize+0x140>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	3304      	adds	r3, #4
 80004de:	60fb      	str	r3, [r7, #12]
	RecorderDataPtr = pxRingBuffer;
 80004e0:	4a48      	ldr	r2, [pc, #288]	@ (8000604 <xTraceStreamPortInitialize+0x144>)
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	6013      	str	r3, [r2, #0]

	pxRingBuffer->xEventBuffer.uxSize = sizeof(pxRingBuffer->xEventBuffer.uiBuffer);
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80004ec:	f8c3 25d8 	str.w	r2, [r3, #1496]	@ 0x5d8
	
#if (TRC_CFG_STREAM_PORT_RINGBUFFER_MODE == TRC_STREAM_PORT_RINGBUFFER_MODE_OVERWRITE_WHEN_FULL)
	if (xTraceMultiCoreEventBufferInitialize(&pxStreamPortData->xMultiCoreEventBuffer, TRC_EVENT_BUFFER_OPTION_OVERWRITE, pxRingBuffer->xEventBuffer.uiBuffer, sizeof(pxRingBuffer->xEventBuffer.uiBuffer)) == TRC_FAIL)
 80004f0:	4b43      	ldr	r3, [pc, #268]	@ (8000600 <xTraceStreamPortInitialize+0x140>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4618      	mov	r0, r3
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	f203 52dc 	addw	r2, r3, #1500	@ 0x5dc
 80004fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000500:	2101      	movs	r1, #1
 8000502:	f001 fa61 	bl	80019c8 <xTraceMultiCoreEventBufferInitialize>
 8000506:	4603      	mov	r3, r0
 8000508:	2b01      	cmp	r3, #1
 800050a:	d101      	bne.n	8000510 <xTraceStreamPortInitialize+0x50>
	{
		return TRC_FAIL;
 800050c:	2301      	movs	r3, #1
 800050e:	e072      	b.n	80005f6 <xTraceStreamPortInitialize+0x136>
	{
		return TRC_FAIL;
	}
#endif

	if (xTraceHeaderInitialize(&pxRingBuffer->xHeaderBuffer) == TRC_FAIL)
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	3310      	adds	r3, #16
 8000514:	4618      	mov	r0, r3
 8000516:	f002 f90b 	bl	8002730 <xTraceHeaderInitialize>
 800051a:	4603      	mov	r3, r0
 800051c:	2b01      	cmp	r3, #1
 800051e:	d101      	bne.n	8000524 <xTraceStreamPortInitialize+0x64>
	{
		return TRC_FAIL;
 8000520:	2301      	movs	r3, #1
 8000522:	e068      	b.n	80005f6 <xTraceStreamPortInitialize+0x136>
	}
	
	if (xTraceEntryTableInitialize(&pxRingBuffer->xEntryTable) == TRC_FAIL)
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	334c      	adds	r3, #76	@ 0x4c
 8000528:	4618      	mov	r0, r3
 800052a:	f000 f959 	bl	80007e0 <xTraceEntryTableInitialize>
 800052e:	4603      	mov	r3, r0
 8000530:	2b01      	cmp	r3, #1
 8000532:	d101      	bne.n	8000538 <xTraceStreamPortInitialize+0x78>
	{
		return TRC_FAIL;
 8000534:	2301      	movs	r3, #1
 8000536:	e05e      	b.n	80005f6 <xTraceStreamPortInitialize+0x136>
	}
	
	if (xTraceTimestampInitialize(&pxRingBuffer->xTimestampInfo) == TRC_FAIL)
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	3330      	adds	r3, #48	@ 0x30
 800053c:	4618      	mov	r0, r3
 800053e:	f002 fcb7 	bl	8002eb0 <xTraceTimestampInitialize>
 8000542:	4603      	mov	r3, r0
 8000544:	2b01      	cmp	r3, #1
 8000546:	d101      	bne.n	800054c <xTraceStreamPortInitialize+0x8c>
	{
		return TRC_FAIL;
 8000548:	2301      	movs	r3, #1
 800054a:	e054      	b.n	80005f6 <xTraceStreamPortInitialize+0x136>
	}

	pxRingBuffer->END_MARKERS[0] = 0x0AU;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	220a      	movs	r2, #10
 8000550:	f883 29c4 	strb.w	r2, [r3, #2500]	@ 0x9c4
	pxRingBuffer->END_MARKERS[1] = 0x0BU;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	220b      	movs	r2, #11
 8000558:	f883 29c5 	strb.w	r2, [r3, #2501]	@ 0x9c5
	pxRingBuffer->END_MARKERS[2] = 0x0CU;
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	220c      	movs	r2, #12
 8000560:	f883 29c6 	strb.w	r2, [r3, #2502]	@ 0x9c6
	pxRingBuffer->END_MARKERS[3] = 0x0DU;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	220d      	movs	r2, #13
 8000568:	f883 29c7 	strb.w	r2, [r3, #2503]	@ 0x9c7
	
	pxRingBuffer->END_MARKERS[4] = 0x71U;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	2271      	movs	r2, #113	@ 0x71
 8000570:	f883 29c8 	strb.w	r2, [r3, #2504]	@ 0x9c8
	pxRingBuffer->END_MARKERS[5] = 0x72U;
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2272      	movs	r2, #114	@ 0x72
 8000578:	f883 29c9 	strb.w	r2, [r3, #2505]	@ 0x9c9
	pxRingBuffer->END_MARKERS[6] = 0x73U;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	2273      	movs	r2, #115	@ 0x73
 8000580:	f883 29ca 	strb.w	r2, [r3, #2506]	@ 0x9ca
	pxRingBuffer->END_MARKERS[7] = 0x74U;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	2274      	movs	r2, #116	@ 0x74
 8000588:	f883 29cb 	strb.w	r2, [r3, #2507]	@ 0x9cb
	
	pxRingBuffer->END_MARKERS[8] = 0xF1U;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	22f1      	movs	r2, #241	@ 0xf1
 8000590:	f883 29cc 	strb.w	r2, [r3, #2508]	@ 0x9cc
	pxRingBuffer->END_MARKERS[9] = 0xF2U;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	22f2      	movs	r2, #242	@ 0xf2
 8000598:	f883 29cd 	strb.w	r2, [r3, #2509]	@ 0x9cd
	pxRingBuffer->END_MARKERS[10] = 0xF3U;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	22f3      	movs	r2, #243	@ 0xf3
 80005a0:	f883 29ce 	strb.w	r2, [r3, #2510]	@ 0x9ce
	pxRingBuffer->END_MARKERS[11] = 0xF4U;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	22f4      	movs	r2, #244	@ 0xf4
 80005a8:	f883 29cf 	strb.w	r2, [r3, #2511]	@ 0x9cf

	pxRingBuffer->START_MARKERS[0] = 0x05U;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	2205      	movs	r2, #5
 80005b0:	711a      	strb	r2, [r3, #4]
	pxRingBuffer->START_MARKERS[1] = 0x06U;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2206      	movs	r2, #6
 80005b6:	715a      	strb	r2, [r3, #5]
	pxRingBuffer->START_MARKERS[2] = 0x07U;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	2207      	movs	r2, #7
 80005bc:	719a      	strb	r2, [r3, #6]
	pxRingBuffer->START_MARKERS[3] = 0x08U;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	2208      	movs	r2, #8
 80005c2:	71da      	strb	r2, [r3, #7]
	
	pxRingBuffer->START_MARKERS[4] = 0x75U;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	2275      	movs	r2, #117	@ 0x75
 80005c8:	721a      	strb	r2, [r3, #8]
	pxRingBuffer->START_MARKERS[5] = 0x76U;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	2276      	movs	r2, #118	@ 0x76
 80005ce:	725a      	strb	r2, [r3, #9]
	pxRingBuffer->START_MARKERS[6] = 0x77U;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	2277      	movs	r2, #119	@ 0x77
 80005d4:	729a      	strb	r2, [r3, #10]
	pxRingBuffer->START_MARKERS[7] = 0x78U;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	2278      	movs	r2, #120	@ 0x78
 80005da:	72da      	strb	r2, [r3, #11]
	
	pxRingBuffer->START_MARKERS[8] = 0xF5U;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	22f5      	movs	r2, #245	@ 0xf5
 80005e0:	731a      	strb	r2, [r3, #12]
	pxRingBuffer->START_MARKERS[9] = 0xF6U;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	22f6      	movs	r2, #246	@ 0xf6
 80005e6:	735a      	strb	r2, [r3, #13]
	pxRingBuffer->START_MARKERS[10] = 0xF7U;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	22f7      	movs	r2, #247	@ 0xf7
 80005ec:	739a      	strb	r2, [r3, #14]
	pxRingBuffer->START_MARKERS[11] = 0xF8U;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	22f8      	movs	r2, #248	@ 0xf8
 80005f2:	73da      	strb	r2, [r3, #15]
	
	return TRC_SUCCESS;
 80005f4:	2300      	movs	r3, #0
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000080 	.word	0x20000080
 8000604:	2000007c 	.word	0x2000007c

08000608 <xTraceStreamPortOnTraceBegin>:

traceResult xTraceStreamPortOnTraceBegin(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	return xTraceMultiCoreEventBufferClear(&pxStreamPortData->xMultiCoreEventBuffer);
 800060c:	4b03      	ldr	r3, [pc, #12]	@ (800061c <xTraceStreamPortOnTraceBegin+0x14>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f001 fa11 	bl	8001a38 <xTraceMultiCoreEventBufferClear>
 8000616:	4603      	mov	r3, r0
}
 8000618:	4618      	mov	r0, r3
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000080 	.word	0x20000080

08000620 <xTraceCounterInitialize>:
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

static TraceCounterData_t *pxCounterData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceCounterInitialize(TraceCounterData_t *pxBuffer)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(pxBuffer != (void*)0);

	pxCounterData = pxBuffer;
 8000628:	4a09      	ldr	r2, [pc, #36]	@ (8000650 <xTraceCounterInitialize+0x30>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6013      	str	r3, [r2, #0]
	
	pxCounterData->xCallbackFunction = 0;
 800062e:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <xTraceCounterInitialize+0x30>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_COUNTER);
 8000636:	4b07      	ldr	r3, [pc, #28]	@ (8000654 <xTraceCounterInitialize+0x34>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800063e:	4a05      	ldr	r2, [pc, #20]	@ (8000654 <xTraceCounterInitialize+0x34>)
 8000640:	6013      	str	r3, [r2, #0]
	
	return TRC_SUCCESS;
 8000642:	2300      	movs	r3, #0
}
 8000644:	4618      	mov	r0, r3
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	20000084 	.word	0x20000084
 8000654:	20001eec 	.word	0x20001eec

08000658 <xTraceDiagnosticsInitialize>:
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

static TraceDiagnosticsData_t *pxDiagnostics TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceDiagnosticsInitialize(TraceDiagnosticsData_t *pxBuffer)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	uint32_t i;
	
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxDiagnostics = pxBuffer;
 8000660:	4a0f      	ldr	r2, [pc, #60]	@ (80006a0 <xTraceDiagnosticsInitialize+0x48>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6013      	str	r3, [r2, #0]

	for (i = 0u; i < (TRC_DIAGNOSTICS_COUNT); i++)
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	e008      	b.n	800067e <xTraceDiagnosticsInitialize+0x26>
	{
		pxDiagnostics->metrics[i] = 0;
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <xTraceDiagnosticsInitialize+0x48>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	68fa      	ldr	r2, [r7, #12]
 8000672:	2100      	movs	r1, #0
 8000674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0u; i < (TRC_DIAGNOSTICS_COUNT); i++)
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b04      	cmp	r3, #4
 8000682:	d9f3      	bls.n	800066c <xTraceDiagnosticsInitialize+0x14>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS);
 8000684:	4b07      	ldr	r3, [pc, #28]	@ (80006a4 <xTraceDiagnosticsInitialize+0x4c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f043 0308 	orr.w	r3, r3, #8
 800068c:	4a05      	ldr	r2, [pc, #20]	@ (80006a4 <xTraceDiagnosticsInitialize+0x4c>)
 800068e:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 8000690:	2300      	movs	r3, #0
}
 8000692:	4618      	mov	r0, r3
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	20000088 	.word	0x20000088
 80006a4:	20001eec 	.word	0x20001eec

080006a8 <xTraceDiagnosticsAdd>:

	return TRC_SUCCESS;
}

traceResult xTraceDiagnosticsAdd(TraceDiagnosticsType_t xType, TraceBaseType_t xValue)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS));

	/* This should never fail */
	TRC_ASSERT((TraceUnsignedBaseType_t)xType < TRC_DIAGNOSTICS_COUNT);

	pxDiagnostics->metrics[(TraceUnsignedBaseType_t)xType] += xValue;
 80006b4:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <xTraceDiagnosticsAdd+0x34>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	79fa      	ldrb	r2, [r7, #7]
 80006ba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80006be:	4b07      	ldr	r3, [pc, #28]	@ (80006dc <xTraceDiagnosticsAdd+0x34>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	79fa      	ldrb	r2, [r7, #7]
 80006c4:	6839      	ldr	r1, [r7, #0]
 80006c6:	4401      	add	r1, r0
 80006c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	return TRC_SUCCESS;
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	20000088 	.word	0x20000088

080006e0 <xTraceDiagnosticsIncrease>:

traceResult xTraceDiagnosticsIncrease(TraceDiagnosticsType_t xType)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
	return xTraceDiagnosticsAdd(xType, 1);
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	2101      	movs	r1, #1
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ffda 	bl	80006a8 <xTraceDiagnosticsAdd>
 80006f4:	4603      	mov	r3, r0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <xTraceDiagnosticsSetIfHigher>:
{
	return xTraceDiagnosticsAdd(xType, -1);
}

traceResult xTraceDiagnosticsSetIfHigher(TraceDiagnosticsType_t xType, TraceBaseType_t xValue)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	6039      	str	r1, [r7, #0]
 800070a:	71fb      	strb	r3, [r7, #7]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS));

	/* This should never fail */
	TRC_ASSERT((TraceUnsignedBaseType_t)xType < TRC_DIAGNOSTICS_COUNT);

	if (xValue > pxDiagnostics->metrics[xType])
 800070c:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <xTraceDiagnosticsSetIfHigher+0x38>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	79fa      	ldrb	r2, [r7, #7]
 8000712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000716:	683a      	ldr	r2, [r7, #0]
 8000718:	429a      	cmp	r2, r3
 800071a:	dd05      	ble.n	8000728 <xTraceDiagnosticsSetIfHigher+0x28>
	{
		pxDiagnostics->metrics[(TraceUnsignedBaseType_t)xType] = xValue;
 800071c:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <xTraceDiagnosticsSetIfHigher+0x38>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	79fa      	ldrb	r2, [r7, #7]
 8000722:	6839      	ldr	r1, [r7, #0]
 8000724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	return TRC_SUCCESS;
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	20000088 	.word	0x20000088

0800073c <xTraceDiagnosticsCheckStatus>:

	return TRC_SUCCESS;
}

traceResult xTraceDiagnosticsCheckStatus(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	/* It is probably good if we always check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS) == 0U)
 8000740:	4b1d      	ldr	r3, [pc, #116]	@ (80007b8 <xTraceDiagnosticsCheckStatus+0x7c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f003 0308 	and.w	r3, r3, #8
 8000748:	2b00      	cmp	r3, #0
 800074a:	d101      	bne.n	8000750 <xTraceDiagnosticsCheckStatus+0x14>
	{
		return TRC_FAIL;
 800074c:	2301      	movs	r3, #1
 800074e:	e030      	b.n	80007b2 <xTraceDiagnosticsCheckStatus+0x76>
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM] > 0)
 8000750:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <xTraceDiagnosticsCheckStatus+0x80>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	2b00      	cmp	r3, #0
 8000758:	dd06      	ble.n	8000768 <xTraceDiagnosticsCheckStatus+0x2c>
	{
		(void)xTraceWarning(TRC_WARNING_ENTRY_TABLE_SLOTS);
 800075a:	2008      	movs	r0, #8
 800075c:	f000 fa0e 	bl	8000b7c <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM] = 0;
 8000760:	4b16      	ldr	r3, [pc, #88]	@ (80007bc <xTraceDiagnosticsCheckStatus+0x80>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH] > (TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH))
 8000768:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <xTraceDiagnosticsCheckStatus+0x80>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2b18      	cmp	r3, #24
 8000770:	dd06      	ble.n	8000780 <xTraceDiagnosticsCheckStatus+0x44>
	{
		(void)xTraceWarning(TRC_WARNING_ENTRY_SYMBOL_MAX_LENGTH);
 8000772:	2009      	movs	r0, #9
 8000774:	f000 fa02 	bl	8000b7c <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH] = 0;
 8000778:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <xTraceDiagnosticsCheckStatus+0x80>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_BLOB_MAX_BYTES_TRUNCATED] > 0)
 8000780:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <xTraceDiagnosticsCheckStatus+0x80>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	2b00      	cmp	r3, #0
 8000788:	dd06      	ble.n	8000798 <xTraceDiagnosticsCheckStatus+0x5c>
	{
		(void)xTraceWarning(TRC_WARNING_EVENT_SIZE_TRUNCATED);
 800078a:	200a      	movs	r0, #10
 800078c:	f000 f9f6 	bl	8000b7c <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_BLOB_MAX_BYTES_TRUNCATED] = 0;
 8000790:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <xTraceDiagnosticsCheckStatus+0x80>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_STACK_MONITOR_NO_SLOTS] > 0)
 8000798:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <xTraceDiagnosticsCheckStatus+0x80>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	dd06      	ble.n	80007b0 <xTraceDiagnosticsCheckStatus+0x74>
	{
		(void)xTraceWarning(TRC_WARNING_STACKMON_NO_SLOTS);
 80007a2:	200e      	movs	r0, #14
 80007a4:	f000 f9ea 	bl	8000b7c <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_STACK_MONITOR_NO_SLOTS] = 0;
 80007a8:	4b04      	ldr	r3, [pc, #16]	@ (80007bc <xTraceDiagnosticsCheckStatus+0x80>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
	}

	return TRC_SUCCESS;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20001eec 	.word	0x20001eec
 80007bc:	20000088 	.word	0x20000088

080007c0 <xTraceEntryIndexTableInitialize>:
/* Variables */
static TraceEntryTable_t *pxEntryTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;
static TraceEntryIndexTable_t *pxIndexTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceEntryIndexTableInitialize(TraceEntryIndexTable_t* const pxBuffer)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxIndexTable = pxBuffer;
 80007c8:	4a04      	ldr	r2, [pc, #16]	@ (80007dc <xTraceEntryIndexTableInitialize+0x1c>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6013      	str	r3, [r2, #0]
	
	return prvEntryIndexInitialize();
 80007ce:	f000 f95f 	bl	8000a90 <prvEntryIndexInitialize>
 80007d2:	4603      	mov	r3, r0
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000090 	.word	0x20000090

080007e0 <xTraceEntryTableInitialize>:

traceResult xTraceEntryTableInitialize(TraceEntryTable_t* const pxBuffer)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(pxBuffer != (void*)0);

	/* This should never fail */
	TRC_ASSERT((TRC_ENTRY_TABLE_SLOTS) != 0);

	pxEntryTable = pxBuffer;
 80007e8:	4a28      	ldr	r2, [pc, #160]	@ (800088c <xTraceEntryTableInitialize+0xac>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6013      	str	r3, [r2, #0]

	pxEntryTable->uxSlots = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_SLOTS);
 80007ee:	4b27      	ldr	r3, [pc, #156]	@ (800088c <xTraceEntryTableInitialize+0xac>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2220      	movs	r2, #32
 80007f4:	601a      	str	r2, [r3, #0]
	pxEntryTable->uxEntrySymbolLength = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE);
 80007f6:	4b25      	ldr	r3, [pc, #148]	@ (800088c <xTraceEntryTableInitialize+0xac>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2218      	movs	r2, #24
 80007fc:	605a      	str	r2, [r3, #4]
	pxEntryTable->uxEntryStateCount = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_STATE_COUNT);
 80007fe:	4b23      	ldr	r3, [pc, #140]	@ (800088c <xTraceEntryTableInitialize+0xac>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2203      	movs	r2, #3
 8000804:	609a      	str	r2, [r3, #8]

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	e02e      	b.n	800086a <xTraceEntryTableInitialize+0x8a>
	{
		pxEntryTable->axEntries[i].pvAddress = 0;
 800080c:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <xTraceEntryTableInitialize+0xac>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	212c      	movs	r1, #44	@ 0x2c
 8000814:	fb01 f303 	mul.w	r3, r1, r3
 8000818:	4413      	add	r3, r2
 800081a:	330c      	adds	r3, #12
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
		for (j = 0u; j < TRC_ENTRY_TABLE_STATE_COUNT; j++)
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	e011      	b.n	800084a <xTraceEntryTableInitialize+0x6a>
		{
			pxEntryTable->axEntries[i].xStates[j] = (TraceUnsignedBaseType_t)0;
 8000826:	4b19      	ldr	r3, [pc, #100]	@ (800088c <xTraceEntryTableInitialize+0xac>)
 8000828:	6819      	ldr	r1, [r3, #0]
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	4613      	mov	r3, r2
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	4413      	add	r3, r2
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	4413      	add	r3, r2
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	4413      	add	r3, r2
 800083a:	3302      	adds	r3, #2
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	440b      	add	r3, r1
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
		for (j = 0u; j < TRC_ENTRY_TABLE_STATE_COUNT; j++)
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	3301      	adds	r3, #1
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d9ea      	bls.n	8000826 <xTraceEntryTableInitialize+0x46>
		}
		pxEntryTable->axEntries[i].szSymbol[0] = (char)0; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8000850:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <xTraceEntryTableInitialize+0xac>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	212c      	movs	r1, #44	@ 0x2c
 8000858:	fb01 f303 	mul.w	r3, r1, r3
 800085c:	4413      	add	r3, r2
 800085e:	3320      	adds	r3, #32
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	3301      	adds	r3, #1
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	2b1f      	cmp	r3, #31
 800086e:	d9cd      	bls.n	800080c <xTraceEntryTableInitialize+0x2c>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY);
 8000870:	4b07      	ldr	r3, [pc, #28]	@ (8000890 <xTraceEntryTableInitialize+0xb0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f043 0310 	orr.w	r3, r3, #16
 8000878:	4a05      	ldr	r2, [pc, #20]	@ (8000890 <xTraceEntryTableInitialize+0xb0>)
 800087a:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	2000008c 	.word	0x2000008c
 8000890:	20001eec 	.word	0x20001eec

08000894 <xTraceEntryCreate>:

traceResult xTraceEntryCreate(TraceEntryHandle_t *pxEntryHandle)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	@ 0x28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	TraceEntry_t *pxEntry;

	TRACE_ALLOC_CRITICAL_SECTION();

	/* We always check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY) == 0U)
 800089c:	4b2b      	ldr	r3, [pc, #172]	@ (800094c <xTraceEntryCreate+0xb8>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f003 0310 	and.w	r3, r3, #16
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d101      	bne.n	80008ac <xTraceEntryCreate+0x18>
	{
		return TRC_FAIL;
 80008a8:	2301      	movs	r3, #1
 80008aa:	e04a      	b.n	8000942 <xTraceEntryCreate+0xae>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80008ac:	f3ef 8310 	mrs	r3, PRIMASK
 80008b0:	617b      	str	r3, [r7, #20]
  return(result);
 80008b2:	697b      	ldr	r3, [r7, #20]
	}

	/* This should never fail */
	TRC_ASSERT(pxEntryHandle != (void*)0);

	TRACE_ENTER_CRITICAL_SECTION();
 80008b4:	623b      	str	r3, [r7, #32]
 80008b6:	2301      	movs	r3, #1
 80008b8:	61bb      	str	r3, [r7, #24]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	f383 8810 	msr	PRIMASK, r3
}
 80008c0:	bf00      	nop

	if (prvEntryIndexTake(&xIndex) != TRC_SUCCESS)
 80008c2:	f107 030b 	add.w	r3, r7, #11
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f904 	bl	8000ad4 <prvEntryIndexTake>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d00a      	beq.n	80008e8 <xTraceEntryCreate+0x54>
	{
		(void)xTraceDiagnosticsIncrease(TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM);
 80008d2:	2001      	movs	r0, #1
 80008d4:	f7ff ff04 	bl	80006e0 <xTraceDiagnosticsIncrease>
 80008d8:	6a3b      	ldr	r3, [r7, #32]
 80008da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	f383 8810 	msr	PRIMASK, r3
}
 80008e2:	bf00      	nop

		TRACE_EXIT_CRITICAL_SECTION();

		return TRC_FAIL;
 80008e4:	2301      	movs	r3, #1
 80008e6:	e02c      	b.n	8000942 <xTraceEntryCreate+0xae>
	}

	pxEntry = &pxEntryTable->axEntries[xIndex];
 80008e8:	4b19      	ldr	r3, [pc, #100]	@ (8000950 <xTraceEntryCreate+0xbc>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	7afb      	ldrb	r3, [r7, #11]
 80008ee:	4619      	mov	r1, r3
 80008f0:	232c      	movs	r3, #44	@ 0x2c
 80008f2:	fb01 f303 	mul.w	r3, r1, r3
 80008f6:	3308      	adds	r3, #8
 80008f8:	4413      	add	r3, r2
 80008fa:	3304      	adds	r3, #4
 80008fc:	61fb      	str	r3, [r7, #28]
	
	pxEntry->pvAddress = (void*)pxEntry; /* We set a temporary address */
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	69fa      	ldr	r2, [r7, #28]
 8000902:	601a      	str	r2, [r3, #0]

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT); i++)
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
 8000908:	e008      	b.n	800091c <xTraceEntryCreate+0x88>
	{
		pxEntry->xStates[i] = (TraceUnsignedBaseType_t)0;
 800090a:	69fa      	ldr	r2, [r7, #28]
 800090c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4413      	add	r3, r2
 8000912:	2200      	movs	r2, #0
 8000914:	605a      	str	r2, [r3, #4]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT); i++)
 8000916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000918:	3301      	adds	r3, #1
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
 800091c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800091e:	2b02      	cmp	r3, #2
 8000920:	d9f3      	bls.n	800090a <xTraceEntryCreate+0x76>
	}

	pxEntry->uiOptions = 0u;
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
	pxEntry->szSymbol[0] = (char)0; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	2200      	movs	r2, #0
 800092c:	751a      	strb	r2, [r3, #20]

	*pxEntryHandle = (TraceEntryHandle_t)pxEntry;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	69fa      	ldr	r2, [r7, #28]
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	6a3b      	ldr	r3, [r7, #32]
 8000936:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f383 8810 	msr	PRIMASK, r3
}
 800093e:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return TRC_SUCCESS;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3728      	adds	r7, #40	@ 0x28
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20001eec 	.word	0x20001eec
 8000950:	2000008c 	.word	0x2000008c

08000954 <xTraceEntryDelete>:

traceResult xTraceEntryDelete(TraceEntryHandle_t xEntryHandle)
{
 8000954:	b480      	push	{r7}
 8000956:	b089      	sub	sp, #36	@ 0x24
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(VALIDATE_ENTRY_HANDLE(xEntryHandle)); /*cstat !MISRAC2004-17.3 !MISRAC2012-Rule-18.3 Suppress pointer comparison check*/

	/* Calculate the index based on the entry address */
	/* Does not need to be locked. */
	/* This should never fail */
	xIndex = CALCULATE_ENTRY_INDEX(xEntryHandle); /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 Suppress conversion from pointer to integer check*/ /*cstat !MISRAC2004-17.2 !MISRAC2012-Rule-18.2 !MISRAC2012-Rule-18.4 Suppress pointer comparison check*/
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a1e      	ldr	r2, [pc, #120]	@ (80009d8 <xTraceEntryDelete+0x84>)
 8000960:	6812      	ldr	r2, [r2, #0]
 8000962:	320c      	adds	r2, #12
 8000964:	1a9b      	subs	r3, r3, r2
 8000966:	4a1d      	ldr	r2, [pc, #116]	@ (80009dc <xTraceEntryDelete+0x88>)
 8000968:	fba2 2303 	umull	r2, r3, r2, r3
 800096c:	095b      	lsrs	r3, r3, #5
 800096e:	77fb      	strb	r3, [r7, #31]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000970:	f3ef 8310 	mrs	r3, PRIMASK
 8000974:	613b      	str	r3, [r7, #16]
  return(result);
 8000976:	693b      	ldr	r3, [r7, #16]

	TRC_ASSERT(xIndex < (TraceEntryIndex_t)TRC_ENTRY_TABLE_SLOTS);

	TRACE_ENTER_CRITICAL_SECTION();
 8000978:	61bb      	str	r3, [r7, #24]
 800097a:	2301      	movs	r3, #1
 800097c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	f383 8810 	msr	PRIMASK, r3
}
 8000984:	bf00      	nop

	if (((TraceEntry_t*)xEntryHandle)->pvAddress == 0)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d107      	bne.n	800099e <xTraceEntryDelete+0x4a>
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	f383 8810 	msr	PRIMASK, r3
}
 8000998:	bf00      	nop
	{
		/* Someone else has deleted this already? */
		TRACE_EXIT_CRITICAL_SECTION();

		return TRC_FAIL;
 800099a:	2301      	movs	r3, #1
 800099c:	e015      	b.n	80009ca <xTraceEntryDelete+0x76>
	}

	/* A valid address, so we assume it is OK. */
	/* We clear the address field which is used on host to see if entries are active. */
	((TraceEntry_t*)xEntryHandle)->pvAddress = 0;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]

	/* Give back the index */
	GIVE_ENTRY_INDEX(xIndex);
 80009a4:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <xTraceEntryDelete+0x8c>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b0d      	ldr	r3, [pc, #52]	@ (80009e0 <xTraceEntryDelete+0x8c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	6a1b      	ldr	r3, [r3, #32]
 80009ae:	7ff9      	ldrb	r1, [r7, #31]
 80009b0:	54d1      	strb	r1, [r2, r3]
 80009b2:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <xTraceEntryDelete+0x8c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	6a1a      	ldr	r2, [r3, #32]
 80009b8:	3201      	adds	r2, #1
 80009ba:	621a      	str	r2, [r3, #32]
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	f383 8810 	msr	PRIMASK, r3
}
 80009c6:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return TRC_SUCCESS;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3724      	adds	r7, #36	@ 0x24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	2000008c 	.word	0x2000008c
 80009dc:	ba2e8ba3 	.word	0xba2e8ba3
 80009e0:	20000090 	.word	0x20000090

080009e4 <xTraceEntryFind>:

traceResult xTraceEntryFind(const void* const pvAddress, TraceEntryHandle_t* pxEntryHandle)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
	TRC_ASSERT(pxEntryHandle != (void*)0);

	/* This should never fail */
	TRC_ASSERT(pvAddress != (void*)0);

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e016      	b.n	8000a22 <xTraceEntryFind+0x3e>
	{
		pxEntry = &pxEntryTable->axEntries[i];
 80009f4:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <xTraceEntryFind+0x54>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	212c      	movs	r1, #44	@ 0x2c
 80009fc:	fb01 f303 	mul.w	r3, r1, r3
 8000a00:	3308      	adds	r3, #8
 8000a02:	4413      	add	r3, r2
 8000a04:	3304      	adds	r3, #4
 8000a06:	60bb      	str	r3, [r7, #8]
		if (pxEntry->pvAddress == pvAddress)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d104      	bne.n	8000a1c <xTraceEntryFind+0x38>
		{
			*pxEntryHandle = (TraceEntryHandle_t)pxEntry;
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	68ba      	ldr	r2, [r7, #8]
 8000a16:	601a      	str	r2, [r3, #0]

			return TRC_SUCCESS;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	e006      	b.n	8000a2a <xTraceEntryFind+0x46>
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	2b1f      	cmp	r3, #31
 8000a26:	d9e5      	bls.n	80009f4 <xTraceEntryFind+0x10>
		}
	}

	return TRC_FAIL;
 8000a28:	2301      	movs	r3, #1
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	2000008c 	.word	0x2000008c

08000a3c <xTraceEntrySetSymbol>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceEntrySetSymbol(const TraceEntryHandle_t xEntryHandle, const char* szSymbol, uint32_t uiLength)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY));

	if (szSymbol == (void*)0)
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d103      	bne.n	8000a56 <xTraceEntrySetSymbol+0x1a>
	{
		szSymbol = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <xTraceEntrySetSymbol+0x50>)
 8000a50:	60bb      	str	r3, [r7, #8]
		uiLength = 0u; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
	}

	/* Remember the longest symbol name */
	(void)xTraceDiagnosticsSetIfHigher(TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH, (int32_t)uiLength);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f7ff fe50 	bl	8000700 <xTraceDiagnosticsSetIfHigher>

	if (uiLength >= (uint32_t)(TRC_ENTRY_TABLE_SYMBOL_LENGTH))
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b17      	cmp	r3, #23
 8000a64:	d902      	bls.n	8000a6c <xTraceEntrySetSymbol+0x30>
	{
		/* No room for null termination. Set to max. */
		uiLength = (uint32_t)(TRC_ENTRY_TABLE_SYMBOL_LENGTH); /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8000a66:	2318      	movs	r3, #24
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	e002      	b.n	8000a72 <xTraceEntrySetSymbol+0x36>
	}
	else
	{
		/* Include null termination by increasing the size by 1 */
		uiLength = uiLength + 1u; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	607b      	str	r3, [r7, #4]
	/* Does not need to be locked. */
	/* This should never fail */
	TRC_ASSERT(VALIDATE_ENTRY_HANDLE(xEntryHandle)); /*cstat !MISRAC2004-17.3 !MISRAC2012-Rule-18.3 Suppress pointer comparison check*/

	/* This will also copy the null termination, if possible */
	memcpy(((TraceEntry_t*)xEntryHandle)->szSymbol, szSymbol, uiLength);
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	3314      	adds	r3, #20
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	68b9      	ldr	r1, [r7, #8]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f00b fb46 	bl	800c10c <memcpy>

	return TRC_SUCCESS;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	0800c1ec 	.word	0x0800c1ec

08000a90 <prvEntryIndexInitialize>:
#endif /* ((TRC_CFG_USE_TRACE_ASSERT) == 1) */

/* PRIVATE FUNCTIONS */

static traceResult prvEntryIndexInitialize(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
	uint32_t i;

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	e00a      	b.n	8000ab2 <prvEntryIndexInitialize+0x22>
	{
		pxIndexTable->axFreeIndexes[i] = (TraceEntryIndex_t)i;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <prvEntryIndexInitialize+0x40>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	b2d9      	uxtb	r1, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	460a      	mov	r2, r1
 8000aaa:	701a      	strb	r2, [r3, #0]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b1f      	cmp	r3, #31
 8000ab6:	d9f1      	bls.n	8000a9c <prvEntryIndexInitialize+0xc>
	}

	pxIndexTable->uiFreeIndexCount = TRC_ENTRY_TABLE_SLOTS;
 8000ab8:	4b05      	ldr	r3, [pc, #20]	@ (8000ad0 <prvEntryIndexInitialize+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2220      	movs	r2, #32
 8000abe:	621a      	str	r2, [r3, #32]

	return TRC_SUCCESS;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000090 	.word	0x20000090

08000ad4 <prvEntryIndexTake>:

static traceResult prvEntryIndexTake(TraceEntryIndex_t *pxIndex)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	/* Critical Section must be active! */
	TraceEntryIndex_t xIndex;

	if (pxIndexTable->uiFreeIndexCount == 0u)
 8000adc:	4b14      	ldr	r3, [pc, #80]	@ (8000b30 <prvEntryIndexTake+0x5c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	6a1b      	ldr	r3, [r3, #32]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d101      	bne.n	8000aea <prvEntryIndexTake+0x16>
	{
		return TRC_FAIL;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e01c      	b.n	8000b24 <prvEntryIndexTake+0x50>
	}

	/* Always take the first item */
	xIndex = pxIndexTable->axFreeIndexes[0];
 8000aea:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <prvEntryIndexTake+0x5c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	73fb      	strb	r3, [r7, #15]
	pxIndexTable->uiFreeIndexCount--;
 8000af2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <prvEntryIndexTake+0x5c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	6a1a      	ldr	r2, [r3, #32]
 8000af8:	3a01      	subs	r2, #1
 8000afa:	621a      	str	r2, [r3, #32]

	/* Move the last item to the first slot, to avoid holes */
	pxIndexTable->axFreeIndexes[0] = pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount];
 8000afc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <prvEntryIndexTake+0x5c>)
 8000afe:	6819      	ldr	r1, [r3, #0]
 8000b00:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <prvEntryIndexTake+0x5c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	6a1a      	ldr	r2, [r3, #32]
 8000b06:	4b0a      	ldr	r3, [pc, #40]	@ (8000b30 <prvEntryIndexTake+0x5c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	5c8a      	ldrb	r2, [r1, r2]
 8000b0c:	701a      	strb	r2, [r3, #0]

#if (TRC_ENTRY_TABLE_SLOTS > 256)
	pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount] = UINT16_MAX;
#else
	pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount] = UINT8_MAX;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <prvEntryIndexTake+0x5c>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	4b07      	ldr	r3, [pc, #28]	@ (8000b30 <prvEntryIndexTake+0x5c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	6a1b      	ldr	r3, [r3, #32]
 8000b18:	21ff      	movs	r1, #255	@ 0xff
 8000b1a:	54d1      	strb	r1, [r2, r3]
#endif

	*pxIndex = xIndex;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	7bfa      	ldrb	r2, [r7, #15]
 8000b20:	701a      	strb	r2, [r3, #0]
	return TRC_SUCCESS;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	20000090 	.word	0x20000090

08000b34 <xTraceErrorInitialize>:
static traceResult prvTraceErrorGetDescription(uint32_t uiErrorCode, const char** pszDesc);

static TraceErrorData_t* pxErrorInfo TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceErrorInitialize(TraceErrorData_t* pxBuffer)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxErrorInfo = pxBuffer;
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b74 <xTraceErrorInitialize+0x40>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6013      	str	r3, [r2, #0]

	pxErrorInfo->uiErrorAndWarningFlags = 0u;
 8000b42:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <xTraceErrorInitialize+0x40>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
	pxErrorInfo->uiErrorCode = 0u;
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <xTraceErrorInitialize+0x40>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	605a      	str	r2, [r3, #4]
	pxErrorInfo->xWarningChannel = 0;
 8000b52:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <xTraceErrorInitialize+0x40>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ERROR);
 8000b5a:	4b07      	ldr	r3, [pc, #28]	@ (8000b78 <xTraceErrorInitialize+0x44>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f043 0320 	orr.w	r3, r3, #32
 8000b62:	4a05      	ldr	r2, [pc, #20]	@ (8000b78 <xTraceErrorInitialize+0x44>)
 8000b64:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 8000b66:	2300      	movs	r3, #0
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	20000094 	.word	0x20000094
 8000b78:	20001eec 	.word	0x20001eec

08000b7c <xTraceWarning>:

traceResult xTraceWarning(uint32_t uiErrorCode)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	/* Probably good to verify this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ERROR) == 0U)
 8000b84:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <xTraceWarning+0x54>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f003 0320 	and.w	r3, r3, #32
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d101      	bne.n	8000b94 <xTraceWarning+0x18>
	{
		/* If not initialized */
		return TRC_FAIL;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e019      	b.n	8000bc8 <xTraceWarning+0x4c>
	}
	
	if (GET_ERROR_WARNING_FLAG(uiErrorCode) == 0u)
 8000b94:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <xTraceWarning+0x58>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d10d      	bne.n	8000bc6 <xTraceWarning+0x4a>
	{
		/* Will never reach this point more than once per warning type, since we verify if uiErrorAndWarningFlags[uiErrorCode] has already been set */
		SET_ERROR_WARNING_FLAG(uiErrorCode);
 8000baa:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd4 <xTraceWarning+0x58>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	6819      	ldr	r1, [r3, #0]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	409a      	lsls	r2, r3
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <xTraceWarning+0x58>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	601a      	str	r2, [r3, #0]

		(void)prvTraceErrorPrint(uiErrorCode);
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f000 f847 	bl	8000c54 <prvTraceErrorPrint>
	}

	return TRC_SUCCESS;
 8000bc6:	2300      	movs	r3, #0
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20001eec 	.word	0x20001eec
 8000bd4:	20000094 	.word	0x20000094

08000bd8 <xTraceError>:

traceResult xTraceError(uint32_t uiErrorCode)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	/* Probably good to verify this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ERROR) == 0U)
 8000be0:	4b19      	ldr	r3, [pc, #100]	@ (8000c48 <xTraceError+0x70>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f003 0320 	and.w	r3, r3, #32
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d101      	bne.n	8000bf0 <xTraceError+0x18>
	{
		return TRC_FAIL;
 8000bec:	2301      	movs	r3, #1
 8000bee:	e027      	b.n	8000c40 <xTraceError+0x68>
	}

	if (pxErrorInfo->uiErrorCode == TRC_ERROR_NONE)
 8000bf0:	4b16      	ldr	r3, [pc, #88]	@ (8000c4c <xTraceError+0x74>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d121      	bne.n	8000c3e <xTraceError+0x66>
	{
		/* Will never reach this point more than once, since we verify if uiErrorCode has already been set */
		SET_ERROR_WARNING_FLAG(uiErrorCode);
 8000bfa:	4b14      	ldr	r3, [pc, #80]	@ (8000c4c <xTraceError+0x74>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	6819      	ldr	r1, [r3, #0]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	2201      	movs	r2, #1
 8000c06:	409a      	lsls	r2, r3
 8000c08:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <xTraceError+0x74>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	601a      	str	r2, [r3, #0]
		pxErrorInfo->uiErrorCode = uiErrorCode;
 8000c10:	4b0e      	ldr	r3, [pc, #56]	@ (8000c4c <xTraceError+0x74>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	605a      	str	r2, [r3, #4]

		if (prvTraceErrorPrint(uiErrorCode) == TRC_FAIL)
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f000 f81b 	bl	8000c54 <prvTraceErrorPrint>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d103      	bne.n	8000c2c <xTraceError+0x54>
		{
			(void)xTraceDisable();
 8000c24:	f001 fe68 	bl	80028f8 <xTraceDisable>
			
			return TRC_FAIL;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e009      	b.n	8000c40 <xTraceError+0x68>
		}
		
		(void)xTracePrint(pxErrorInfo->xWarningChannel, "Recorder stopped in xTraceError(...)!");
 8000c2c:	4b07      	ldr	r3, [pc, #28]	@ (8000c4c <xTraceError+0x74>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	4907      	ldr	r1, [pc, #28]	@ (8000c50 <xTraceError+0x78>)
 8000c34:	4618      	mov	r0, r3
 8000c36:	f001 f9ef 	bl	8002018 <xTracePrint>
		(void)xTraceDisable();
 8000c3a:	f001 fe5d 	bl	80028f8 <xTraceDisable>
	}

	return TRC_SUCCESS;
 8000c3e:	2300      	movs	r3, #0
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20001eec 	.word	0x20001eec
 8000c4c:	20000094 	.word	0x20000094
 8000c50:	0800c1f0 	.word	0x0800c1f0

08000c54 <prvTraceErrorPrint>:

	return TRC_SUCCESS;
}

static traceResult prvTraceErrorPrint(uint32_t uiErrorCode)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	TraceStringHandle_t xFileName;
	
	/* Note: the error messages are short, in order to fit in a User Event.
	Instead, the users can read more in the below comments.*/

	if (pxErrorInfo->xWarningChannel == 0)
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd4 <prvTraceErrorPrint+0x80>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d10b      	bne.n	8000c7e <prvTraceErrorPrint+0x2a>
		* The abbreviation #WFR is used instead of the longer full name,
		* to avoid truncation by small slots in the symbol table.
		* This is translated in Tracealyzer and shown as the full name,
		* "Warnings from Recorder".
		 */
		if (xTraceStringRegister("#WFR", &pxErrorInfo->xWarningChannel) == TRC_FAIL)
 8000c66:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd4 <prvTraceErrorPrint+0x80>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	3308      	adds	r3, #8
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	481a      	ldr	r0, [pc, #104]	@ (8000cd8 <prvTraceErrorPrint+0x84>)
 8000c70:	f001 ffce 	bl	8002c10 <xTraceStringRegister>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d101      	bne.n	8000c7e <prvTraceErrorPrint+0x2a>
		{
			return TRC_FAIL;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e025      	b.n	8000cca <prvTraceErrorPrint+0x76>
		}
	}

	(void)prvTraceErrorGetDescription(uiErrorCode, &szDesc);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f000 f82b 	bl	8000ce0 <prvTraceErrorGetDescription>

	switch (uiErrorCode)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d011      	beq.n	8000cb4 <prvTraceErrorPrint+0x60>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d010      	beq.n	8000cb8 <prvTraceErrorPrint+0x64>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3b02      	subs	r3, #2
 8000c9a:	2b0c      	cmp	r3, #12
 8000c9c:	d80c      	bhi.n	8000cb8 <prvTraceErrorPrint+0x64>
	case TRC_ERROR_EVENT_CODE_TOO_LARGE:
	case TRC_ERROR_ISR_NESTING_OVERFLOW:
	case TRC_ERROR_DWT_NOT_SUPPORTED:
	case TRC_ERROR_DWT_CYCCNT_NOT_SUPPORTED:
	case TRC_ERROR_TZCTRLTASK_NOT_CREATED:
		(void)xTracePrint(pxErrorInfo->xWarningChannel, szDesc);
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd4 <prvTraceErrorPrint+0x80>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	697a      	ldr	r2, [r7, #20]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f001 f9b5 	bl	8002018 <xTracePrint>
		break;
 8000cae:	bf00      	nop
		
		return TRC_FAIL;
		break;
	}

	return TRC_SUCCESS;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e00a      	b.n	8000cca <prvTraceErrorPrint+0x76>
			return TRC_FAIL;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e008      	b.n	8000cca <prvTraceErrorPrint+0x76>
		(void)xTracePrintF(pxErrorInfo->xWarningChannel, "Unknown error code: 0x%08X", uiErrorCode);
 8000cb8:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <prvTraceErrorPrint+0x80>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	4906      	ldr	r1, [pc, #24]	@ (8000cdc <prvTraceErrorPrint+0x88>)
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f001 f9de 	bl	8002084 <xTracePrintF>
		return TRC_FAIL;
 8000cc8:	2301      	movs	r3, #1
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000094 	.word	0x20000094
 8000cd8:	0800c218 	.word	0x0800c218
 8000cdc:	0800c220 	.word	0x0800c220

08000ce0 <prvTraceErrorGetDescription>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
static traceResult prvTraceErrorGetDescription(uint32_t uiErrorCode, const char** pszDesc)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
	/* Note: the error messages are short, in order to fit in a User Event.
	Instead, the users can read more in the below comments.*/

	switch (uiErrorCode)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b0e      	cmp	r3, #14
 8000cee:	d85b      	bhi.n	8000da8 <prvTraceErrorGetDescription+0xc8>
 8000cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8000cf8 <prvTraceErrorGetDescription+0x18>)
 8000cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf6:	bf00      	nop
 8000cf8:	08000d35 	.word	0x08000d35
 8000cfc:	08000da1 	.word	0x08000da1
 8000d00:	08000d79 	.word	0x08000d79
 8000d04:	08000d81 	.word	0x08000d81
 8000d08:	08000d89 	.word	0x08000d89
 8000d0c:	08000d91 	.word	0x08000d91
 8000d10:	08000d99 	.word	0x08000d99
 8000d14:	08000d71 	.word	0x08000d71
 8000d18:	08000d39 	.word	0x08000d39
 8000d1c:	08000d41 	.word	0x08000d41
 8000d20:	08000d49 	.word	0x08000d49
 8000d24:	08000d51 	.word	0x08000d51
 8000d28:	08000d59 	.word	0x08000d59
 8000d2c:	08000d61 	.word	0x08000d61
 8000d30:	08000d69 	.word	0x08000d69
	{
	case TRC_ERROR_NONE:
		return TRC_FAIL;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e03c      	b.n	8000db2 <prvTraceErrorGetDescription+0xd2>
	case TRC_WARNING_ENTRY_TABLE_SLOTS:
		/* There was not enough symbol table slots for storing symbol names.
		The number of missing slots is counted by NoRoomForSymbol. Inspect this
		variable and increase TRC_CFG_ENTRY_TABLE_SLOTS by at least that value. */

		*pszDesc = "Exceeded TRC_CFG_ENTRY_TABLE_SLOTS";
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	4a21      	ldr	r2, [pc, #132]	@ (8000dc0 <prvTraceErrorGetDescription+0xe0>)
 8000d3c:	601a      	str	r2, [r3, #0]
		break;
 8000d3e:	e037      	b.n	8000db0 <prvTraceErrorGetDescription+0xd0>
		/* A symbol name exceeded TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH in length.
		Make sure the symbol names are at most TRC_CFG_SYMBOL_MAX_LENGTH,
		or inspect uiLongestSymbolName in trcEntryTable and increase
		TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH to at least this value. */

		*pszDesc = "Exceeded TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH";
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	4a20      	ldr	r2, [pc, #128]	@ (8000dc4 <prvTraceErrorGetDescription+0xe4>)
 8000d44:	601a      	str	r2, [r3, #0]
		break;
 8000d46:	e033      	b.n	8000db0 <prvTraceErrorGetDescription+0xd0>
		- xTraceStringRegister

		A trace event may store a maximum of 56 bytes payload, including
		data arguments and string characters. */

		*pszDesc = "Event size exceeded";
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8000dc8 <prvTraceErrorGetDescription+0xe8>)
 8000d4c:	601a      	str	r2, [r3, #0]
		break;
 8000d4e:	e02f      	b.n	8000db0 <prvTraceErrorGetDescription+0xd0>

	case TRC_WARNING_STREAM_PORT_READ:
		/* TRC_STREAM_PORT_READ_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_READ_DATA returned error";
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	4a1e      	ldr	r2, [pc, #120]	@ (8000dcc <prvTraceErrorGetDescription+0xec>)
 8000d54:	601a      	str	r2, [r3, #0]
		break;
 8000d56:	e02b      	b.n	8000db0 <prvTraceErrorGetDescription+0xd0>

	case TRC_WARNING_STREAM_PORT_WRITE:
		/* TRC_STREAM_PORT_WRITE_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_WRITE_DATA returned error";
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8000dd0 <prvTraceErrorGetDescription+0xf0>)
 8000d5c:	601a      	str	r2, [r3, #0]
		break;
 8000d5e:	e027      	b.n	8000db0 <prvTraceErrorGetDescription+0xd0>

	case TRC_WARNING_STREAM_PORT_INITIAL_BLOCKING:
		/* Blocking occurred during xTraceEnable. This happens if the trace buffer is
		smaller than the initial transmission (trace header, object table, and symbol table). */

		*pszDesc = "Blocking in xTraceEnable";
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd4 <prvTraceErrorGetDescription+0xf4>)
 8000d64:	601a      	str	r2, [r3, #0]
		break;
 8000d66:	e023      	b.n	8000db0 <prvTraceErrorGetDescription+0xd0>

	case TRC_WARNING_STACKMON_NO_SLOTS:
		/* Some tasks did not fit in the stack monitor. Increase the slot count. */

		*pszDesc = "No slots left in Stack Monitor";
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8000dd8 <prvTraceErrorGetDescription+0xf8>)
 8000d6c:	601a      	str	r2, [r3, #0]
		break;
 8000d6e:	e01f      	b.n	8000db0 <prvTraceErrorGetDescription+0xd0>

	case TRC_ERROR_STREAM_PORT_WRITE:
		/* TRC_STREAM_PORT_WRITE_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_WRITE_DATA returned error";
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	4a17      	ldr	r2, [pc, #92]	@ (8000dd0 <prvTraceErrorGetDescription+0xf0>)
 8000d74:	601a      	str	r2, [r3, #0]
		break;
 8000d76:	e01b      	b.n	8000db0 <prvTraceErrorGetDescription+0xd0>

	case TRC_ERROR_EVENT_CODE_TOO_LARGE:
		/* The highest allowed event code is 4095, anything higher is an unexpected error.
		Please contact support@percepio.com for assistance.*/

		*pszDesc = "Invalid event code";
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	4a18      	ldr	r2, [pc, #96]	@ (8000ddc <prvTraceErrorGetDescription+0xfc>)
 8000d7c:	601a      	str	r2, [r3, #0]
		break;
 8000d7e:	e017      	b.n	8000db0 <prvTraceErrorGetDescription+0xd0>
	case TRC_ERROR_ISR_NESTING_OVERFLOW:
		/* Nesting of ISR trace calls exceeded the limit (TRC_CFG_MAX_ISR_NESTING).
		If this is unlikely, make sure that you call vTraceStoreISRExit in the end
		of all ISR handlers. Or increase TRC_CFG_MAX_ISR_NESTING. */

		*pszDesc = "Exceeded ISR nesting";
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	4a17      	ldr	r2, [pc, #92]	@ (8000de0 <prvTraceErrorGetDescription+0x100>)
 8000d84:	601a      	str	r2, [r3, #0]
		break;
 8000d86:	e013      	b.n	8000db0 <prvTraceErrorGetDescription+0xd0>
		/* On ARM Cortex-M only - failed to initialize DWT Cycle Counter since not supported by this chip.
		DWT timestamping is selected automatically for ART Cortex-M3, M4 and higher, based on the __CORTEX_M
		macro normally set by ARM's CMSIS library, since typically available. You can however select
		SysTick timestamping instead by defining adding "#define TRC_CFG_ARM_CM_USE_SYSTICK".*/

		*pszDesc = "DWT not supported";
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	4a16      	ldr	r2, [pc, #88]	@ (8000de4 <prvTraceErrorGetDescription+0x104>)
 8000d8c:	601a      	str	r2, [r3, #0]
		break;
 8000d8e:	e00f      	b.n	8000db0 <prvTraceErrorGetDescription+0xd0>
		/* On ARM Cortex-M only - failed to initialize DWT Cycle Counter since not supported by this chip.
		DWT timestamping is selected automatically for ART Cortex-M3, M4 and higher, based on the __CORTEX_M
		macro normally set by ARM's CMSIS library, since typically available. You can however select
		SysTick timestamping instead by defining adding "#define TRC_CFG_ARM_CM_USE_SYSTICK".*/

		*pszDesc = "DWT_CYCCNT not supported";
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	4a15      	ldr	r2, [pc, #84]	@ (8000de8 <prvTraceErrorGetDescription+0x108>)
 8000d94:	601a      	str	r2, [r3, #0]
		break;
 8000d96:	e00b      	b.n	8000db0 <prvTraceErrorGetDescription+0xd0>

	case TRC_ERROR_TZCTRLTASK_NOT_CREATED:
		/* xTraceEnable failed creating the trace control task (TzCtrl) - incorrect parameters (priority?)
		or insufficient heap size? */
		*pszDesc = "Could not create TzCtrl";
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	4a14      	ldr	r2, [pc, #80]	@ (8000dec <prvTraceErrorGetDescription+0x10c>)
 8000d9c:	601a      	str	r2, [r3, #0]
		break;
 8000d9e:	e007      	b.n	8000db0 <prvTraceErrorGetDescription+0xd0>

	case TRC_ERROR_ASSERT:
		/* A TRC_ASSERT has triggered */
		*pszDesc = "ASSERT: %s (%d)";
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	4a13      	ldr	r2, [pc, #76]	@ (8000df0 <prvTraceErrorGetDescription+0x110>)
 8000da4:	601a      	str	r2, [r3, #0]
		break;
 8000da6:	e003      	b.n	8000db0 <prvTraceErrorGetDescription+0xd0>

	default:
		/* An unknown error occurred */
		*pszDesc = "Unknown error code: 0x%08X";
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	4a12      	ldr	r2, [pc, #72]	@ (8000df4 <prvTraceErrorGetDescription+0x114>)
 8000dac:	601a      	str	r2, [r3, #0]
		break;
 8000dae:	bf00      	nop
	}

	return TRC_SUCCESS;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	0800c23c 	.word	0x0800c23c
 8000dc4:	0800c260 	.word	0x0800c260
 8000dc8:	0800c28c 	.word	0x0800c28c
 8000dcc:	0800c2a0 	.word	0x0800c2a0
 8000dd0:	0800c2cc 	.word	0x0800c2cc
 8000dd4:	0800c2f8 	.word	0x0800c2f8
 8000dd8:	0800c314 	.word	0x0800c314
 8000ddc:	0800c334 	.word	0x0800c334
 8000de0:	0800c348 	.word	0x0800c348
 8000de4:	0800c360 	.word	0x0800c360
 8000de8:	0800c374 	.word	0x0800c374
 8000dec:	0800c390 	.word	0x0800c390
 8000df0:	0800c3a8 	.word	0x0800c3a8
 8000df4:	0800c220 	.word	0x0800c220

08000df8 <xTraceEventInitialize>:
	}

TraceEventDataTable_t *pxTraceEventDataTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceEventInitialize(TraceEventDataTable_t* pxBuffer)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	uint32_t i, j;

	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceEventDataTable = pxBuffer;
 8000e00:	4a25      	ldr	r2, [pc, #148]	@ (8000e98 <xTraceEventInitialize+0xa0>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]

	for (i = 0u; i < (uint32_t)(TRC_CFG_CORE_COUNT); i++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	e034      	b.n	8000e76 <xTraceEventInitialize+0x7e>
	{
		pxCoreEventData = &pxTraceEventDataTable->coreEventData[i];
 8000e0c:	4b22      	ldr	r3, [pc, #136]	@ (8000e98 <xTraceEventInitialize+0xa0>)
 8000e0e:	6819      	ldr	r1, [r3, #0]
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	4613      	mov	r3, r2
 8000e14:	011b      	lsls	r3, r3, #4
 8000e16:	1a9b      	subs	r3, r3, r2
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	440b      	add	r3, r1
 8000e1c:	60fb      	str	r3, [r7, #12]

		pxCoreEventData->eventCounter = 0u;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	2200      	movs	r2, #0
 8000e22:	66da      	str	r2, [r3, #108]	@ 0x6c

		for (j = 0u; j < ((uint32_t)(TRC_CFG_MAX_ISR_NESTING) + 1u); j++)
 8000e24:	2300      	movs	r3, #0
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	e01f      	b.n	8000e6a <xTraceEventInitialize+0x72>
		{
			RESET_EVENT_DATA(&pxCoreEventData->eventData[j]);
 8000e2a:	68f9      	ldr	r1, [r7, #12]
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	4413      	add	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	440b      	add	r3, r1
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	68f9      	ldr	r1, [r7, #12]
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4613      	mov	r3, r2
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	4413      	add	r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	440b      	add	r3, r1
 8000e4a:	3304      	adds	r3, #4
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	68f9      	ldr	r1, [r7, #12]
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4613      	mov	r3, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	4413      	add	r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	3308      	adds	r3, #8
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
		for (j = 0u; j < ((uint32_t)(TRC_CFG_MAX_ISR_NESTING) + 1u); j++)
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	3301      	adds	r3, #1
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	2b08      	cmp	r3, #8
 8000e6e:	d9dc      	bls.n	8000e2a <xTraceEventInitialize+0x32>
	for (i = 0u; i < (uint32_t)(TRC_CFG_CORE_COUNT); i++)
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	3301      	adds	r3, #1
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0c7      	beq.n	8000e0c <xTraceEventInitialize+0x14>
		}
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EVENT);
 8000e7c:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <xTraceEventInitialize+0xa4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e84:	4a05      	ldr	r2, [pc, #20]	@ (8000e9c <xTraceEventInitialize+0xa4>)
 8000e86:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	371c      	adds	r7, #28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000098 	.word	0x20000098
 8000e9c:	20001eec 	.word	0x20001eec

08000ea0 <xTraceEventCreate1>:

	return TRC_SUCCESS;
}

traceResult xTraceEventCreate1(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	@ 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
	TraceEvent1_t* pxEventData = (void*)0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
	int32_t iBytesCommitted = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* We need to check this */
	if (!xTraceIsRecorderEnabled())
 8000eb2:	4b35      	ldr	r3, [pc, #212]	@ (8000f88 <xTraceEventCreate1+0xe8>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d004      	beq.n	8000ec8 <xTraceEventCreate1+0x28>
 8000ebe:	4b33      	ldr	r3, [pc, #204]	@ (8000f8c <xTraceEventCreate1+0xec>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d101      	bne.n	8000ecc <xTraceEventCreate1+0x2c>
	{
		return TRC_FAIL;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e058      	b.n	8000f7e <xTraceEventCreate1+0xde>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ecc:	f3ef 8310 	mrs	r3, PRIMASK
 8000ed0:	61fb      	str	r3, [r7, #28]
  return(result);
 8000ed2:	69fb      	ldr	r3, [r7, #28]
	}

	TRACE_ENTER_CRITICAL_SECTION();
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000eda:	6a3b      	ldr	r3, [r7, #32]
 8000edc:	f383 8810 	msr	PRIMASK, r3
}
 8000ee0:	bf00      	nop

	pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()].eventCounter++;
 8000ee2:	4b2b      	ldr	r3, [pc, #172]	@ (8000f90 <xTraceEventCreate1+0xf0>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8000ee8:	3201      	adds	r2, #1
 8000eea:	66da      	str	r2, [r3, #108]	@ 0x6c

	if (xTraceStreamPortAllocate(sizeof(TraceEvent1_t), (void**)&pxEventData) == TRC_FAIL) /*cstat !MISRAC2004-11.4 !MISRAC2012-Rule-11.3 Suppress pointer checks*/
 8000eec:	4b29      	ldr	r3, [pc, #164]	@ (8000f94 <xTraceEventCreate1+0xf4>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f107 0210 	add.w	r2, r7, #16
 8000ef6:	210c      	movs	r1, #12
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 fa7f 	bl	80013fc <xTraceEventBufferAlloc>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d107      	bne.n	8000f14 <xTraceEventCreate1+0x74>
 8000f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f06:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	f383 8810 	msr	PRIMASK, r3
}
 8000f0e:	bf00      	nop
	{
		TRACE_EXIT_CRITICAL_SECTION();
		return TRC_FAIL;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e034      	b.n	8000f7e <xTraceEventCreate1+0xde>
	}

	SET_BASE_EVENT_DATA(pxEventData, uiEventCode, 1, pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()].eventCounter); /*cstat !MISRAC2012-Rule-11.5 Suppress pointer checks*/
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000f1e:	b292      	uxth	r2, r2
 8000f20:	801a      	strh	r2, [r3, #0]
 8000f22:	4b1b      	ldr	r3, [pc, #108]	@ (8000f90 <xTraceEventCreate1+0xf0>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	b292      	uxth	r2, r2
 8000f2c:	805a      	strh	r2, [r3, #2]
 8000f2e:	4a1a      	ldr	r2, [pc, #104]	@ (8000f98 <xTraceEventCreate1+0xf8>)
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	6812      	ldr	r2, [r2, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	4b18      	ldr	r3, [pc, #96]	@ (8000f9c <xTraceEventCreate1+0xfc>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d204      	bcs.n	8000f4e <xTraceEventCreate1+0xae>
 8000f44:	4b15      	ldr	r3, [pc, #84]	@ (8000f9c <xTraceEventCreate1+0xfc>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68da      	ldr	r2, [r3, #12]
 8000f4a:	3201      	adds	r2, #1
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4b12      	ldr	r3, [pc, #72]	@ (8000f9c <xTraceEventCreate1+0xfc>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6852      	ldr	r2, [r2, #4]
 8000f56:	615a      	str	r2, [r3, #20]

	pxEventData->uxParams[0] = uxParam1;
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	609a      	str	r2, [r3, #8]

	(void)xTraceStreamPortCommit(pxEventData, sizeof(TraceEvent1_t), &iBytesCommitted);
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f94 <xTraceEventCreate1+0xf4>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6818      	ldr	r0, [r3, #0]
 8000f64:	6939      	ldr	r1, [r7, #16]
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	f000 fb5e 	bl	800162c <xTraceEventBufferAllocCommit>
 8000f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	f383 8810 	msr	PRIMASK, r3
}
 8000f7a:	bf00      	nop

	/* We need to use iBytesCommitted for the above call but do not use the value,
	 * remove potential warnings */
	(void)iBytesCommitted;

	return TRC_SUCCESS;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3728      	adds	r7, #40	@ 0x28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20001eec 	.word	0x20001eec
 8000f8c:	20001ee4 	.word	0x20001ee4
 8000f90:	20000098 	.word	0x20000098
 8000f94:	20000080 	.word	0x20000080
 8000f98:	e0001004 	.word	0xe0001004
 8000f9c:	20001ef4 	.word	0x20001ef4

08000fa0 <xTraceEventCreate2>:

traceResult xTraceEventCreate2(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08c      	sub	sp, #48	@ 0x30
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
	TraceEvent2_t* pxEventData = (void*)0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61bb      	str	r3, [r7, #24]
	int32_t iBytesCommitted = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* We need to check this */
	if (!xTraceIsRecorderEnabled())
 8000fb4:	4b36      	ldr	r3, [pc, #216]	@ (8001090 <xTraceEventCreate2+0xf0>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d004      	beq.n	8000fca <xTraceEventCreate2+0x2a>
 8000fc0:	4b34      	ldr	r3, [pc, #208]	@ (8001094 <xTraceEventCreate2+0xf4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <xTraceEventCreate2+0x2e>
	{
		return TRC_FAIL;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e05b      	b.n	8001086 <xTraceEventCreate2+0xe6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000fce:	f3ef 8310 	mrs	r3, PRIMASK
 8000fd2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}

	TRACE_ENTER_CRITICAL_SECTION();
 8000fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fd8:	2301      	movs	r3, #1
 8000fda:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fde:	f383 8810 	msr	PRIMASK, r3
}
 8000fe2:	bf00      	nop

	pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()].eventCounter++;
 8000fe4:	4b2c      	ldr	r3, [pc, #176]	@ (8001098 <xTraceEventCreate2+0xf8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8000fea:	3201      	adds	r2, #1
 8000fec:	66da      	str	r2, [r3, #108]	@ 0x6c

	if (xTraceStreamPortAllocate(sizeof(TraceEvent2_t), (void**)&pxEventData) == TRC_FAIL) /*cstat !MISRAC2004-11.4 !MISRAC2012-Rule-11.3 Suppress pointer checks*/
 8000fee:	4b2b      	ldr	r3, [pc, #172]	@ (800109c <xTraceEventCreate2+0xfc>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f107 0218 	add.w	r2, r7, #24
 8000ff8:	2110      	movs	r1, #16
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f9fe 	bl	80013fc <xTraceEventBufferAlloc>
 8001000:	4603      	mov	r3, r0
 8001002:	2b01      	cmp	r3, #1
 8001004:	d107      	bne.n	8001016 <xTraceEventCreate2+0x76>
 8001006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001008:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800100a:	6a3b      	ldr	r3, [r7, #32]
 800100c:	f383 8810 	msr	PRIMASK, r3
}
 8001010:	bf00      	nop
	{
		TRACE_EXIT_CRITICAL_SECTION();
		return TRC_FAIL;
 8001012:	2301      	movs	r3, #1
 8001014:	e037      	b.n	8001086 <xTraceEventCreate2+0xe6>
	}

	SET_BASE_EVENT_DATA(pxEventData, uiEventCode, 2, pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()].eventCounter); /*cstat !MISRAC2012-Rule-11.5 Suppress pointer checks*/
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	b29a      	uxth	r2, r3
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001020:	b292      	uxth	r2, r2
 8001022:	801a      	strh	r2, [r3, #0]
 8001024:	4b1c      	ldr	r3, [pc, #112]	@ (8001098 <xTraceEventCreate2+0xf8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	b292      	uxth	r2, r2
 800102e:	805a      	strh	r2, [r3, #2]
 8001030:	4a1b      	ldr	r2, [pc, #108]	@ (80010a0 <xTraceEventCreate2+0x100>)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	6812      	ldr	r2, [r2, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	4b19      	ldr	r3, [pc, #100]	@ (80010a4 <xTraceEventCreate2+0x104>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	429a      	cmp	r2, r3
 8001044:	d204      	bcs.n	8001050 <xTraceEventCreate2+0xb0>
 8001046:	4b17      	ldr	r3, [pc, #92]	@ (80010a4 <xTraceEventCreate2+0x104>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	68da      	ldr	r2, [r3, #12]
 800104c:	3201      	adds	r2, #1
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <xTraceEventCreate2+0x104>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6852      	ldr	r2, [r2, #4]
 8001058:	615a      	str	r2, [r3, #20]

	pxEventData->uxParams[0] = uxParam1;
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	609a      	str	r2, [r3, #8]
	pxEventData->uxParams[1] = uxParam2;
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	60da      	str	r2, [r3, #12]

	(void)xTraceStreamPortCommit(pxEventData, sizeof(TraceEvent2_t), &iBytesCommitted);
 8001066:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <xTraceEventCreate2+0xfc>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6818      	ldr	r0, [r3, #0]
 800106c:	69b9      	ldr	r1, [r7, #24]
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	2210      	movs	r2, #16
 8001074:	f000 fada 	bl	800162c <xTraceEventBufferAllocCommit>
 8001078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800107a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f383 8810 	msr	PRIMASK, r3
}
 8001082:	bf00      	nop

	/* We need to use iBytesCommitted for the above call but do not use the value,
	 * remove potential warnings */
	(void)iBytesCommitted;

	return TRC_SUCCESS;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3730      	adds	r7, #48	@ 0x30
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20001eec 	.word	0x20001eec
 8001094:	20001ee4 	.word	0x20001ee4
 8001098:	20000098 	.word	0x20000098
 800109c:	20000080 	.word	0x20000080
 80010a0:	e0001004 	.word	0xe0001004
 80010a4:	20001ef4 	.word	0x20001ef4

080010a8 <xTraceEventCreate3>:

traceResult xTraceEventCreate3(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2, TraceUnsignedBaseType_t uxParam3)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08c      	sub	sp, #48	@ 0x30
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	603b      	str	r3, [r7, #0]
	TraceEvent3_t* pxEventData = (void*)0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
	int32_t iBytesCommitted = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* We need to check this */
	if (!xTraceIsRecorderEnabled())
 80010be:	4b38      	ldr	r3, [pc, #224]	@ (80011a0 <xTraceEventCreate3+0xf8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d004      	beq.n	80010d4 <xTraceEventCreate3+0x2c>
 80010ca:	4b36      	ldr	r3, [pc, #216]	@ (80011a4 <xTraceEventCreate3+0xfc>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <xTraceEventCreate3+0x30>
	{
		return TRC_FAIL;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e05e      	b.n	8001196 <xTraceEventCreate3+0xee>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010d8:	f3ef 8310 	mrs	r3, PRIMASK
 80010dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80010de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}

	TRACE_ENTER_CRITICAL_SECTION();
 80010e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010e2:	2301      	movs	r3, #1
 80010e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010e8:	f383 8810 	msr	PRIMASK, r3
}
 80010ec:	bf00      	nop

	pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()].eventCounter++;
 80010ee:	4b2e      	ldr	r3, [pc, #184]	@ (80011a8 <xTraceEventCreate3+0x100>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80010f4:	3201      	adds	r2, #1
 80010f6:	66da      	str	r2, [r3, #108]	@ 0x6c

	if (xTraceStreamPortAllocate(sizeof(TraceEvent3_t), (void**)&pxEventData) == TRC_FAIL) /*cstat !MISRAC2004-11.4 !MISRAC2012-Rule-11.3 Suppress pointer checks*/
 80010f8:	4b2c      	ldr	r3, [pc, #176]	@ (80011ac <xTraceEventCreate3+0x104>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f107 0218 	add.w	r2, r7, #24
 8001102:	2114      	movs	r1, #20
 8001104:	4618      	mov	r0, r3
 8001106:	f000 f979 	bl	80013fc <xTraceEventBufferAlloc>
 800110a:	4603      	mov	r3, r0
 800110c:	2b01      	cmp	r3, #1
 800110e:	d107      	bne.n	8001120 <xTraceEventCreate3+0x78>
 8001110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001112:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001114:	6a3b      	ldr	r3, [r7, #32]
 8001116:	f383 8810 	msr	PRIMASK, r3
}
 800111a:	bf00      	nop
	{
		TRACE_EXIT_CRITICAL_SECTION();
		return TRC_FAIL;
 800111c:	2301      	movs	r3, #1
 800111e:	e03a      	b.n	8001196 <xTraceEventCreate3+0xee>
	}

	SET_BASE_EVENT_DATA(pxEventData, uiEventCode, 3, pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()].eventCounter); /*cstat !MISRAC2012-Rule-11.5 Suppress pointer checks*/
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	b29a      	uxth	r2, r3
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	f442 5240 	orr.w	r2, r2, #12288	@ 0x3000
 800112a:	b292      	uxth	r2, r2
 800112c:	801a      	strh	r2, [r3, #0]
 800112e:	4b1e      	ldr	r3, [pc, #120]	@ (80011a8 <xTraceEventCreate3+0x100>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	b292      	uxth	r2, r2
 8001138:	805a      	strh	r2, [r3, #2]
 800113a:	4a1d      	ldr	r2, [pc, #116]	@ (80011b0 <xTraceEventCreate3+0x108>)
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	6812      	ldr	r2, [r2, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	4b1b      	ldr	r3, [pc, #108]	@ (80011b4 <xTraceEventCreate3+0x10c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	429a      	cmp	r2, r3
 800114e:	d204      	bcs.n	800115a <xTraceEventCreate3+0xb2>
 8001150:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <xTraceEventCreate3+0x10c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	3201      	adds	r2, #1
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <xTraceEventCreate3+0x10c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6852      	ldr	r2, [r2, #4]
 8001162:	615a      	str	r2, [r3, #20]
	
	pxEventData->uxParams[0] = uxParam1;
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	609a      	str	r2, [r3, #8]
	pxEventData->uxParams[1] = uxParam2;
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	60da      	str	r2, [r3, #12]
	pxEventData->uxParams[2] = uxParam3;
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	611a      	str	r2, [r3, #16]

	(void)xTraceStreamPortCommit(pxEventData, sizeof(TraceEvent3_t), &iBytesCommitted);
 8001176:	4b0d      	ldr	r3, [pc, #52]	@ (80011ac <xTraceEventCreate3+0x104>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	69b9      	ldr	r1, [r7, #24]
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	2214      	movs	r2, #20
 8001184:	f000 fa52 	bl	800162c <xTraceEventBufferAllocCommit>
 8001188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800118a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f383 8810 	msr	PRIMASK, r3
}
 8001192:	bf00      	nop

	/* We need to use iBytesCommitted for the above call but do not use the value,
	 * remove potential warnings */
	(void)iBytesCommitted;

	return TRC_SUCCESS;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3730      	adds	r7, #48	@ 0x30
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20001eec 	.word	0x20001eec
 80011a4:	20001ee4 	.word	0x20001ee4
 80011a8:	20000098 	.word	0x20000098
 80011ac:	20000080 	.word	0x20000080
 80011b0:	e0001004 	.word	0xe0001004
 80011b4:	20001ef4 	.word	0x20001ef4

080011b8 <xTraceEventBeginRawOffline>:

	return TRC_SUCCESS;
}

traceResult xTraceEventBeginRawOffline(uint32_t uiSize, TraceEventHandle_t* pxEventHandle)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	@ 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
	int32_t ISR_nesting = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
	TraceCoreEventData_t* pxCoreEventData;

	TRACE_ALLOC_CRITICAL_SECTION();

	/* We need to check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_EVENT) == 0U)
 80011c6:	4b2d      	ldr	r3, [pc, #180]	@ (800127c <xTraceEventBeginRawOffline+0xc4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <xTraceEventBeginRawOffline+0x1e>
	{
		return TRC_FAIL;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e04e      	b.n	8001274 <xTraceEventBeginRawOffline+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011d6:	f3ef 8310 	mrs	r3, PRIMASK
 80011da:	617b      	str	r3, [r7, #20]
  return(result);
 80011dc:	697b      	ldr	r3, [r7, #20]
	}

	/* This should never fail */
	TRC_ASSERT(pxEventHandle != (void*)0);

	TRACE_ENTER_CRITICAL_SECTION();
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
 80011e0:	2301      	movs	r3, #1
 80011e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	f383 8810 	msr	PRIMASK, r3
}
 80011ea:	bf00      	nop

	pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()].eventCounter++;
 80011ec:	4b24      	ldr	r3, [pc, #144]	@ (8001280 <xTraceEventBeginRawOffline+0xc8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80011f2:	3201      	adds	r2, #1
 80011f4:	66da      	str	r2, [r3, #108]	@ 0x6c

	pxCoreEventData = &pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()];
 80011f6:	4b22      	ldr	r3, [pc, #136]	@ (8001280 <xTraceEventBeginRawOffline+0xc8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	623b      	str	r3, [r7, #32]

	/* We backup the local variable to the CORE specific variable */
	pxCoreEventData->TRACE_ALLOC_CRITICAL_SECTION_NAME = TRACE_ALLOC_CRITICAL_SECTION_NAME;
 80011fc:	6a3b      	ldr	r3, [r7, #32]
 80011fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001200:	675a      	str	r2, [r3, #116]	@ 0x74

	(void)xTraceISRGetCurrentNesting(&ISR_nesting);
 8001202:	4b20      	ldr	r3, [pc, #128]	@ (8001284 <xTraceEventBeginRawOffline+0xcc>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	60fb      	str	r3, [r7, #12]

	/* We add 1 since xTraceISRGetCurrentNesting(...) returns -1 if no ISR is active */
	pxEventData = &pxCoreEventData->eventData[ISR_nesting + 1];
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	1c5a      	adds	r2, r3, #1
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	6a3a      	ldr	r2, [r7, #32]
 8001218:	4413      	add	r3, r2
 800121a:	61fb      	str	r3, [r7, #28]

	/* This should never fail */
	TRC_ASSERT_CUSTOM_ON_FAIL(pxEventData->pvBlob == 0, TRACE_EXIT_CRITICAL_SECTION(); return TRC_FAIL; );

	VERIFY_EVENT_SIZE(uiSize); /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b40      	cmp	r3, #64	@ 0x40
 8001220:	d907      	bls.n	8001232 <xTraceEventBeginRawOffline+0x7a>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3b40      	subs	r3, #64	@ 0x40
 8001226:	4619      	mov	r1, r3
 8001228:	2002      	movs	r0, #2
 800122a:	f7ff fa69 	bl	8000700 <xTraceDiagnosticsSetIfHigher>
 800122e:	2340      	movs	r3, #64	@ 0x40
 8001230:	607b      	str	r3, [r7, #4]

	pxEventData->size = ((uiSize + (sizeof(TraceUnsignedBaseType_t) - 1u)) / sizeof(TraceUnsignedBaseType_t)) * sizeof(TraceUnsignedBaseType_t);	/* BaseType align */
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3303      	adds	r3, #3
 8001236:	f023 0203 	bic.w	r2, r3, #3
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	605a      	str	r2, [r3, #4]

	pxEventData->offset = 0u;
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]

	/* This can fail and we should handle it */
	if (xTraceStreamPortAllocate(pxEventData->size, &pxEventData->pvBlob) == TRC_FAIL)
 8001244:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <xTraceEventBeginRawOffline+0xd0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6818      	ldr	r0, [r3, #0]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	69fa      	ldr	r2, [r7, #28]
 8001250:	4619      	mov	r1, r3
 8001252:	f000 f8d3 	bl	80013fc <xTraceEventBufferAlloc>
 8001256:	4603      	mov	r3, r0
 8001258:	2b01      	cmp	r3, #1
 800125a:	d107      	bne.n	800126c <xTraceEventBeginRawOffline+0xb4>
 800125c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	f383 8810 	msr	PRIMASK, r3
}
 8001266:	bf00      	nop
	{
		TRACE_EXIT_CRITICAL_SECTION();
		return TRC_FAIL;
 8001268:	2301      	movs	r3, #1
 800126a:	e003      	b.n	8001274 <xTraceEventBeginRawOffline+0xbc>
	}

	*pxEventHandle = (TraceEventHandle_t)pxEventData;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	69fa      	ldr	r2, [r7, #28]
 8001270:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3728      	adds	r7, #40	@ 0x28
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20001eec 	.word	0x20001eec
 8001280:	20000098 	.word	0x20000098
 8001284:	200000a0 	.word	0x200000a0
 8001288:	20000080 	.word	0x20000080

0800128c <xTraceEventEndOffline>:

	return TRC_SUCCESS;
}

traceResult xTraceEventEndOffline(TraceEventHandle_t xEventHandle)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	TraceEventData_t* pxEventData = (TraceEventData_t*)xEventHandle;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	61fb      	str	r3, [r7, #28]
	const TraceCoreEventData_t* pxCoreEventData;
	int32_t iBytesCommitted = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]

	TRACE_ALLOC_CRITICAL_SECTION()

	pxCoreEventData = &pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()];
 800129c:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <xTraceEventEndOffline+0x5c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	61bb      	str	r3, [r7, #24]

	/* We restore the CORE specific variable to the local variable before any EXIT */
	TRACE_ALLOC_CRITICAL_SECTION_NAME = pxCoreEventData->TRACE_ALLOC_CRITICAL_SECTION_NAME;
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012a6:	617b      	str	r3, [r7, #20]
	TRC_ASSERT_CUSTOM_ON_FAIL(pxEventData != (void*)0, TRACE_EXIT_CRITICAL_SECTION(); return TRC_FAIL; );

	/* This should never fail */
	TRC_ASSERT_CUSTOM_ON_FAIL(pxEventData->pvBlob != (void*)0, TRACE_EXIT_CRITICAL_SECTION(); return TRC_FAIL; );

	(void)xTraceStreamPortCommit(pxEventData->pvBlob, pxEventData->size, &iBytesCommitted);
 80012a8:	4b10      	ldr	r3, [pc, #64]	@ (80012ec <xTraceEventEndOffline+0x60>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6818      	ldr	r0, [r3, #0]
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	6819      	ldr	r1, [r3, #0]
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	f000 f9b7 	bl	800162c <xTraceEventBufferAllocCommit>

	/* We need to use iBytesCommitted for the above call but do not use the value,
	 * remove potential warnings */
	(void)iBytesCommitted;

	RESET_EVENT_DATA(pxEventData);
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	2200      	movs	r2, #0
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	f383 8810 	msr	PRIMASK, r3
}
 80012da:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return TRC_SUCCESS;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000098 	.word	0x20000098
 80012ec:	20000080 	.word	0x20000080

080012f0 <xTraceEventAddData>:

	return TRC_SUCCESS;
}

traceResult xTraceEventAddData(TraceEventHandle_t xEventHandle, const TraceUnsignedBaseType_t* const puxData, TraceUnsignedBaseType_t uxSize)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
	TraceEventData_t* pxEventData = (TraceEventData_t*)xEventHandle;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	617b      	str	r3, [r7, #20]
	TRC_ASSERT(puxData != (void*)0);

	/* This should never fail */
	TRC_ASSERT((((TraceEventData_t*)xEventHandle)->offset + (uint32_t)(uxSize * sizeof(TraceUnsignedBaseType_t))) <= ((TraceEventData_t*)xEventHandle)->size);

	memcpy(&((uint8_t*)pxEventData->pvBlob)[pxEventData->offset], puxData, uxSize * sizeof(TraceUnsignedBaseType_t));
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	18d0      	adds	r0, r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	461a      	mov	r2, r3
 8001310:	68b9      	ldr	r1, [r7, #8]
 8001312:	f00a fefb 	bl	800c10c <memcpy>
	pxEventData->offset += uxSize * sizeof(TraceUnsignedBaseType_t);
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	441a      	add	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	609a      	str	r2, [r3, #8]

	return TRC_SUCCESS;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <xTraceEventBufferInitialize>:

#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

traceResult xTraceEventBufferInitialize(TraceEventBuffer_t* pxTraceEventBuffer, uint32_t uiOptions,
	uint8_t* puiBuffer, uint32_t uiSize)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
 800133c:	603b      	str	r3, [r7, #0]
	TRC_ASSERT(puiBuffer != (void*)0);

	/* This should never fail */
	TRC_ASSERT(uiSize != 0u);

	pxTraceEventBuffer->uiOptions = uiOptions;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	68ba      	ldr	r2, [r7, #8]
 8001342:	60da      	str	r2, [r3, #12]
	pxTraceEventBuffer->uiHead = 0u;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
	pxTraceEventBuffer->uiTail = 0u;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2200      	movs	r2, #0
 800134e:	605a      	str	r2, [r3, #4]
	pxTraceEventBuffer->uiSize = uiSize;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	609a      	str	r2, [r3, #8]
	pxTraceEventBuffer->uiFree = uiSize;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	615a      	str	r2, [r3, #20]
	pxTraceEventBuffer->puiBuffer = puiBuffer;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	629a      	str	r2, [r3, #40]	@ 0x28
	pxTraceEventBuffer->uiSlack = 0u;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
	pxTraceEventBuffer->uiNextHead = 0u;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]
	pxTraceEventBuffer->uiTimerWraparounds = 0u;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2200      	movs	r2, #0
 8001372:	621a      	str	r2, [r3, #32]

	(void)xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EVENT_BUFFER);
 8001374:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <xTraceEventBufferInitialize+0x60>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800137c:	4a04      	ldr	r2, [pc, #16]	@ (8001390 <xTraceEventBufferInitialize+0x60>)
 800137e:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20001eec 	.word	0x20001eec

08001394 <prvTraceEventBufferAllocPop>:

	return TRC_SUCCESS;
}

static traceResult prvTraceEventBufferAllocPop(TraceEventBuffer_t *pxTraceEventBuffer)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	uint32_t uiFreeSize = 0u;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]

	/* Check if tail is in, or at the start of the slack area. We do not want to call
	 * a free when in the slack area since it would read garbage data and free would
	 * become undefined.
	 */
	if (pxTraceEventBuffer->uiTail >= (pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiSlack))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6899      	ldr	r1, [r3, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	1acb      	subs	r3, r1, r3
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d303      	bcc.n	80013ba <prvTraceEventBufferAllocPop+0x26>
	{
		/* Tail was in the slack area, wrap back to the start of the buffer. */
		pxTraceEventBuffer->uiTail = 0u;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	e019      	b.n	80013ee <prvTraceEventBufferAllocPop+0x5a>
	}
	else
	{
		/* Get size of event we are freeing (this should never fail) */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEventGetSize(((void*)&(pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiTail])), &uiFreeSize) == TRC_SUCCESS); /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	4413      	add	r3, r2
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	0b1b      	lsrs	r3, r3, #12
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	3302      	adds	r3, #2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	60fb      	str	r3, [r7, #12]

		/* Update tail to point to the new last event */
		pxTraceEventBuffer->uiTail = (pxTraceEventBuffer->uiTail + uiFreeSize) % pxTraceEventBuffer->uiSize;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4413      	add	r3, r2
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6892      	ldr	r2, [r2, #8]
 80013e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80013e4:	fb01 f202 	mul.w	r2, r1, r2
 80013e8:	1a9a      	subs	r2, r3, r2
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	605a      	str	r2, [r3, #4]
	}

	return TRC_SUCCESS;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <xTraceEventBufferAlloc>:

traceResult xTraceEventBufferAlloc(TraceEventBuffer_t *pxTraceEventBuffer, uint32_t uiSize, void **ppvData)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
	TRC_ASSERT(pxTraceEventBuffer != (void*)0);
	
	/* This should never fail */
	TRC_ASSERT(ppvData != (void*)0);

	uiBufferSize = pxTraceEventBuffer->uiSize;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	61fb      	str	r3, [r7, #28]

	/* Handle overwrite buffer allocation, since this kind of allocation modifies
	 * both head and tail it should only be used for internal buffers without any
	 * flushing calls (Streaming Ringbuffer)
	 */
	if (pxTraceEventBuffer->uiOptions == TRC_EVENT_BUFFER_OPTION_OVERWRITE)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	2b01      	cmp	r3, #1
 8001414:	f040 8093 	bne.w	800153e <xTraceEventBufferAlloc+0x142>
	{
		if (pxTraceEventBuffer->uiHead >= pxTraceEventBuffer->uiTail)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	429a      	cmp	r2, r3
 8001422:	d341      	bcc.n	80014a8 <xTraceEventBufferAlloc+0xac>
		{
			/* Do we have enough space to directly allocate from the buffer? */
			if ((uiBufferSize - pxTraceEventBuffer->uiHead) > uiSize)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	69fa      	ldr	r2, [r7, #28]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	68ba      	ldr	r2, [r7, #8]
 800142e:	429a      	cmp	r2, r3
 8001430:	d214      	bcs.n	800145c <xTraceEventBufferAlloc+0x60>
			{
				*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	441a      	add	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	601a      	str	r2, [r3, #0]
				pxTraceEventBuffer->uiNextHead = (pxTraceEventBuffer->uiHead  + uiSize) % uiBufferSize;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	4413      	add	r3, r2
 8001448:	69fa      	ldr	r2, [r7, #28]
 800144a:	fbb3 f2f2 	udiv	r2, r3, r2
 800144e:	69f9      	ldr	r1, [r7, #28]
 8001450:	fb01 f202 	mul.w	r2, r1, r2
 8001454:	1a9a      	subs	r2, r3, r2
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	61da      	str	r2, [r3, #28]
 800145a:	e0e2      	b.n	8001622 <xTraceEventBufferAlloc+0x226>
			{
				/* Free space until there is enough space for a contiguous
				 * allocation */
				do
				{
					(void)prvTraceEventBufferAllocPop(pxTraceEventBuffer);
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f7ff ff99 	bl	8001394 <prvTraceEventBufferAllocPop>
					uiFreeSpace = pxTraceEventBuffer->uiTail - sizeof(uint32_t);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	3b04      	subs	r3, #4
 8001468:	613b      	str	r3, [r7, #16]
				} while (uiFreeSpace < uiSize);
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	429a      	cmp	r2, r3
 8001470:	d3f4      	bcc.n	800145c <xTraceEventBufferAlloc+0x60>

				/* Calculate slack from the wrapping */
				pxTraceEventBuffer->uiSlack = uiBufferSize - pxTraceEventBuffer->uiHead;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	1ad2      	subs	r2, r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	619a      	str	r2, [r3, #24]

				/* Wrap head */
				pxTraceEventBuffer->uiHead = 0u;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]

				/* Allocate data */
				*ppvData = pxTraceEventBuffer->puiBuffer;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	601a      	str	r2, [r3, #0]

				pxTraceEventBuffer->uiNextHead = (pxTraceEventBuffer->uiHead  + uiSize) % uiBufferSize;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	4413      	add	r3, r2
 8001494:	69fa      	ldr	r2, [r7, #28]
 8001496:	fbb3 f2f2 	udiv	r2, r3, r2
 800149a:	69f9      	ldr	r1, [r7, #28]
 800149c:	fb01 f202 	mul.w	r2, r1, r2
 80014a0:	1a9a      	subs	r2, r3, r2
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	61da      	str	r2, [r3, #28]
 80014a6:	e0bc      	b.n	8001622 <xTraceEventBufferAlloc+0x226>
			}
		}
		else
		{
			uiFreeSpace = pxTraceEventBuffer->uiTail - pxTraceEventBuffer->uiHead - sizeof(uint32_t);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	3b04      	subs	r3, #4
 80014b4:	613b      	str	r3, [r7, #16]

			/* Check if we have to free space */
			if (uiFreeSpace < uiSize)
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d231      	bcs.n	8001522 <xTraceEventBufferAlloc+0x126>
			{
				/* Check if this is a wrapping alloc */
				if ((pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiHead) < uiSize)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d910      	bls.n	80014f0 <xTraceEventBufferAlloc+0xf4>
					/* To avoid uiHead and uiTail from becoming the same we want to
					 * pop any events that would make uiTail equal uiHead before
					 * wrapping the head. */
					do
					{
						(void)prvTraceEventBufferAllocPop(pxTraceEventBuffer);
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f7ff ff60 	bl	8001394 <prvTraceEventBufferAllocPop>
					} while (pxTraceEventBuffer->uiTail == 0u);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f8      	beq.n	80014ce <xTraceEventBufferAlloc+0xd2>

					pxTraceEventBuffer->uiSlack = pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiHead;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	1ad2      	subs	r2, r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	619a      	str	r2, [r3, #24]
					pxTraceEventBuffer->uiHead = 0u;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
				}
				
				do
				{
					(void)prvTraceEventBufferAllocPop(pxTraceEventBuffer);
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f7ff ff4f 	bl	8001394 <prvTraceEventBufferAllocPop>
					uiFreeSpace = pxTraceEventBuffer->uiTail - pxTraceEventBuffer->uiHead - sizeof(uint32_t);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	3b04      	subs	r3, #4
 8001502:	613b      	str	r3, [r7, #16]
				} while (uiFreeSpace < uiSize);
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	429a      	cmp	r2, r3
 800150a:	d3f1      	bcc.n	80014f0 <xTraceEventBufferAlloc+0xf4>

				if (pxTraceEventBuffer->uiTail == 0u)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d106      	bne.n	8001522 <xTraceEventBufferAlloc+0x126>
				{
					*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	441a      	add	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	601a      	str	r2, [r3, #0]
				}
			}

			/* Alloc data */
			*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	441a      	add	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	601a      	str	r2, [r3, #0]

			pxTraceEventBuffer->uiNextHead = (pxTraceEventBuffer->uiHead + uiSize);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	441a      	add	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	61da      	str	r2, [r3, #28]
 800153c:	e071      	b.n	8001622 <xTraceEventBufferAlloc+0x226>
	else
	{
		/* Since a consumer could potentially update tail (free) during the procedure
		 * we have to save it here to avoid problems with it changing during this call.
		 */
		uiHead = pxTraceEventBuffer->uiHead;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	61bb      	str	r3, [r7, #24]
		uiTail = pxTraceEventBuffer->uiTail;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	617b      	str	r3, [r7, #20]

		if (uiHead >= uiTail)
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	429a      	cmp	r2, r3
 8001550:	d34d      	bcc.n	80015ee <xTraceEventBufferAlloc+0x1f2>
		{
			uiFreeSpace = (uiBufferSize - uiHead - sizeof(uint32_t)) + uiTail;
 8001552:	69fa      	ldr	r2, [r7, #28]
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	1ad2      	subs	r2, r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	4413      	add	r3, r2
 800155c:	3b04      	subs	r3, #4
 800155e:	613b      	str	r3, [r7, #16]

			if (uiFreeSpace < uiSize)
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	429a      	cmp	r2, r3
 8001566:	d204      	bcs.n	8001572 <xTraceEventBufferAlloc+0x176>
			{
				*ppvData = 0;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]

				return TRC_FAIL;
 800156e:	2301      	movs	r3, #1
 8001570:	e058      	b.n	8001624 <xTraceEventBufferAlloc+0x228>
			}

			/* Copy data */
			if ((uiBufferSize - uiHead) > uiSize)
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	68ba      	ldr	r2, [r7, #8]
 800157a:	429a      	cmp	r2, r3
 800157c:	d213      	bcs.n	80015a6 <xTraceEventBufferAlloc+0x1aa>
			{
				*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	441a      	add	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	601a      	str	r2, [r3, #0]

				pxTraceEventBuffer->uiNextHead = (uiHead + uiSize) % uiBufferSize;
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	4413      	add	r3, r2
 8001592:	69fa      	ldr	r2, [r7, #28]
 8001594:	fbb3 f2f2 	udiv	r2, r3, r2
 8001598:	69f9      	ldr	r1, [r7, #28]
 800159a:	fb01 f202 	mul.w	r2, r1, r2
 800159e:	1a9a      	subs	r2, r3, r2
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	61da      	str	r2, [r3, #28]
 80015a4:	e03d      	b.n	8001622 <xTraceEventBufferAlloc+0x226>
			}
			else
			{
				uiFreeSpace = uiTail;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	613b      	str	r3, [r7, #16]

				if (uiFreeSpace < uiSize)
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d204      	bcs.n	80015bc <xTraceEventBufferAlloc+0x1c0>
				{
					*ppvData = 0;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]

					return TRC_FAIL;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e033      	b.n	8001624 <xTraceEventBufferAlloc+0x228>
				}

				/* Calculate slack */
				pxTraceEventBuffer->uiSlack = uiBufferSize - uiHead;
 80015bc:	69fa      	ldr	r2, [r7, #28]
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	1ad2      	subs	r2, r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	619a      	str	r2, [r3, #24]

				*ppvData = pxTraceEventBuffer->puiBuffer;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	601a      	str	r2, [r3, #0]

				pxTraceEventBuffer->uiNextHead = (uiHead + pxTraceEventBuffer->uiSlack + uiSize) % uiBufferSize;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	699a      	ldr	r2, [r3, #24]
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	441a      	add	r2, r3
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	4413      	add	r3, r2
 80015da:	69fa      	ldr	r2, [r7, #28]
 80015dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80015e0:	69f9      	ldr	r1, [r7, #28]
 80015e2:	fb01 f202 	mul.w	r2, r1, r2
 80015e6:	1a9a      	subs	r2, r3, r2
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	61da      	str	r2, [r3, #28]
 80015ec:	e019      	b.n	8001622 <xTraceEventBufferAlloc+0x226>
			}
		}
		else
		{
			uiFreeSpace = uiTail - uiHead - sizeof(uint32_t);
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	3b04      	subs	r3, #4
 80015f6:	613b      	str	r3, [r7, #16]

			if (uiFreeSpace < uiSize)
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d204      	bcs.n	800160a <xTraceEventBufferAlloc+0x20e>
			{
				*ppvData = 0;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]

				return TRC_FAIL;
 8001606:	2301      	movs	r3, #1
 8001608:	e00c      	b.n	8001624 <xTraceEventBufferAlloc+0x228>
			}

			/* Alloc data */
			*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	441a      	add	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	601a      	str	r2, [r3, #0]

			pxTraceEventBuffer->uiNextHead = (uiHead + uiSize);
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	441a      	add	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	61da      	str	r2, [r3, #28]
		}
	}

	return TRC_SUCCESS;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3720      	adds	r7, #32
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <xTraceEventBufferAllocCommit>:

traceResult xTraceEventBufferAllocCommit(TraceEventBuffer_t *pxTraceEventBuffer, const void *pvData, uint32_t uiSize, int32_t *piBytesWritten)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	603b      	str	r3, [r7, #0]
	(void)pvData;

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceTimestampGetWraparounds(&pxTraceEventBuffer->uiTimerWraparounds) == TRC_SUCCESS);
 800163a:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <xTraceEventBufferAllocCommit+0x34>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68da      	ldr	r2, [r3, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	621a      	str	r2, [r3, #32]

	/* Advance head location */
	pxTraceEventBuffer->uiHead = pxTraceEventBuffer->uiNextHead;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	69da      	ldr	r2, [r3, #28]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	601a      	str	r2, [r3, #0]

	/* Update bytes written */
	*piBytesWritten = (int32_t)uiSize;
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	20001ef4 	.word	0x20001ef4

08001664 <xTraceEventBufferClear>:

	return TRC_SUCCESS;
}

traceResult xTraceEventBufferClear(TraceEventBuffer_t* pxTraceEventBuffer)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxTraceEventBuffer != (void*)0);

	pxTraceEventBuffer->uiHead = 0u;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
	pxTraceEventBuffer->uiTail = 0u;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	605a      	str	r2, [r3, #4]
	pxTraceEventBuffer->uiFree = pxTraceEventBuffer->uiSize;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	615a      	str	r2, [r3, #20]
	pxTraceEventBuffer->uiSlack = 0u;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
	pxTraceEventBuffer->uiNextHead = 0u;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	61da      	str	r2, [r3, #28]

	return TRC_SUCCESS;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <xTraceExtensionInitialize>:
		)

static TraceExtensionData_t *pxExtensionData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceExtensionInitialize(TraceExtensionData_t* const pxBuffer)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);
	
	pxExtensionData = pxBuffer;
 80016a4:	4a09      	ldr	r2, [pc, #36]	@ (80016cc <xTraceExtensionInitialize+0x30>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
	
	pxExtensionData->uxNextFreeExtensionEventId = TRC_EXTENSION_BASE_EVENT_ID;
 80016aa:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <xTraceExtensionInitialize+0x30>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	22fd      	movs	r2, #253	@ 0xfd
 80016b0:	601a      	str	r2, [r3, #0]
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EXTENSION);
 80016b2:	4b07      	ldr	r3, [pc, #28]	@ (80016d0 <xTraceExtensionInitialize+0x34>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ba:	4a05      	ldr	r2, [pc, #20]	@ (80016d0 <xTraceExtensionInitialize+0x34>)
 80016bc:	6013      	str	r3, [r2, #0]
	
	return TRC_SUCCESS;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	2000009c 	.word	0x2000009c
 80016d0:	20001eec 	.word	0x20001eec

080016d4 <xTraceHardwarePortInitCortexM>:
#if (((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) || (TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M_NRF_SD)) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK

void xTraceHardwarePortInitCortexM(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	/* Make sure the DWT registers are unlocked, in case the debugger doesn't do this. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 80016d8:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <xTraceHardwarePortInitCortexM+0x54>)
 80016da:	4a14      	ldr	r2, [pc, #80]	@ (800172c <xTraceHardwarePortInitCortexM+0x58>)
 80016dc:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 80016de:	4b14      	ldr	r3, [pc, #80]	@ (8001730 <xTraceHardwarePortInitCortexM+0x5c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a13      	ldr	r2, [pc, #76]	@ (8001730 <xTraceHardwarePortInitCortexM+0x5c>)
 80016e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016e8:	6013      	str	r3, [r2, #0]

	do
	{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 80016ea:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <xTraceHardwarePortInitCortexM+0x5c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d103      	bne.n	80016fa <xTraceHardwarePortInitCortexM+0x26>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			xTraceError(TRC_ERROR_DWT_NOT_SUPPORTED);
 80016f2:	2004      	movs	r0, #4
 80016f4:	f7ff fa70 	bl	8000bd8 <xTraceError>
			break;
 80016f8:	e013      	b.n	8001722 <xTraceHardwarePortInitCortexM+0x4e>
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 80016fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001734 <xTraceHardwarePortInitCortexM+0x60>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <xTraceHardwarePortInitCortexM+0x3a>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			xTraceError(TRC_ERROR_DWT_CYCCNT_NOT_SUPPORTED);
 8001706:	2005      	movs	r0, #5
 8001708:	f7ff fa66 	bl	8000bd8 <xTraceError>
			break;
 800170c:	e009      	b.n	8001722 <xTraceHardwarePortInitCortexM+0x4e>
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 800170e:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <xTraceHardwarePortInitCortexM+0x64>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 8001714:	4b07      	ldr	r3, [pc, #28]	@ (8001734 <xTraceHardwarePortInitCortexM+0x60>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a06      	ldr	r2, [pc, #24]	@ (8001734 <xTraceHardwarePortInitCortexM+0x60>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6013      	str	r3, [r2, #0]

	} while (0);	/* breaks above jump here */
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	e0001fb0 	.word	0xe0001fb0
 800172c:	c5acce55 	.word	0xc5acce55
 8001730:	e000edfc 	.word	0xe000edfc
 8001734:	e0001000 	.word	0xe0001000
 8001738:	e0001004 	.word	0xe0001004

0800173c <xTraceHeapCreate>:

#if (TRC_USE_HEAPS == 1)

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceHeapCreate(const char *szName, TraceUnsignedBaseType_t uxCurrent, TraceUnsignedBaseType_t uxHighWaterMark, TraceUnsignedBaseType_t uxMax, TraceHeapHandle_t *pxHeapHandle)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08c      	sub	sp, #48	@ 0x30
 8001740:	af04      	add	r7, sp, #16
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
 8001748:	603b      	str	r3, [r7, #0]
	TraceUnsignedBaseType_t uxStates[3];

	uxStates[TRC_HEAP_STATE_INDEX_CURRENT] = uxCurrent;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	617b      	str	r3, [r7, #20]
	uxStates[TRC_HEAP_STATE_INDEX_HIGHWATERMARK] = uxHighWaterMark;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	61bb      	str	r3, [r7, #24]
	uxStates[TRC_HEAP_STATE_INDEX_MAX] = uxMax;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	61fb      	str	r3, [r7, #28]

	return xTraceObjectRegisterInternal(PSF_EVENT_HEAP_CREATE, (void*)0, szName, 3u, uxStates, TRC_ENTRY_OPTION_HEAP, (TraceObjectHandle_t*)pxHeapHandle);
 8001756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001758:	9302      	str	r3, [sp, #8]
 800175a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2303      	movs	r3, #3
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	2100      	movs	r1, #0
 800176c:	20f2      	movs	r0, #242	@ 0xf2
 800176e:	f000 f97d 	bl	8001a6c <xTraceObjectRegisterInternal>
 8001772:	4603      	mov	r3, r0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3720      	adds	r7, #32
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <xTraceHeapAlloc>:

traceResult xTraceHeapAlloc(TraceHeapHandle_t xHeapHandle, void *pvAddress, TraceUnsignedBaseType_t uxSize)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
	TraceUnsignedBaseType_t uxCurrent, uxHighWaterMark;
	
	if (xHeapHandle == 0)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <xTraceHeapAlloc+0x16>
	{
		/* This can happen */
		return TRC_FAIL;
 800178e:	2301      	movs	r3, #1
 8001790:	e024      	b.n	80017dc <xTraceHeapAlloc+0x60>
	}

	/* If the address is null we assume this was a failed alloc attempt */
	if (pvAddress != (void*)0)
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d015      	beq.n	80017c4 <xTraceHeapAlloc+0x48>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, &uxCurrent) == TRC_SUCCESS);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	617b      	str	r3, [r7, #20]

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_HIGHWATERMARK, &uxHighWaterMark) == TRC_SUCCESS);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	613b      	str	r3, [r7, #16]

		uxCurrent += uxSize;
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	617b      	str	r3, [r7, #20]

		if (uxCurrent > uxHighWaterMark)
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d904      	bls.n	80017be <xTraceHeapAlloc+0x42>
		{
			uxHighWaterMark = uxCurrent;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	613b      	str	r3, [r7, #16]
			/* This should never fail */
			TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_HIGHWATERMARK, uxHighWaterMark) == TRC_SUCCESS);
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	609a      	str	r2, [r3, #8]
		}

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, uxCurrent) == TRC_SUCCESS);
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	605a      	str	r2, [r3, #4]
	}

	(void)xTraceEventCreate2((pvAddress != (void*)0) ? PSF_EVENT_MALLOC : PSF_EVENT_MALLOC_FAILED, (TraceUnsignedBaseType_t)pvAddress, uxSize);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <xTraceHeapAlloc+0x52>
 80017ca:	2338      	movs	r3, #56	@ 0x38
 80017cc:	e000      	b.n	80017d0 <xTraceHeapAlloc+0x54>
 80017ce:	23e9      	movs	r3, #233	@ 0xe9
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fbe3 	bl	8000fa0 <xTraceEventCreate2>

	return TRC_SUCCESS;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <xTraceHeapFree>:

traceResult xTraceHeapFree(TraceHeapHandle_t xHeapHandle, void *pvAddress, TraceUnsignedBaseType_t uxSize)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
	TraceUnsignedBaseType_t uxCurrent;

	if (xHeapHandle == 0)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <xTraceHeapFree+0x16>
	{
		/* This can happen */
		return TRC_FAIL;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e018      	b.n	800182c <xTraceHeapFree+0x48>
	}

	/* If the address is null we assume this was a failed alloc attempt */
	if (pvAddress != (void*)0)
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d009      	beq.n	8001814 <xTraceHeapFree+0x30>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, &uxCurrent) == TRC_SUCCESS);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	617b      	str	r3, [r7, #20]

		uxCurrent -= uxSize;
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	617b      	str	r3, [r7, #20]

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, uxCurrent) == TRC_SUCCESS);
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	605a      	str	r2, [r3, #4]
	}

	(void)xTraceEventCreate2((pvAddress != (void*)0) ? PSF_EVENT_FREE : PSF_EVENT_FREE_FAILED, (TraceUnsignedBaseType_t)pvAddress, uxSize);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <xTraceHeapFree+0x3a>
 800181a:	2339      	movs	r3, #57	@ 0x39
 800181c:	e000      	b.n	8001820 <xTraceHeapFree+0x3c>
 800181e:	23ea      	movs	r3, #234	@ 0xea
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fbbb 	bl	8000fa0 <xTraceEventCreate2>

	return TRC_SUCCESS;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <xTraceISRInitialize>:
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceISRData_t* pxTraceISRData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceISRInitialize(TraceISRData_t *pxBuffer)
{
 8001834:	b480      	push	{r7}
 8001836:	b087      	sub	sp, #28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	uint32_t uiStackIndex;

	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceISRData = pxBuffer;
 800183c:	4a1b      	ldr	r2, [pc, #108]	@ (80018ac <xTraceISRInitialize+0x78>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6013      	str	r3, [r2, #0]

	for (uiCoreIndex = 0u; uiCoreIndex < (uint32_t)(TRC_CFG_CORE_COUNT); uiCoreIndex++)
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	e020      	b.n	800188a <xTraceISRInitialize+0x56>
	{
		TraceISRCoreData_t* pxCoreData = &pxTraceISRData->cores[uiCoreIndex];
 8001848:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <xTraceISRInitialize+0x78>)
 800184a:	6819      	ldr	r1, [r3, #0]
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	440b      	add	r3, r1
 8001858:	60fb      	str	r3, [r7, #12]

		/* Initialize ISR stack */
		for (uiStackIndex = 0u; uiStackIndex < (uint32_t)(TRC_CFG_MAX_ISR_NESTING); uiStackIndex++)
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	e007      	b.n	8001870 <xTraceISRInitialize+0x3c>
		{
			pxCoreData->handleStack[uiStackIndex] = 0;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	2100      	movs	r1, #0
 8001866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (uiStackIndex = 0u; uiStackIndex < (uint32_t)(TRC_CFG_MAX_ISR_NESTING); uiStackIndex++)
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	3301      	adds	r3, #1
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	2b07      	cmp	r3, #7
 8001874:	d9f4      	bls.n	8001860 <xTraceISRInitialize+0x2c>
		}
		
		pxCoreData->stackIndex = -1;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f04f 32ff 	mov.w	r2, #4294967295
 800187c:	621a      	str	r2, [r3, #32]
		pxCoreData->isPendingContextSwitch = 0u;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	625a      	str	r2, [r3, #36]	@ 0x24
	for (uiCoreIndex = 0u; uiCoreIndex < (uint32_t)(TRC_CFG_CORE_COUNT); uiCoreIndex++)
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	3301      	adds	r3, #1
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0db      	beq.n	8001848 <xTraceISRInitialize+0x14>
	}
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ISR);
 8001890:	4b07      	ldr	r3, [pc, #28]	@ (80018b0 <xTraceISRInitialize+0x7c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001898:	4a05      	ldr	r2, [pc, #20]	@ (80018b0 <xTraceISRInitialize+0x7c>)
 800189a:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	371c      	adds	r7, #28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	200000a0 	.word	0x200000a0
 80018b0:	20001eec 	.word	0x20001eec

080018b4 <xTraceKernelPortGetUnusedStack>:
#endif

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)

traceResult xTraceKernelPortGetUnusedStack(void* pvTask, TraceUnsignedBaseType_t* puxUnusedStack)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
	*puxUnusedStack = uxTaskGetStackHighWaterMark(pvTask);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f009 f9ca 	bl	800ac58 <uxTaskGetStackHighWaterMark>
 80018c4:	4602      	mov	r2, r0
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <xTraceKernelPortInitialize>:
static TraceKernelPortData_t* pxKernelPortData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

#define TRC_PORT_MALLOC(size) pvPortMalloc(size)

traceResult xTraceKernelPortInitialize(TraceKernelPortDataBuffer_t* pxBuffer)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	TRC_ASSERT_EQUAL_SIZE(TraceKernelPortDataBuffer_t, TraceKernelPortData_t);
	
	if (pxBuffer == 0)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <xTraceKernelPortInitialize+0x12>
	{
		return TRC_FAIL;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e00b      	b.n	80018fe <xTraceKernelPortInitialize+0x2a>
	}
	
	pxKernelPortData = (TraceKernelPortData_t*)pxBuffer;
 80018e6:	4a09      	ldr	r2, [pc, #36]	@ (800190c <xTraceKernelPortInitialize+0x38>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6013      	str	r3, [r2, #0]

	pxKernelPortData->xSystemHeapHandle = 0;
 80018ec:	4b07      	ldr	r3, [pc, #28]	@ (800190c <xTraceKernelPortInitialize+0x38>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
	pxKernelPortData->xTzCtrlHandle = 0;
 80018f4:	4b05      	ldr	r3, [pc, #20]	@ (800190c <xTraceKernelPortInitialize+0x38>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2200      	movs	r2, #0
 80018fa:	605a      	str	r2, [r3, #4]
	
	return TRC_SUCCESS;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	2000114c 	.word	0x2000114c

08001910 <xTraceKernelPortEnable>:

traceResult xTraceKernelPortEnable(void)
{
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b085      	sub	sp, #20
 8001914:	af04      	add	r7, sp, #16
		xTraceEntrySetOptions(xIdleHandle, TRC_ENTRY_OPTION_IDLE_NAME);
	}
#endif
	
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
	if (pxKernelPortData->xSystemHeapHandle == 0)
 8001916:	4b1a      	ldr	r3, [pc, #104]	@ (8001980 <xTraceKernelPortEnable+0x70>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d109      	bne.n	8001934 <xTraceKernelPortEnable+0x24>
	{
#if defined(configTOTAL_HEAP_SIZE)
		xTraceHeapCreate("System Heap", 0, 0, configTOTAL_HEAP_SIZE, &pxKernelPortData->xSystemHeapHandle);
 8001920:	4b17      	ldr	r3, [pc, #92]	@ (8001980 <xTraceKernelPortEnable+0x70>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800192a:	2200      	movs	r2, #0
 800192c:	2100      	movs	r1, #0
 800192e:	4815      	ldr	r0, [pc, #84]	@ (8001984 <xTraceKernelPortEnable+0x74>)
 8001930:	f7ff ff04 	bl	800173c <xTraceHeapCreate>
		xTraceHeapCreate("System Heap", 0, 0, (TRC_CFG_TOTAL_HEAP_SIZE), &pxKernelPortData->xSystemHeapHandle);
#endif
	}
#endif
	
	if (pxKernelPortData->xTzCtrlHandle == 0)
 8001934:	4b12      	ldr	r3, [pc, #72]	@ (8001980 <xTraceKernelPortEnable+0x70>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d11a      	bne.n	8001974 <xTraceKernelPortEnable+0x64>
	{
		/* Creates the TzCtrl task - receives trace commands (start, stop, ...) */
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		pxKernelPortData->xTzCtrlHandle = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, 0, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
 800193e:	4b10      	ldr	r3, [pc, #64]	@ (8001980 <xTraceKernelPortEnable+0x70>)
 8001940:	681c      	ldr	r4, [r3, #0]
 8001942:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <xTraceKernelPortEnable+0x78>)
 8001944:	9302      	str	r3, [sp, #8]
 8001946:	4b11      	ldr	r3, [pc, #68]	@ (800198c <xTraceKernelPortEnable+0x7c>)
 8001948:	9301      	str	r3, [sp, #4]
 800194a:	2301      	movs	r3, #1
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	2300      	movs	r3, #0
 8001950:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001954:	490e      	ldr	r1, [pc, #56]	@ (8001990 <xTraceKernelPortEnable+0x80>)
 8001956:	480f      	ldr	r0, [pc, #60]	@ (8001994 <xTraceKernelPortEnable+0x84>)
 8001958:	f008 fa82 	bl	8009e60 <xTaskCreateStatic>
 800195c:	4603      	mov	r3, r0
 800195e:	6063      	str	r3, [r4, #4]
#else
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, 0, TRC_CFG_CTRL_TASK_PRIORITY, &pxKernelPortData->xTzCtrlHandle);
#endif

		if (pxKernelPortData->xTzCtrlHandle == 0)
 8001960:	4b07      	ldr	r3, [pc, #28]	@ (8001980 <xTraceKernelPortEnable+0x70>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d104      	bne.n	8001974 <xTraceKernelPortEnable+0x64>
		{
			xTraceError(TRC_ERROR_TZCTRLTASK_NOT_CREATED);
 800196a:	2006      	movs	r0, #6
 800196c:	f7ff f934 	bl	8000bd8 <xTraceError>

			return TRC_FAIL;
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <xTraceKernelPortEnable+0x66>
		}
	}
	
	return TRC_SUCCESS;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3704      	adds	r7, #4
 800197a:	46bd      	mov	sp, r7
 800197c:	bd90      	pop	{r4, r7, pc}
 800197e:	bf00      	nop
 8001980:	2000114c 	.word	0x2000114c
 8001984:	0800c3b8 	.word	0x0800c3b8
 8001988:	200010a4 	.word	0x200010a4
 800198c:	200000a4 	.word	0x200000a4
 8001990:	0800c3c4 	.word	0x0800c3c4
 8001994:	08001999 	.word	0x08001999

08001998 <TzCtrl>:

static portTASK_FUNCTION(TzCtrl, pvParameters)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		xTraceTzCtrl();
 80019a0:	f000 ffb2 	bl	8002908 <xTraceTzCtrl>

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
 80019a4:	2032      	movs	r0, #50	@ 0x32
 80019a6:	f008 fcb7 	bl	800a318 <vTaskDelay>
		xTraceTzCtrl();
 80019aa:	bf00      	nop
 80019ac:	e7f8      	b.n	80019a0 <TzCtrl+0x8>
	...

080019b0 <xTraceKernelPortGetSystemHeapHandle>:
#endif

#endif

TraceHeapHandle_t xTraceKernelPortGetSystemHeapHandle(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
	return pxKernelPortData->xSystemHeapHandle;
 80019b4:	4b03      	ldr	r3, [pc, #12]	@ (80019c4 <xTraceKernelPortGetSystemHeapHandle+0x14>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	2000114c 	.word	0x2000114c

080019c8 <xTraceMultiCoreEventBufferInitialize>:

#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

traceResult xTraceMultiCoreEventBufferInitialize(TraceMultiCoreEventBuffer_t* const pxTraceMultiCoreEventBuffer, uint32_t uiOptions,
	uint8_t* puiBuffer, uint32_t uiSize)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	603b      	str	r3, [r7, #0]
	TRC_ASSERT(pxTraceMultiCoreEventBuffer != (void*)0);

	/* This should never fail */
	TRC_ASSERT(puiBuffer != (void*)0);

	uiBufferSizePerCore = ((uiSize / (uint32_t)(TRC_CFG_CORE_COUNT)) / sizeof(TraceUnsignedBaseType_t)) * sizeof(TraceUnsignedBaseType_t); /* BaseType aligned */
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	f023 0303 	bic.w	r3, r3, #3
 80019dc:	613b      	str	r3, [r7, #16]

	/* This should never fail */
	TRC_ASSERT(uiBufferSizePerCore != 0u);

	for (i = 0u; i < (uint32_t)(TRC_CFG_CORE_COUNT); i++)
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	e021      	b.n	8001a28 <xTraceMultiCoreEventBufferInitialize+0x60>
	{
		/* Set the event buffer pointers to point into the allocated space we have been given, this ensures
		 * a flat memory layout necessary for usage in streaming snaphot. */
		pxTraceMultiCoreEventBuffer->xEventBuffer[i] = (TraceEventBuffer_t*)(&puiBuffer[i * uiBufferSizePerCore]); /*cstat !MISRAC2004-11.4 !MISRAC2012-Rule-11.3 Suppress conversion between pointer types checks*/ /*cstat !MISRAC2004-17.4_b We need to access a spcific point in the buffer*/
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	fb02 f303 	mul.w	r3, r2, r3
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	18d1      	adds	r1, r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		/* Initialize the event buffer structure with its memory buffer placed following its own structure data. */
		/* We need to check this */
		if (xTraceEventBufferInitialize(pxTraceMultiCoreEventBuffer->xEventBuffer[i], uiOptions,
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
			&puiBuffer[(i * uiBufferSizePerCore) + sizeof(TraceEventBuffer_t)], /*cstat !MISRAC2004-17.4_b We need to access a specific point in the buffer*/
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	fb02 f303 	mul.w	r3, r2, r3
 8001a08:	332c      	adds	r3, #44	@ 0x2c
		if (xTraceEventBufferInitialize(pxTraceMultiCoreEventBuffer->xEventBuffer[i], uiOptions,
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	441a      	add	r2, r3
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	3b2c      	subs	r3, #44	@ 0x2c
 8001a12:	68b9      	ldr	r1, [r7, #8]
 8001a14:	f7ff fc8c 	bl	8001330 <xTraceEventBufferInitialize>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d101      	bne.n	8001a22 <xTraceMultiCoreEventBufferInitialize+0x5a>
			uiBufferSizePerCore - sizeof(TraceEventBuffer_t)) == TRC_FAIL)
		{
			return TRC_FAIL;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e006      	b.n	8001a30 <xTraceMultiCoreEventBufferInitialize+0x68>
	for (i = 0u; i < (uint32_t)(TRC_CFG_CORE_COUNT); i++)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3301      	adds	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0da      	beq.n	80019e4 <xTraceMultiCoreEventBufferInitialize+0x1c>
		}
	}

	return TRC_SUCCESS;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <xTraceMultiCoreEventBufferClear>:

	return TRC_SUCCESS;
}

traceResult xTraceMultiCoreEventBufferClear(const TraceMultiCoreEventBuffer_t* const pxTraceMultiCoreEventBuffer)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	uint32_t uiCoreId;

	/* This should never fail */
	TRC_ASSERT(pxTraceMultiCoreEventBuffer != (void*)0);

	for (uiCoreId = 0u; uiCoreId < (uint32_t)(TRC_CFG_CORE_COUNT); uiCoreId++)
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	e009      	b.n	8001a5a <xTraceMultiCoreEventBufferClear+0x22>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEventBufferClear(pxTraceMultiCoreEventBuffer->xEventBuffer[uiCoreId]) == TRC_SUCCESS);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fe08 	bl	8001664 <xTraceEventBufferClear>
	for (uiCoreId = 0u; uiCoreId < (uint32_t)(TRC_CFG_CORE_COUNT); uiCoreId++)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	3301      	adds	r3, #1
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f2      	beq.n	8001a46 <xTraceMultiCoreEventBufferClear+0xe>
	}

	return TRC_SUCCESS;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <xTraceObjectRegisterInternal>:

traceResult prvTraceObjectSendNameEvent(void* pvObject, const char* szName, uint32_t uiLength);

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectRegisterInternal(uint32_t uiEventCode, void* const pvObject, const char* szName, TraceUnsignedBaseType_t uxStateCount, const TraceUnsignedBaseType_t uxStates[], TraceUnsignedBaseType_t uxOptions, TraceObjectHandle_t* pxObjectHandle)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08e      	sub	sp, #56	@ 0x38
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	603b      	str	r3, [r7, #0]
	TraceEntryHandle_t xEntryHandle;
	TraceEventHandle_t xEventHandle = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8001a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8001a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
	TRC_ASSERT(pxObjectHandle != (void*)0);

	/* This should never fail */
	TRC_ASSERT(uxStateCount <= (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT));

	TRACE_ENTER_CRITICAL_SECTION();
 8001a86:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a88:	2301      	movs	r3, #1
 8001a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a8e:	f383 8810 	msr	PRIMASK, r3
}
 8001a92:	bf00      	nop

	if (pvObject != (void*)0)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d01a      	beq.n	8001ad0 <xTraceObjectRegisterInternal+0x64>
	{
		/* An address was supplied */
		if (xTraceEntryCreateWithAddress(pvObject, &xEntryHandle) == TRC_FAIL)
 8001a9a:	f107 0318 	add.w	r3, r7, #24
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fef8 	bl	8000894 <xTraceEntryCreate>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d104      	bne.n	8001ab4 <xTraceObjectRegisterInternal+0x48>
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	e000      	b.n	8001ab6 <xTraceObjectRegisterInternal+0x4a>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d007      	beq.n	8001aca <xTraceObjectRegisterInternal+0x5e>
 8001aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac0:	f383 8810 	msr	PRIMASK, r3
}
 8001ac4:	bf00      	nop
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e0cf      	b.n	8001c6a <xTraceObjectRegisterInternal+0x1fe>
		}
		
		pvAddress = pvObject;
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	e012      	b.n	8001af6 <xTraceObjectRegisterInternal+0x8a>
	}
	else
	{
		/* No address was supplied */
		if (xTraceEntryCreate(&xEntryHandle) == TRC_FAIL)
 8001ad0:	f107 0318 	add.w	r3, r7, #24
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fedd 	bl	8000894 <xTraceEntryCreate>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d107      	bne.n	8001af0 <xTraceObjectRegisterInternal+0x84>
 8001ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ae2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	f383 8810 	msr	PRIMASK, r3
}
 8001aea:	bf00      	nop
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0bc      	b.n	8001c6a <xTraceObjectRegisterInternal+0x1fe>
		}

		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress(xEntryHandle, &pvAddress) == TRC_SUCCESS);
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	613b      	str	r3, [r7, #16]
	}

	for (i = 0u; i < uxStateCount; i++)
 8001af6:	2300      	movs	r3, #0
 8001af8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001afa:	e00c      	b.n	8001b16 <xTraceObjectRegisterInternal+0xaa>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xEntryHandle, (uint32_t)i, uxStates[i]) == TRC_SUCCESS);
 8001afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001b02:	4413      	add	r3, r2
 8001b04:	69b9      	ldr	r1, [r7, #24]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	605a      	str	r2, [r3, #4]
	for (i = 0u; i < uxStateCount; i++)
 8001b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b12:	3301      	adds	r3, #1
 8001b14:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d3ee      	bcc.n	8001afc <xTraceObjectRegisterInternal+0x90>
	}

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetOptions(xEntryHandle, (uint32_t)uxOptions) == TRC_SUCCESS);
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	6919      	ldr	r1, [r3, #16]
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001b26:	430a      	orrs	r2, r1
 8001b28:	611a      	str	r2, [r3, #16]

	*pxObjectHandle = (TraceObjectHandle_t)xEntryHandle;
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f383 8810 	msr	PRIMASK, r3
}
 8001b3a:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	if ((szName != (void*)0) && (szName[0] != (char)0)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d008      	beq.n	8001b54 <xTraceObjectRegisterInternal+0xe8>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d004      	beq.n	8001b54 <xTraceObjectRegisterInternal+0xe8>
	{
		/* Not a null or empty string */
		/* This will set the symbol and create an event for it */
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceObjectSetName((TraceObjectHandle_t)xEntryHandle, szName) == TRC_SUCCESS);
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 f8e8 	bl	8001d24 <xTraceObjectSetName>
	}

	/* Send the create event, if possible */
	/*We need to check this */
	if (xTraceEventBegin(uiEventCode, sizeof(void*) + (uxStateCount * sizeof(TraceUnsignedBaseType_t)), &xEventHandle) == TRC_SUCCESS)
 8001b54:	4b47      	ldr	r3, [pc, #284]	@ (8001c74 <xTraceObjectRegisterInternal+0x208>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d047      	beq.n	8001bf0 <xTraceObjectRegisterInternal+0x184>
 8001b60:	4b45      	ldr	r3, [pc, #276]	@ (8001c78 <xTraceObjectRegisterInternal+0x20c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d042      	beq.n	8001bf0 <xTraceObjectRegisterInternal+0x184>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	3303      	adds	r3, #3
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	f107 0214 	add.w	r2, r7, #20
 8001b74:	4611      	mov	r1, r2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fb1e 	bl	80011b8 <xTraceEventBeginRawOffline>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d134      	bne.n	8001bec <xTraceObjectRegisterInternal+0x180>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	b21a      	sxth	r2, r3
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	3b08      	subs	r3, #8
 8001b8c:	089b      	lsrs	r3, r3, #2
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	031b      	lsls	r3, r3, #12
 8001b92:	b21b      	sxth	r3, r3
 8001b94:	4313      	orrs	r3, r2
 8001b96:	b21a      	sxth	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	b292      	uxth	r2, r2
 8001b9e:	801a      	strh	r2, [r3, #0]
 8001ba0:	4b36      	ldr	r3, [pc, #216]	@ (8001c7c <xTraceObjectRegisterInternal+0x210>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	b292      	uxth	r2, r2
 8001bac:	805a      	strh	r2, [r3, #2]
 8001bae:	4a34      	ldr	r2, [pc, #208]	@ (8001c80 <xTraceObjectRegisterInternal+0x214>)
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	4b31      	ldr	r3, [pc, #196]	@ (8001c84 <xTraceObjectRegisterInternal+0x218>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d204      	bcs.n	8001bd2 <xTraceObjectRegisterInternal+0x166>
 8001bc8:	4b2e      	ldr	r3, [pc, #184]	@ (8001c84 <xTraceObjectRegisterInternal+0x218>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	3201      	adds	r2, #1
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c84 <xTraceObjectRegisterInternal+0x218>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6852      	ldr	r2, [r2, #4]
 8001bdc:	615a      	str	r2, [r3, #20]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	3208      	adds	r2, #8
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	2301      	movs	r3, #1
 8001bea:	e002      	b.n	8001bf2 <xTraceObjectRegisterInternal+0x186>
 8001bec:	2300      	movs	r3, #0
 8001bee:	e000      	b.n	8001bf2 <xTraceObjectRegisterInternal+0x186>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d038      	beq.n	8001c68 <xTraceObjectRegisterInternal+0x1fc>
	{
		(void)xTraceEventAddPointer(xEventHandle, pvAddress);
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f023 0303 	bic.w	r3, r3, #3
 8001c02:	4413      	add	r3, r2
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	3204      	adds	r2, #4
 8001c10:	609a      	str	r2, [r3, #8]
		for (i = 0u; i < uxStateCount; i++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c16:	e014      	b.n	8001c42 <xTraceObjectRegisterInternal+0x1d6>
		{
			(void)xTraceEventAddUnsignedBaseType(xEventHandle, uxStates[i]);
 8001c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c1e:	441a      	add	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	6819      	ldr	r1, [r3, #0]
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f023 0303 	bic.w	r3, r3, #3
 8001c2c:	440b      	add	r3, r1
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3204      	adds	r2, #4
 8001c3a:	609a      	str	r2, [r3, #8]
		for (i = 0u; i < uxStateCount; i++)
 8001c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c3e:	3301      	adds	r3, #1
 8001c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d3e6      	bcc.n	8001c18 <xTraceObjectRegisterInternal+0x1ac>
		}
		(void)xTraceEventEnd(xEventHandle); /*cstat !MISRAC2012-Rule-17.7 Suppress ignored return value check (inside macro)*/
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <xTraceObjectRegisterInternal+0x208>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d008      	beq.n	8001c68 <xTraceObjectRegisterInternal+0x1fc>
 8001c56:	4b08      	ldr	r3, [pc, #32]	@ (8001c78 <xTraceObjectRegisterInternal+0x20c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <xTraceObjectRegisterInternal+0x1fc>
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fb12 	bl	800128c <xTraceEventEndOffline>
	}

	return TRC_SUCCESS;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3738      	adds	r7, #56	@ 0x38
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20001eec 	.word	0x20001eec
 8001c78:	20001ee4 	.word	0x20001ee4
 8001c7c:	20000098 	.word	0x20000098
 8001c80:	e0001004 	.word	0xe0001004
 8001c84:	20001ef4 	.word	0x20001ef4

08001c88 <xTraceObjectRegister>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectRegister(uint32_t uiEventCode, void* const pvObject, const char* szName, TraceUnsignedBaseType_t uxState, TraceObjectHandle_t *pxObjectHandle)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af04      	add	r7, sp, #16
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
 8001c94:	603b      	str	r3, [r7, #0]
	return xTraceObjectRegisterInternal(uiEventCode, pvObject, szName, 1u, &uxState, 0u, pxObjectHandle);
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	9302      	str	r3, [sp, #8]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	68b9      	ldr	r1, [r7, #8]
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f7ff fedf 	bl	8001a6c <xTraceObjectRegisterInternal>
 8001cae:	4603      	mov	r3, r0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <xTraceObjectUnregister>:

traceResult xTraceObjectUnregister(TraceObjectHandle_t xObjectHandle, uint32_t uiEventCode, TraceUnsignedBaseType_t uxState)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
	void* pvObject = (void*)0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
	const char *szName = (void*)0; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8001cc8:	2300      	movs	r3, #0
 8001cca:	613b      	str	r3, [r7, #16]

	/* If asserts are disabled this variable will not get used, this stops warnings. */
	(void)szName;

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress((TraceEntryHandle_t)xObjectHandle, &pvObject) == TRC_SUCCESS);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	617b      	str	r3, [r7, #20]

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetSymbol((TraceEntryHandle_t)xObjectHandle, &szName) == TRC_SUCCESS);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	3314      	adds	r3, #20
 8001cd6:	613b      	str	r3, [r7, #16]

#if (TRC_SEND_NAME_ONLY_ON_DELETE == 1)
	/* Send name event because this is a delete */

	for (i = 0u; (szName[i] != (char)0) && (i < 128u); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61fb      	str	r3, [r7, #28]
 8001cdc:	e002      	b.n	8001ce4 <xTraceObjectUnregister+0x2c>
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	61fb      	str	r3, [r7, #28]
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	4413      	add	r3, r2
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <xTraceObjectUnregister+0x3e>
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8001cf4:	d9f3      	bls.n	8001cde <xTraceObjectUnregister+0x26>

	uiLength = i;
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	61bb      	str	r3, [r7, #24]
	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(prvTraceObjectSendNameEvent(pvObject, szName, uiLength) == TRC_SUCCESS);
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	6939      	ldr	r1, [r7, #16]
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 f8c7 	bl	8001e94 <prvTraceObjectSendNameEvent>
#endif /* (TRC_SEND_NAME_ONLY_ON_DELETE == 1) */

	/* Send the delete event, if possible */
	(void)xTraceEventCreate2(uiEventCode, (TraceUnsignedBaseType_t)(pvObject), uxState);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	68b8      	ldr	r0, [r7, #8]
 8001d0e:	f7ff f947 	bl	8000fa0 <xTraceEventCreate2>

	return xTraceEntryDelete(xObjectHandle);
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f7fe fe1e 	bl	8000954 <xTraceEntryDelete>
 8001d18:	4603      	mov	r3, r0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3720      	adds	r7, #32
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <xTraceObjectSetName>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectSetName(TraceObjectHandle_t xObjectHandle, const char* szName)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
	void* pvObject = (void*)0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
	uint32_t i;

    /* If asserts are disabled this variable will not get used, this stops warnings. */
	(void)pvObject;

	if (szName == (void*)0)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <xTraceObjectSetName+0x18>
	{
		szName = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8001d38:	4b0f      	ldr	r3, [pc, #60]	@ (8001d78 <xTraceObjectSetName+0x54>)
 8001d3a:	603b      	str	r3, [r7, #0]
	}

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress((TraceEntryHandle_t)xObjectHandle, &pvObject) == TRC_SUCCESS);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60fb      	str	r3, [r7, #12]

	for (i = 0u; (szName[i] != (char)0) && (i < 128u); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	e002      	b.n	8001d4e <xTraceObjectSetName+0x2a>
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	4413      	add	r3, r2
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d002      	beq.n	8001d60 <xTraceObjectSetName+0x3c>
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d5e:	d9f3      	bls.n	8001d48 <xTraceObjectSetName+0x24>

	uiLength = i;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	613b      	str	r3, [r7, #16]
	/* Send name event now since we don't do it on delete events */
	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(prvTraceObjectSendNameEvent(pvObject, szName, uiLength) == TRC_SUCCESS);
#endif /* (TRC_SEND_NAME_ONLY_ON_DELETE == 0) */

	return xTraceEntrySetSymbol((TraceEntryHandle_t)xObjectHandle, szName, uiLength);
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	6839      	ldr	r1, [r7, #0]
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7fe fe67 	bl	8000a3c <xTraceEntrySetSymbol>
 8001d6e:	4603      	mov	r3, r0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	0800c3cc 	.word	0x0800c3cc

08001d7c <xTraceObjectRegisterWithoutHandle>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectRegisterWithoutHandle(uint32_t uiEventCode, void* pvObject, const char* szName, TraceUnsignedBaseType_t uxState)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	603b      	str	r3, [r7, #0]
	TraceObjectHandle_t xObjectHandle;

	return xTraceObjectRegister(uiEventCode, pvObject, szName, uxState, &xObjectHandle);
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68b9      	ldr	r1, [r7, #8]
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f7ff ff76 	bl	8001c88 <xTraceObjectRegister>
 8001d9c:	4603      	mov	r3, r0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <xTraceObjectUnregisterWithoutHandle>:

traceResult xTraceObjectUnregisterWithoutHandle(uint32_t uiEventCode, void* pvObject, TraceUnsignedBaseType_t uxState)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b08c      	sub	sp, #48	@ 0x30
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001db2:	f3ef 8310 	mrs	r3, PRIMASK
 8001db6:	623b      	str	r3, [r7, #32]
  return(result);
 8001db8:	6a3b      	ldr	r3, [r7, #32]
	TraceEntryHandle_t xEntryHandle;
	traceResult xResult;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 8001dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc2:	f383 8810 	msr	PRIMASK, r3
}
 8001dc6:	bf00      	nop

	if (xTraceEntryFind(pvObject, &xEntryHandle) == TRC_FAIL)
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4619      	mov	r1, r3
 8001dce:	68b8      	ldr	r0, [r7, #8]
 8001dd0:	f7fe fe08 	bl	80009e4 <xTraceEntryFind>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d107      	bne.n	8001dea <xTraceObjectUnregisterWithoutHandle+0x44>
 8001dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ddc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	f383 8810 	msr	PRIMASK, r3
}
 8001de4:	bf00      	nop
	{
		TRACE_EXIT_CRITICAL_SECTION();

		return TRC_FAIL;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00d      	b.n	8001e06 <xTraceObjectUnregisterWithoutHandle+0x60>
	}

	xResult = xTraceObjectUnregister((TraceObjectHandle_t)xEntryHandle, uiEventCode, uxState);
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	68f9      	ldr	r1, [r7, #12]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff61 	bl	8001cb8 <xTraceObjectUnregister>
 8001df6:	62b8      	str	r0, [r7, #40]	@ 0x28
 8001df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dfa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	f383 8810 	msr	PRIMASK, r3
}
 8001e02:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return xResult;
 8001e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3730      	adds	r7, #48	@ 0x30
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <xTraceObjectSetNameWithoutHandle>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectSetNameWithoutHandle(void* pvObject, const char* szName)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b08a      	sub	sp, #40	@ 0x28
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e18:	f3ef 8310 	mrs	r3, PRIMASK
 8001e1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8001e1e:	69bb      	ldr	r3, [r7, #24]
	TraceEntryHandle_t xEntryHandle;
	traceResult xResult;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e22:	2301      	movs	r3, #1
 8001e24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	f383 8810 	msr	PRIMASK, r3
}
 8001e2c:	bf00      	nop

	if (xTraceEntryFind(pvObject, &xEntryHandle) == TRC_FAIL)
 8001e2e:	f107 030c 	add.w	r3, r7, #12
 8001e32:	4619      	mov	r1, r3
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7fe fdd5 	bl	80009e4 <xTraceEntryFind>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d117      	bne.n	8001e70 <xTraceObjectSetNameWithoutHandle+0x62>
	{
		/* No previous entry found. Create one. */
		if (xTraceEntryCreateWithAddress(pvObject, &xEntryHandle) == TRC_FAIL)
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fd25 	bl	8000894 <xTraceEntryCreate>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d104      	bne.n	8001e5a <xTraceObjectSetNameWithoutHandle+0x4c>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	2300      	movs	r3, #0
 8001e58:	e000      	b.n	8001e5c <xTraceObjectSetNameWithoutHandle+0x4e>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d007      	beq.n	8001e70 <xTraceObjectSetNameWithoutHandle+0x62>
 8001e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f383 8810 	msr	PRIMASK, r3
}
 8001e6a:	bf00      	nop
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e00c      	b.n	8001e8a <xTraceObjectSetNameWithoutHandle+0x7c>
		}
	}

	xResult = xTraceObjectSetName((TraceObjectHandle_t)xEntryHandle, szName);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6839      	ldr	r1, [r7, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff55 	bl	8001d24 <xTraceObjectSetName>
 8001e7a:	6238      	str	r0, [r7, #32]
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	f383 8810 	msr	PRIMASK, r3
}
 8001e86:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return xResult;
 8001e88:	6a3b      	ldr	r3, [r7, #32]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3728      	adds	r7, #40	@ 0x28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <prvTraceObjectSendNameEvent>:
	return xResult;
}

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult prvTraceObjectSendNameEvent(void* const pvObject, const char* szName, uint32_t uiLength)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
	uint32_t uiValue = 0u;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
	TraceEventHandle_t xEventHandle = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	613b      	str	r3, [r7, #16]

	if (xTraceEventBegin(PSF_EVENT_OBJ_NAME, sizeof(void*) + uiLength, &xEventHandle) == TRC_SUCCESS)
 8001ea8:	4b46      	ldr	r3, [pc, #280]	@ (8001fc4 <prvTraceObjectSendNameEvent+0x130>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d045      	beq.n	8001f40 <prvTraceObjectSendNameEvent+0xac>
 8001eb4:	4b44      	ldr	r3, [pc, #272]	@ (8001fc8 <prvTraceObjectSendNameEvent+0x134>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d040      	beq.n	8001f40 <prvTraceObjectSendNameEvent+0xac>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	330c      	adds	r3, #12
 8001ec2:	f107 0210 	add.w	r2, r7, #16
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff f975 	bl	80011b8 <xTraceEventBeginRawOffline>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d133      	bne.n	8001f3c <prvTraceObjectSendNameEvent+0xa8>
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	3b08      	subs	r3, #8
 8001eda:	089b      	lsrs	r3, r3, #2
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	031b      	lsls	r3, r3, #12
 8001ee0:	b21b      	sxth	r3, r3
 8001ee2:	f043 0303 	orr.w	r3, r3, #3
 8001ee6:	b21a      	sxth	r2, r3
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	b292      	uxth	r2, r2
 8001eee:	801a      	strh	r2, [r3, #0]
 8001ef0:	4b36      	ldr	r3, [pc, #216]	@ (8001fcc <prvTraceObjectSendNameEvent+0x138>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	b292      	uxth	r2, r2
 8001efc:	805a      	strh	r2, [r3, #2]
 8001efe:	4a34      	ldr	r2, [pc, #208]	@ (8001fd0 <prvTraceObjectSendNameEvent+0x13c>)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	4b31      	ldr	r3, [pc, #196]	@ (8001fd4 <prvTraceObjectSendNameEvent+0x140>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d204      	bcs.n	8001f22 <prvTraceObjectSendNameEvent+0x8e>
 8001f18:	4b2e      	ldr	r3, [pc, #184]	@ (8001fd4 <prvTraceObjectSendNameEvent+0x140>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	3201      	adds	r2, #1
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd4 <prvTraceObjectSendNameEvent+0x140>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6852      	ldr	r2, [r2, #4]
 8001f2c:	615a      	str	r2, [r3, #20]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	3208      	adds	r2, #8
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e002      	b.n	8001f42 <prvTraceObjectSendNameEvent+0xae>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	e000      	b.n	8001f42 <prvTraceObjectSendNameEvent+0xae>
 8001f40:	2300      	movs	r3, #0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d039      	beq.n	8001fba <prvTraceObjectSendNameEvent+0x126>
	{
		(void)xTraceEventAddPointer(xEventHandle, pvObject);
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f023 0303 	bic.w	r3, r3, #3
 8001f52:	4413      	add	r3, r2
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	3204      	adds	r2, #4
 8001f60:	609a      	str	r2, [r3, #8]
		(void)xTraceEventAddString(xEventHandle, szName, uiLength);
 8001f62:	6938      	ldr	r0, [r7, #16]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3303      	adds	r3, #3
 8001f68:	089b      	lsrs	r3, r3, #2
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	f7ff f9bf 	bl	80012f0 <xTraceEventAddData>

		/* Check if we can truncate */
		(void)xTraceEventPayloadRemaining(xEventHandle, &uiValue);
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	617b      	str	r3, [r7, #20]
		if (uiValue > 0u)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00b      	beq.n	8001f9c <prvTraceObjectSendNameEvent+0x108>
		{
			(void)xTraceEventAdd8(xEventHandle, 0u);
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	2200      	movs	r2, #0
 8001f90:	701a      	strb	r2, [r3, #0]
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	3201      	adds	r2, #1
 8001f9a:	609a      	str	r2, [r3, #8]
		}

		(void)xTraceEventEnd(xEventHandle); /*cstat !MISRAC2012-Rule-17.7 Suppress ignored return value check (inside macro)*/
 8001f9c:	4b09      	ldr	r3, [pc, #36]	@ (8001fc4 <prvTraceObjectSendNameEvent+0x130>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d008      	beq.n	8001fba <prvTraceObjectSendNameEvent+0x126>
 8001fa8:	4b07      	ldr	r3, [pc, #28]	@ (8001fc8 <prvTraceObjectSendNameEvent+0x134>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <prvTraceObjectSendNameEvent+0x126>
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff f969 	bl	800128c <xTraceEventEndOffline>
	}

	return TRC_SUCCESS;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20001eec 	.word	0x20001eec
 8001fc8:	20001ee4 	.word	0x20001ee4
 8001fcc:	20000098 	.word	0x20000098
 8001fd0:	e0001004 	.word	0xe0001004
 8001fd4:	20001ef4 	.word	0x20001ef4

08001fd8 <xTracePrintInitialize>:
static traceResult prvTraceVPrintF(const TraceStringHandle_t xChannel, const char* szFormat, uint32_t uiLength, uint32_t uiArgs, va_list* pxVariableList);

static TracePrintData_t *pxPrintData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTracePrintInitialize(TracePrintData_t *pxBuffer)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxPrintData = pxBuffer;
 8001fe0:	4a0b      	ldr	r2, [pc, #44]	@ (8002010 <xTracePrintInitialize+0x38>)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6013      	str	r3, [r2, #0]

	pxPrintData->defaultChannel = 0;
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8002010 <xTracePrintInitialize+0x38>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
	pxPrintData->consoleChannel = 0;
 8001fee:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <xTracePrintInitialize+0x38>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	605a      	str	r2, [r3, #4]

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_PRINT);
 8001ff6:	4b07      	ldr	r3, [pc, #28]	@ (8002014 <xTracePrintInitialize+0x3c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ffe:	4a05      	ldr	r2, [pc, #20]	@ (8002014 <xTracePrintInitialize+0x3c>)
 8002000:	6013      	str	r3, [r2, #0]
	
	return TRC_SUCCESS;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	20001150 	.word	0x20001150
 8002014:	20001eec 	.word	0x20001eec

08002018 <xTracePrint>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTracePrint(TraceStringHandle_t xChannel, const char* szString)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af02      	add	r7, sp, #8
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
	uint32_t uiLength;
	uint32_t i;
	
	/* We need to check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT) == 0U)
 8002022:	4b16      	ldr	r3, [pc, #88]	@ (800207c <xTracePrint+0x64>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <xTracePrint+0x1a>
	{
		return TRC_FAIL;
 800202e:	2301      	movs	r3, #1
 8002030:	e01f      	b.n	8002072 <xTracePrint+0x5a>
	}

	if (szString == (void*)0)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <xTracePrint+0x24>
	{
		szString = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8002038:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <xTracePrint+0x68>)
 800203a:	603b      	str	r3, [r7, #0]
	}

	for (i = 0u; (szString[i] != (char)0) && (i < 128u); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress char base type usage checks*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	e002      	b.n	8002048 <xTracePrint+0x30>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	3301      	adds	r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4413      	add	r3, r2
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d002      	beq.n	800205a <xTracePrint+0x42>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2b7f      	cmp	r3, #127	@ 0x7f
 8002058:	d9f3      	bls.n	8002042 <xTracePrint+0x2a>

	uiLength = i + 1u; /* Null termination */
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	3301      	adds	r3, #1
 800205e:	60bb      	str	r3, [r7, #8]

	return prvTraceVPrintF(xChannel, szString, uiLength, 0u, (va_list*)0);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 Suppress conversion of pointer to integer check*/ /*cstat !MISRAC2012-Rule-11.9 Suppress NULL recommendation*/
 8002060:	2300      	movs	r3, #0
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	2300      	movs	r3, #0
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	6839      	ldr	r1, [r7, #0]
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f880 	bl	8002170 <prvTraceVPrintF>
 8002070:	4603      	mov	r3, r0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20001eec 	.word	0x20001eec
 8002080:	0800c3d0 	.word	0x0800c3d0

08002084 <xTracePrintF>:
	return xResult;
}

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-16.1 Suppress variable parameter count check*/
traceResult xTracePrintF(TraceStringHandle_t xChannel, const char* szFormat, ...)
{
 8002084:	b40e      	push	{r1, r2, r3}
 8002086:	b580      	push	{r7, lr}
 8002088:	b085      	sub	sp, #20
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
	traceResult xResult;
	va_list xVariableList; /*cstat !MISRAC2012-Rule-17.1 Suppress stdarg usage check*/

	/* We need to check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT) == 0U)
 800208e:	4b0d      	ldr	r3, [pc, #52]	@ (80020c4 <xTracePrintF+0x40>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <xTracePrintF+0x1a>
	{
		return TRC_FAIL;
 800209a:	2301      	movs	r3, #1
 800209c:	e00b      	b.n	80020b6 <xTracePrintF+0x32>
	}

	va_start(xVariableList, szFormat);
 800209e:	f107 0320 	add.w	r3, r7, #32
 80020a2:	60bb      	str	r3, [r7, #8]
	xResult = xTraceVPrintF(xChannel, szFormat, &xVariableList);
 80020a4:	f107 0308 	add.w	r3, r7, #8
 80020a8:	461a      	mov	r2, r3
 80020aa:	69f9      	ldr	r1, [r7, #28]
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f80b 	bl	80020c8 <xTraceVPrintF>
 80020b2:	60f8      	str	r0, [r7, #12]
	va_end(xVariableList);

	return xResult;
 80020b4:	68fb      	ldr	r3, [r7, #12]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020c0:	b003      	add	sp, #12
 80020c2:	4770      	bx	lr
 80020c4:	20001eec 	.word	0x20001eec

080020c8 <xTraceVPrintF>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2012-Rule-17.1 Suppress stdarg usage check*/
traceResult xTraceVPrintF(TraceStringHandle_t xChannel, const char* szFormat, va_list* pxVariableList)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	@ 0x28
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
	uint32_t i;
	uint32_t uiArgs = 0u;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61bb      	str	r3, [r7, #24]
	uint32_t uiLength;

	/* We need to check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT) == 0U)
 80020d8:	4b23      	ldr	r3, [pc, #140]	@ (8002168 <xTraceVPrintF+0xa0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <xTraceVPrintF+0x20>
	{
		return TRC_FAIL;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e03b      	b.n	8002160 <xTraceVPrintF+0x98>
	}

	if (szFormat == (void*)0)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <xTraceVPrintF+0x2a>
	{
		szFormat = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 80020ee:	4b1f      	ldr	r3, [pc, #124]	@ (800216c <xTraceVPrintF+0xa4>)
 80020f0:	60bb      	str	r3, [r7, #8]
	}

	/* Count the number of arguments in the format string (e.g., %d) */
	for (i = 0u; (szFormat[i] != (char)0) && (i < 128u); i++) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress char base type usage checks*/ /*cstat !MISRAC2012-Rule-14.2 Suppress malformed for loop due to i being incremented inside*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]
 80020f6:	e01e      	b.n	8002136 <xTraceVPrintF+0x6e>
	{
		if (szFormat[i] == '%') /*cstat !MISRAC2004-17.4_b We need to access a specific character in the string*/
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	4413      	add	r3, r2
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b25      	cmp	r3, #37	@ 0x25
 8002102:	d115      	bne.n	8002130 <xTraceVPrintF+0x68>
		{
			if (szFormat[i + 1u] == (char)0) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access a specific character in the string*/
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	3301      	adds	r3, #1
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	4413      	add	r3, r2
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00d      	beq.n	800212e <xTraceVPrintF+0x66>
			{
				/* Found end of string, let for loop detect it */
				continue; /*cstat !MISRAC2004-14.5 Suppress continue usage check*/
			}

			if (szFormat[i + 1u] != '%') /*cstat !MISRAC2004-17.4_b We need to access a specific character in the string*/
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3301      	adds	r3, #1
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	4413      	add	r3, r2
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b25      	cmp	r3, #37	@ 0x25
 800211e:	d002      	beq.n	8002126 <xTraceVPrintF+0x5e>
			{
				uiArgs++;        /* Found an argument */
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	3301      	adds	r3, #1
 8002124:	61bb      	str	r3, [r7, #24]
			}

			/* Move past format specifier or non-argument '%' */
			i++; /*cstat !MISRAC2004-13.6 Suppress i increment inside for loop check*/
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3301      	adds	r3, #1
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	e000      	b.n	8002130 <xTraceVPrintF+0x68>
				continue; /*cstat !MISRAC2004-14.5 Suppress continue usage check*/
 800212e:	bf00      	nop
	for (i = 0u; (szFormat[i] != (char)0) && (i < 128u); i++) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress char base type usage checks*/ /*cstat !MISRAC2012-Rule-14.2 Suppress malformed for loop due to i being incremented inside*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	3301      	adds	r3, #1
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	4413      	add	r3, r2
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d002      	beq.n	8002148 <xTraceVPrintF+0x80>
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	2b7f      	cmp	r3, #127	@ 0x7f
 8002146:	d9d7      	bls.n	80020f8 <xTraceVPrintF+0x30>
		}
	}

	uiLength = i + 1u; /* Null termination */
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	3301      	adds	r3, #1
 800214c:	617b      	str	r3, [r7, #20]

	return prvTraceVPrintF(xChannel, szFormat, uiLength, uiArgs, pxVariableList);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	68b9      	ldr	r1, [r7, #8]
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 f809 	bl	8002170 <prvTraceVPrintF>
 800215e:	4603      	mov	r3, r0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3720      	adds	r7, #32
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20001eec 	.word	0x20001eec
 800216c:	0800c3d0 	.word	0x0800c3d0

08002170 <prvTraceVPrintF>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2012-Rule-17.1 Suppress stdarg usage check*/
static traceResult prvTraceVPrintF(TraceStringHandle_t xChannel, const char* szFormat, uint32_t uiLength, uint32_t uiArgs, va_list* pxVariableList)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	@ 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	603b      	str	r3, [r7, #0]
	TraceEventHandle_t xEventHandle = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	61bb      	str	r3, [r7, #24]
	uint32_t i, uiRemaining = 0u;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
	uint32_t uiValue = 0u;
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
	const uint32_t uiEventCode = PSF_EVENT_USER_EVENT + 1u + uiArgs; /* Add channel (1) */
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	3391      	adds	r3, #145	@ 0x91
 800218e:	623b      	str	r3, [r7, #32]
	const uint32_t uiSize = sizeof(void*) + (uiArgs * sizeof(TraceUnsignedBaseType_t)) + uiLength; /* Add channel (sizeof(void*)) */
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	3301      	adds	r3, #1
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	61fb      	str	r3, [r7, #28]

	if (xChannel == 0)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d113      	bne.n	80021ca <prvTraceVPrintF+0x5a>
	{
		if (pxPrintData->defaultChannel == 0)
 80021a2:	4b67      	ldr	r3, [pc, #412]	@ (8002340 <prvTraceVPrintF+0x1d0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10a      	bne.n	80021c2 <prvTraceVPrintF+0x52>
		{
			/* Channel is not present */
			if (xTraceStringRegister("Default", &pxPrintData->defaultChannel) == TRC_FAIL)
 80021ac:	4b64      	ldr	r3, [pc, #400]	@ (8002340 <prvTraceVPrintF+0x1d0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4619      	mov	r1, r3
 80021b2:	4864      	ldr	r0, [pc, #400]	@ (8002344 <prvTraceVPrintF+0x1d4>)
 80021b4:	f000 fd2c 	bl	8002c10 <xTraceStringRegister>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d101      	bne.n	80021c2 <prvTraceVPrintF+0x52>
			{
				return TRC_FAIL;
 80021be:	2301      	movs	r3, #1
 80021c0:	e0ba      	b.n	8002338 <prvTraceVPrintF+0x1c8>
			}
		}

		xChannel = pxPrintData->defaultChannel; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 80021c2:	4b5f      	ldr	r3, [pc, #380]	@ (8002340 <prvTraceVPrintF+0x1d0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60fb      	str	r3, [r7, #12]
	}

	/* Added channel to uiEventCode and uiSize */
	if (xTraceEventBegin(uiEventCode, uiSize , &xEventHandle) == TRC_FAIL)
 80021ca:	4b5f      	ldr	r3, [pc, #380]	@ (8002348 <prvTraceVPrintF+0x1d8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d046      	beq.n	8002264 <prvTraceVPrintF+0xf4>
 80021d6:	4b5d      	ldr	r3, [pc, #372]	@ (800234c <prvTraceVPrintF+0x1dc>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d041      	beq.n	8002264 <prvTraceVPrintF+0xf4>
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	3308      	adds	r3, #8
 80021e4:	f107 0218 	add.w	r2, r7, #24
 80021e8:	4611      	mov	r1, r2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe ffe4 	bl	80011b8 <xTraceEventBeginRawOffline>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d134      	bne.n	8002260 <prvTraceVPrintF+0xf0>
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	b21a      	sxth	r2, r3
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	3b08      	subs	r3, #8
 8002200:	089b      	lsrs	r3, r3, #2
 8002202:	b29b      	uxth	r3, r3
 8002204:	031b      	lsls	r3, r3, #12
 8002206:	b21b      	sxth	r3, r3
 8002208:	4313      	orrs	r3, r2
 800220a:	b21a      	sxth	r2, r3
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	b292      	uxth	r2, r2
 8002212:	801a      	strh	r2, [r3, #0]
 8002214:	4b4e      	ldr	r3, [pc, #312]	@ (8002350 <prvTraceVPrintF+0x1e0>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	b292      	uxth	r2, r2
 8002220:	805a      	strh	r2, [r3, #2]
 8002222:	4a4c      	ldr	r2, [pc, #304]	@ (8002354 <prvTraceVPrintF+0x1e4>)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6812      	ldr	r2, [r2, #0]
 800222a:	605a      	str	r2, [r3, #4]
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	4b49      	ldr	r3, [pc, #292]	@ (8002358 <prvTraceVPrintF+0x1e8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	429a      	cmp	r2, r3
 800223a:	d204      	bcs.n	8002246 <prvTraceVPrintF+0xd6>
 800223c:	4b46      	ldr	r3, [pc, #280]	@ (8002358 <prvTraceVPrintF+0x1e8>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	3201      	adds	r2, #1
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	4b43      	ldr	r3, [pc, #268]	@ (8002358 <prvTraceVPrintF+0x1e8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6852      	ldr	r2, [r2, #4]
 8002250:	615a      	str	r2, [r3, #20]
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	3208      	adds	r2, #8
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	2300      	movs	r3, #0
 800225e:	e002      	b.n	8002266 <prvTraceVPrintF+0xf6>
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <prvTraceVPrintF+0xf6>
 8002264:	2301      	movs	r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <prvTraceVPrintF+0xfe>
	{
		return TRC_FAIL;
 800226a:	2301      	movs	r3, #1
 800226c:	e064      	b.n	8002338 <prvTraceVPrintF+0x1c8>
	}

	/* Add xChannel */
	(void)xTraceEventAddPointer(xEventHandle, (void*)xChannel);
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f023 0303 	bic.w	r3, r3, #3
 800227a:	4413      	add	r3, r2
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	3204      	adds	r2, #4
 8002288:	609a      	str	r2, [r3, #8]

	/* Add all arguments */
	for (i = 0u; i < uiArgs; i++)
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	@ 0x24
 800228e:	e015      	b.n	80022bc <prvTraceVPrintF+0x14c>
	{
		(void)xTraceEventAddUnsignedBaseType(xEventHandle, va_arg(*pxVariableList, TraceUnsignedBaseType_t));
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f023 0303 	bic.w	r3, r3, #3
 800229c:	441a      	add	r2, r3
 800229e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	1d18      	adds	r0, r3, #4
 80022a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80022a6:	6008      	str	r0, [r1, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	3204      	adds	r2, #4
 80022b4:	609a      	str	r2, [r3, #8]
	for (i = 0u; i < uiArgs; i++)
 80022b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b8:	3301      	adds	r3, #1
 80022ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80022bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d3e5      	bcc.n	8002290 <prvTraceVPrintF+0x120>
	}

	(void)xTraceEventPayloadRemaining(xEventHandle, &uiRemaining);
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	617b      	str	r3, [r7, #20]
	if (uiRemaining < uiLength)
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d902      	bls.n	80022de <prvTraceVPrintF+0x16e>
	{
		uiLength = uiRemaining - 1u; /* Make room for null termination */ /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	3b01      	subs	r3, #1
 80022dc:	607b      	str	r3, [r7, #4]
	}

	/* Add format string */
	(void)xTraceEventAddString(xEventHandle, szFormat, uiLength);
 80022de:	69b8      	ldr	r0, [r7, #24]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3303      	adds	r3, #3
 80022e4:	089b      	lsrs	r3, r3, #2
 80022e6:	461a      	mov	r2, r3
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	f7ff f801 	bl	80012f0 <xTraceEventAddData>

	/* Check if we can truncate */
	(void)xTraceEventPayloadRemaining(xEventHandle, &uiValue);
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	613b      	str	r3, [r7, #16]
	if (uiValue > 0u)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00b      	beq.n	8002318 <prvTraceVPrintF+0x1a8>
	{
		(void)xTraceEventAdd8(xEventHandle, 0u);
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	4413      	add	r3, r2
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	3201      	adds	r2, #1
 8002316:	609a      	str	r2, [r3, #8]
	}

	(void)xTraceEventEnd(xEventHandle); /*cstat !MISRAC2012-Rule-17.7 Suppress ignored return value check (inside macro)*/
 8002318:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <prvTraceVPrintF+0x1d8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <prvTraceVPrintF+0x1c6>
 8002324:	4b09      	ldr	r3, [pc, #36]	@ (800234c <prvTraceVPrintF+0x1dc>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <prvTraceVPrintF+0x1c6>
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe ffab 	bl	800128c <xTraceEventEndOffline>

	return TRC_SUCCESS;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3728      	adds	r7, #40	@ 0x28
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20001150 	.word	0x20001150
 8002344:	0800c3e4 	.word	0x0800c3e4
 8002348:	20001eec 	.word	0x20001eec
 800234c:	20001ee4 	.word	0x20001ee4
 8002350:	20000098 	.word	0x20000098
 8002354:	e0001004 	.word	0xe0001004
 8002358:	20001ef4 	.word	0x20001ef4

0800235c <xTraceStackMonitorInitialize>:
#endif

static TraceStackMonitorData_t* pxStackMonitor TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceStackMonitorInitialize(TraceStackMonitorData_t *pxBuffer)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
	uint32_t i;
	
	/* This should never fail */
	TRC_ASSERT(pxBuffer != 0);

	pxStackMonitor = pxBuffer;
 8002364:	4a11      	ldr	r2, [pc, #68]	@ (80023ac <xTraceStackMonitorInitialize+0x50>)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6013      	str	r3, [r2, #0]

	pxStackMonitor->uxEntryCount = 0;
 800236a:	4b10      	ldr	r3, [pc, #64]	@ (80023ac <xTraceStackMonitorInitialize+0x50>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2200      	movs	r2, #0
 8002370:	651a      	str	r2, [r3, #80]	@ 0x50

	for (i = 0; i < (TRC_CFG_STACK_MONITOR_MAX_TASKS); i++)
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	e008      	b.n	800238a <xTraceStackMonitorInitialize+0x2e>
	{
		pxStackMonitor->xEntries[i].pvTask = 0;
 8002378:	4b0c      	ldr	r3, [pc, #48]	@ (80023ac <xTraceStackMonitorInitialize+0x50>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	2100      	movs	r1, #0
 8002380:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	for (i = 0; i < (TRC_CFG_STACK_MONITOR_MAX_TASKS); i++)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	3301      	adds	r3, #1
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b09      	cmp	r3, #9
 800238e:	d9f3      	bls.n	8002378 <xTraceStackMonitorInitialize+0x1c>
	}
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_STACK_MONITOR);
 8002390:	4b07      	ldr	r3, [pc, #28]	@ (80023b0 <xTraceStackMonitorInitialize+0x54>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002398:	4a05      	ldr	r2, [pc, #20]	@ (80023b0 <xTraceStackMonitorInitialize+0x54>)
 800239a:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	20001154 	.word	0x20001154
 80023b0:	20001eec 	.word	0x20001eec

080023b4 <xTraceStackMonitorAdd>:

traceResult xTraceStackMonitorAdd(void *pvTask)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b088      	sub	sp, #32
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
	TraceUnsignedBaseType_t uxLowMark = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	60bb      	str	r3, [r7, #8]
	TRACE_ALLOC_CRITICAL_SECTION();
	
	/* This should never fail */
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_STACK_MONITOR));

	if (pvTask == 0)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <xTraceStackMonitorAdd+0x16>
	{
		/* We don't add null addresses */
		return TRC_FAIL;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e040      	b.n	800244c <xTraceStackMonitorAdd+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023ca:	f3ef 8310 	mrs	r3, PRIMASK
 80023ce:	617b      	str	r3, [r7, #20]
  return(result);
 80023d0:	697b      	ldr	r3, [r7, #20]
	}
	
	TRACE_ENTER_CRITICAL_SECTION();
 80023d2:	61fb      	str	r3, [r7, #28]
 80023d4:	2301      	movs	r3, #1
 80023d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	f383 8810 	msr	PRIMASK, r3
}
 80023de:	bf00      	nop

	if (pxStackMonitor->uxEntryCount >= (TRC_CFG_STACK_MONITOR_MAX_TASKS))
 80023e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002454 <xTraceStackMonitorAdd+0xa0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023e6:	2b09      	cmp	r3, #9
 80023e8:	d90a      	bls.n	8002400 <xTraceStackMonitorAdd+0x4c>
	{
		xTraceDiagnosticsIncrease(TRC_DIAGNOSTICS_STACK_MONITOR_NO_SLOTS);
 80023ea:	2003      	movs	r0, #3
 80023ec:	f7fe f978 	bl	80006e0 <xTraceDiagnosticsIncrease>
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	f383 8810 	msr	PRIMASK, r3
}
 80023fa:	bf00      	nop
		
		TRACE_EXIT_CRITICAL_SECTION();
		
		return TRC_FAIL;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e025      	b.n	800244c <xTraceStackMonitorAdd+0x98>
	}

	if (xTraceKernelPortGetUnusedStack(pvTask, &uxLowMark) == TRC_SUCCESS)
 8002400:	f107 0308 	add.w	r3, r7, #8
 8002404:	4619      	mov	r1, r3
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff fa54 	bl	80018b4 <xTraceKernelPortGetUnusedStack>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d115      	bne.n	800243e <xTraceStackMonitorAdd+0x8a>
	{
		pxStackMonitor->xEntries[pxStackMonitor->uxEntryCount].pvTask = pvTask;
 8002412:	4b10      	ldr	r3, [pc, #64]	@ (8002454 <xTraceStackMonitorAdd+0xa0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a0f      	ldr	r2, [pc, #60]	@ (8002454 <xTraceStackMonitorAdd+0xa0>)
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		pxStackMonitor->xEntries[pxStackMonitor->uxEntryCount].uxPreviousLowWaterMark = uxLowMark;
 8002422:	4b0c      	ldr	r3, [pc, #48]	@ (8002454 <xTraceStackMonitorAdd+0xa0>)
 8002424:	6819      	ldr	r1, [r3, #0]
 8002426:	4b0b      	ldr	r3, [pc, #44]	@ (8002454 <xTraceStackMonitorAdd+0xa0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	440b      	add	r3, r1
 8002432:	605a      	str	r2, [r3, #4]

		pxStackMonitor->uxEntryCount++;
 8002434:	4b07      	ldr	r3, [pc, #28]	@ (8002454 <xTraceStackMonitorAdd+0xa0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800243a:	3201      	adds	r2, #1
 800243c:	651a      	str	r2, [r3, #80]	@ 0x50
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f383 8810 	msr	PRIMASK, r3
}
 8002448:	bf00      	nop
	}
	
	TRACE_EXIT_CRITICAL_SECTION();

	return TRC_SUCCESS;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3720      	adds	r7, #32
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20001154 	.word	0x20001154

08002458 <xTraceStackMonitorReport>:

	return TRC_SUCCESS;
}

traceResult xTraceStackMonitorReport(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af00      	add	r7, sp, #0
	TraceUnsignedBaseType_t uxLowWaterMark = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002462:	f3ef 8310 	mrs	r3, PRIMASK
 8002466:	60bb      	str	r3, [r7, #8]
  return(result);
 8002468:	68bb      	ldr	r3, [r7, #8]

	/* This should never fail */
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_STACK_MONITOR));

#if (TRC_CFG_ALLOW_TASK_DELETE == 1)
	TRACE_ENTER_CRITICAL_SECTION();
 800246a:	61bb      	str	r3, [r7, #24]
 800246c:	2301      	movs	r3, #1
 800246e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f383 8810 	msr	PRIMASK, r3
}
 8002476:	bf00      	nop
#endif

	/* Never report more than there are entries */
	uxToReport = TRC_CFG_STACK_MONITOR_MAX_REPORTS <= pxStackMonitor->uxEntryCount ? TRC_CFG_STACK_MONITOR_MAX_REPORTS : pxStackMonitor->uxEntryCount;
 8002478:	4b2b      	ldr	r3, [pc, #172]	@ (8002528 <xTraceStackMonitorReport+0xd0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800247e:	2b00      	cmp	r3, #0
 8002480:	bf14      	ite	ne
 8002482:	2301      	movne	r3, #1
 8002484:	2300      	moveq	r3, #0
 8002486:	b2db      	uxtb	r3, r3
 8002488:	617b      	str	r3, [r7, #20]

	for (i = 0; i < uxToReport; i++)
 800248a:	2300      	movs	r3, #0
 800248c:	61fb      	str	r3, [r7, #28]
 800248e:	e03c      	b.n	800250a <xTraceStackMonitorReport+0xb2>
	{
		/* If uiCurrentIndex is too large, reset it */
		uiCurrentIndex = uiCurrentIndex < pxStackMonitor->uxEntryCount ? uiCurrentIndex : 0;
 8002490:	4b25      	ldr	r3, [pc, #148]	@ (8002528 <xTraceStackMonitorReport+0xd0>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002496:	4b25      	ldr	r3, [pc, #148]	@ (800252c <xTraceStackMonitorReport+0xd4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d902      	bls.n	80024a4 <xTraceStackMonitorReport+0x4c>
 800249e:	4b23      	ldr	r3, [pc, #140]	@ (800252c <xTraceStackMonitorReport+0xd4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	e000      	b.n	80024a6 <xTraceStackMonitorReport+0x4e>
 80024a4:	2300      	movs	r3, #0
 80024a6:	4a21      	ldr	r2, [pc, #132]	@ (800252c <xTraceStackMonitorReport+0xd4>)
 80024a8:	6013      	str	r3, [r2, #0]
		
		pxStackMonitorEntry = &pxStackMonitor->xEntries[uiCurrentIndex];
 80024aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002528 <xTraceStackMonitorReport+0xd0>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	4b1f      	ldr	r3, [pc, #124]	@ (800252c <xTraceStackMonitorReport+0xd4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4413      	add	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]

		if (xTraceKernelPortGetUnusedStack(pxStackMonitorEntry->pvTask, &uxLowWaterMark) != TRC_SUCCESS)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	463a      	mov	r2, r7
 80024be:	4611      	mov	r1, r2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff f9f7 	bl	80018b4 <xTraceKernelPortGetUnusedStack>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <xTraceStackMonitorReport+0x80>
		{
			uiCurrentIndex++;
 80024cc:	4b17      	ldr	r3, [pc, #92]	@ (800252c <xTraceStackMonitorReport+0xd4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	3301      	adds	r3, #1
 80024d2:	4a16      	ldr	r2, [pc, #88]	@ (800252c <xTraceStackMonitorReport+0xd4>)
 80024d4:	6013      	str	r3, [r2, #0]
			continue;
 80024d6:	e015      	b.n	8002504 <xTraceStackMonitorReport+0xac>
		}

		if (uxLowWaterMark < pxStackMonitorEntry->uxPreviousLowWaterMark)
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d902      	bls.n	80024e8 <xTraceStackMonitorReport+0x90>
		{
			pxStackMonitorEntry->uxPreviousLowWaterMark = uxLowWaterMark;
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	605a      	str	r2, [r3, #4]
		}

		xTraceEventCreate2(PSF_EVENT_UNUSED_STACK, (TraceUnsignedBaseType_t)pxStackMonitorEntry->pvTask, pxStackMonitorEntry->uxPreviousLowWaterMark);
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4619      	mov	r1, r3
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	461a      	mov	r2, r3
 80024f4:	20eb      	movs	r0, #235	@ 0xeb
 80024f6:	f7fe fd53 	bl	8000fa0 <xTraceEventCreate2>

		uiCurrentIndex++;
 80024fa:	4b0c      	ldr	r3, [pc, #48]	@ (800252c <xTraceStackMonitorReport+0xd4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	3301      	adds	r3, #1
 8002500:	4a0a      	ldr	r2, [pc, #40]	@ (800252c <xTraceStackMonitorReport+0xd4>)
 8002502:	6013      	str	r3, [r2, #0]
	for (i = 0; i < uxToReport; i++)
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	3301      	adds	r3, #1
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	69fa      	ldr	r2, [r7, #28]
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	429a      	cmp	r2, r3
 8002510:	d3be      	bcc.n	8002490 <xTraceStackMonitorReport+0x38>
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f383 8810 	msr	PRIMASK, r3
}
 800251c:	bf00      	nop

#if (TRC_CFG_ALLOW_TASK_DELETE == 1)
	TRACE_EXIT_CRITICAL_SECTION();
#endif

	return TRC_SUCCESS;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3720      	adds	r7, #32
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20001154 	.word	0x20001154
 800252c:	20001158 	.word	0x20001158

08002530 <xTraceStaticBufferInitialize>:
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceStaticBufferTable_t *pxTraceStaticBufferTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceStaticBufferInitialize(TraceStaticBufferTable_t *pxBuffer)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceStaticBufferTable = pxBuffer;
 8002538:	4a07      	ldr	r2, [pc, #28]	@ (8002558 <xTraceStaticBufferInitialize+0x28>)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6013      	str	r3, [r2, #0]

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_STATIC_BUFFER);
 800253e:	4b07      	ldr	r3, [pc, #28]	@ (800255c <xTraceStaticBufferInitialize+0x2c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002546:	4a05      	ldr	r2, [pc, #20]	@ (800255c <xTraceStaticBufferInitialize+0x2c>)
 8002548:	6013      	str	r3, [r2, #0]
	
	return TRC_SUCCESS;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	2000115c 	.word	0x2000115c
 800255c:	20001eec 	.word	0x20001eec

08002560 <xTraceInitialize>:
* trace recorder can be enabled, at which point make sure to call this function
* as early as possible.
* See TRC_CFG_RECORDER_DATA_INIT in trcConfig.h.
******************************************************************************/
traceResult xTraceInitialize(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
	TRC_ASSERT_EQUAL_SIZE(TraceUnsignedBaseType_t, TraceBaseType_t);

	/* TraceUnsignedBaseType_t is used to store handles (addresses) */
	TRC_ASSERT_EQUAL_SIZE(TraceUnsignedBaseType_t, TraceHandleBaseType_t);
	
	if (RecorderInitialized != 0u)
 8002566:	4b66      	ldr	r3, [pc, #408]	@ (8002700 <xTraceInitialize+0x1a0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <xTraceInitialize+0x12>
	{
		return TRC_SUCCESS;
 800256e:	2300      	movs	r3, #0
 8002570:	e0c2      	b.n	80026f8 <xTraceInitialize+0x198>
	}

	TRC_PORT_SPECIFIC_INIT();
 8002572:	f7ff f8af 	bl	80016d4 <xTraceHardwarePortInitCortexM>
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	pxTraceRecorderData = &xRecorderData;
 8002576:	4b63      	ldr	r3, [pc, #396]	@ (8002704 <xTraceInitialize+0x1a4>)
 8002578:	4a63      	ldr	r2, [pc, #396]	@ (8002708 <xTraceInitialize+0x1a8>)
 800257a:	601a      	str	r2, [r3, #0]
	/* Allocate data */
	pxTraceRecorderData = TRC_KERNEL_PORT_HEAP_MALLOC(sizeof(TraceRecorderData_t));
#endif

	/* These are set on init so they aren't overwritten by late initialization values. */
	pxTraceRecorderData->uiSessionCounter = 0u;
 800257c:	4b61      	ldr	r3, [pc, #388]	@ (8002704 <xTraceInitialize+0x1a4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
	pxTraceRecorderData->uiRecorderEnabled = 0u;
 8002584:	4b5f      	ldr	r3, [pc, #380]	@ (8002704 <xTraceInitialize+0x1a4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2200      	movs	r2, #0
 800258a:	605a      	str	r2, [r3, #4]
	
	for (i = 0; i < TRC_CFG_CORE_COUNT; i++)
 800258c:	2300      	movs	r3, #0
 800258e:	607b      	str	r3, [r7, #4]
 8002590:	e009      	b.n	80025a6 <xTraceInitialize+0x46>
	{
		pxTraceRecorderData->uxTraceSystemStates[i] = (TraceUnsignedBaseType_t)TRC_STATE_IN_STARTUP;
 8002592:	4b5c      	ldr	r3, [pc, #368]	@ (8002704 <xTraceInitialize+0x1a4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	3202      	adds	r2, #2
 800259a:	2100      	movs	r1, #0
 800259c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < TRC_CFG_CORE_COUNT; i++)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3301      	adds	r3, #1
 80025a4:	607b      	str	r3, [r7, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f2      	beq.n	8002592 <xTraceInitialize+0x32>
	}
	
	/*cstat !MISRAC2004-13.7_b Suppress always false check*/
	if (xTraceEntryIndexTableInitialize(&pxTraceRecorderData->xEntryIndexTableBuffer) == TRC_FAIL)
 80025ac:	4b55      	ldr	r3, [pc, #340]	@ (8002704 <xTraceInitialize+0x1a4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	3314      	adds	r3, #20
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fe f904 	bl	80007c0 <xTraceEntryIndexTableInitialize>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <xTraceInitialize+0x62>
	{
		return TRC_FAIL;
 80025be:	2301      	movs	r3, #1
 80025c0:	e09a      	b.n	80026f8 <xTraceInitialize+0x198>
	{
		return TRC_FAIL;
	}
#endif
	
	if (xTraceCounterInitialize(&pxTraceRecorderData->xCounterBuffer) == TRC_FAIL)
 80025c2:	4b50      	ldr	r3, [pc, #320]	@ (8002704 <xTraceInitialize+0x1a4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f503 6358 	add.w	r3, r3, #3456	@ 0xd80
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe f828 	bl	8000620 <xTraceCounterInitialize>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <xTraceInitialize+0x7a>
	{
		return TRC_FAIL;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e08e      	b.n	80026f8 <xTraceInitialize+0x198>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceStackMonitorInitialize(&pxTraceRecorderData->xStackMonitorBuffer) == TRC_FAIL)
 80025da:	4b4a      	ldr	r3, [pc, #296]	@ (8002704 <xTraceInitialize+0x1a4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f603 5314 	addw	r3, r3, #3348	@ 0xd14
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff feba 	bl	800235c <xTraceStackMonitorInitialize>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <xTraceInitialize+0x92>
	{
		return TRC_FAIL;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e082      	b.n	80026f8 <xTraceInitialize+0x198>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceStreamPortInitialize(&pxTraceRecorderData->xStreamPortBuffer) == TRC_FAIL)
 80025f2:	4b44      	ldr	r3, [pc, #272]	@ (8002704 <xTraceInitialize+0x1a4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	333c      	adds	r3, #60	@ 0x3c
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fd ff61 	bl	80004c0 <xTraceStreamPortInitialize>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b01      	cmp	r3, #1
 8002602:	d101      	bne.n	8002608 <xTraceInitialize+0xa8>
	{
		return TRC_FAIL;
 8002604:	2301      	movs	r3, #1
 8002606:	e077      	b.n	80026f8 <xTraceInitialize+0x198>
	if (xTraceAssertInitialize(&pxTraceRecorderData->xAssertBuffer) == TRC_FAIL)
	{
		return TRC_FAIL;
	}

	if (xTraceDiagnosticsInitialize(&pxTraceRecorderData->xDiagnosticsBuffer) == TRC_FAIL)
 8002608:	4b3e      	ldr	r3, [pc, #248]	@ (8002704 <xTraceInitialize+0x1a4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f603 5368 	addw	r3, r3, #3432	@ 0xd68
 8002610:	4618      	mov	r0, r3
 8002612:	f7fe f821 	bl	8000658 <xTraceDiagnosticsInitialize>
 8002616:	4603      	mov	r3, r0
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <xTraceInitialize+0xc0>
	{
		return TRC_FAIL;
 800261c:	2301      	movs	r3, #1
 800261e:	e06b      	b.n	80026f8 <xTraceInitialize+0x198>
	}

	/*cstat !MISRAC2004-13.7_b Suppress always false check*/
	if (xTraceExtensionInitialize(&pxTraceRecorderData->xExtensionBuffer) == TRC_FAIL)
 8002620:	4b38      	ldr	r3, [pc, #224]	@ (8002704 <xTraceInitialize+0x1a4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f603 537c 	addw	r3, r3, #3452	@ 0xd7c
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff f837 	bl	800169c <xTraceExtensionInitialize>
 800262e:	4603      	mov	r3, r0
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <xTraceInitialize+0xd8>
	{
		return TRC_FAIL;
 8002634:	2301      	movs	r3, #1
 8002636:	e05f      	b.n	80026f8 <xTraceInitialize+0x198>
	}
	
	if (xTraceStaticBufferInitialize(&pxTraceRecorderData->xStaticBufferBuffer) == TRC_FAIL)
 8002638:	4b32      	ldr	r3, [pc, #200]	@ (8002704 <xTraceInitialize+0x1a4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f603 2314 	addw	r3, r3, #2580	@ 0xa14
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff ff75 	bl	8002530 <xTraceStaticBufferInitialize>
 8002646:	4603      	mov	r3, r0
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <xTraceInitialize+0xf0>
	{
		return TRC_FAIL;
 800264c:	2301      	movs	r3, #1
 800264e:	e053      	b.n	80026f8 <xTraceInitialize+0x198>
	}

	if (xTraceEventInitialize(&pxTraceRecorderData->xEventDataBuffer) == TRC_FAIL)
 8002650:	4b2c      	ldr	r3, [pc, #176]	@ (8002704 <xTraceInitialize+0x1a4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f603 4354 	addw	r3, r3, #3156	@ 0xc54
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe fbcd 	bl	8000df8 <xTraceEventInitialize>
 800265e:	4603      	mov	r3, r0
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <xTraceInitialize+0x108>
	{
		return TRC_FAIL;
 8002664:	2301      	movs	r3, #1
 8002666:	e047      	b.n	80026f8 <xTraceInitialize+0x198>
	}
	
	if (xTracePrintInitialize(&pxTraceRecorderData->xPrintBuffer) == TRC_FAIL)
 8002668:	4b26      	ldr	r3, [pc, #152]	@ (8002704 <xTraceInitialize+0x1a4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f603 43cc 	addw	r3, r3, #3276	@ 0xccc
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fcb1 	bl	8001fd8 <xTracePrintInitialize>
 8002676:	4603      	mov	r3, r0
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <xTraceInitialize+0x120>
	{
		return TRC_FAIL;
 800267c:	2301      	movs	r3, #1
 800267e:	e03b      	b.n	80026f8 <xTraceInitialize+0x198>
	}
	
	if (xTraceErrorInitialize(&pxTraceRecorderData->xErrorBuffer) == TRC_FAIL)
 8002680:	4b20      	ldr	r3, [pc, #128]	@ (8002704 <xTraceInitialize+0x1a4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f603 43d4 	addw	r3, r3, #3284	@ 0xcd4
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe fa53 	bl	8000b34 <xTraceErrorInitialize>
 800268e:	4603      	mov	r3, r0
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <xTraceInitialize+0x138>
	{
		return TRC_FAIL;
 8002694:	2301      	movs	r3, #1
 8002696:	e02f      	b.n	80026f8 <xTraceInitialize+0x198>
	}

	if (xTraceISRInitialize(&pxTraceRecorderData->xISRBuffer) == TRC_FAIL)
 8002698:	4b1a      	ldr	r3, [pc, #104]	@ (8002704 <xTraceInitialize+0x1a4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f503 634e 	add.w	r3, r3, #3296	@ 0xce0
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff f8c7 	bl	8001834 <xTraceISRInitialize>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <xTraceInitialize+0x150>
	{
		return TRC_FAIL;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e023      	b.n	80026f8 <xTraceInitialize+0x198>
	}

	if (xTraceTaskInitialize(&pxTraceRecorderData->xTaskInfoBuffer) == TRC_FAIL)
 80026b0:	4b14      	ldr	r3, [pc, #80]	@ (8002704 <xTraceInitialize+0x1a4>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f503 6351 	add.w	r3, r3, #3344	@ 0xd10
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 fb81 	bl	8002dc0 <xTraceTaskInitialize>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <xTraceInitialize+0x168>
	{
		return TRC_FAIL;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e017      	b.n	80026f8 <xTraceInitialize+0x198>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceKernelPortInitialize(&pxTraceRecorderData->xKernelPortBuffer) == TRC_FAIL)
 80026c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002704 <xTraceInitialize+0x1a4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f603 5308 	addw	r3, r3, #3336	@ 0xd08
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff f8ff 	bl	80018d4 <xTraceKernelPortInitialize>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <xTraceInitialize+0x180>
	{
		return TRC_FAIL;
 80026dc:	2301      	movs	r3, #1
 80026de:	e00b      	b.n	80026f8 <xTraceInitialize+0x198>
	}

	pxTraceRecorderData->reserved = 0xFFFFFFFFUL;
 80026e0:	4b08      	ldr	r3, [pc, #32]	@ (8002704 <xTraceInitialize+0x1a4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f04f 32ff 	mov.w	r2, #4294967295
 80026e8:	60da      	str	r2, [r3, #12]

	(void)xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_CORE);
 80026ea:	4b05      	ldr	r3, [pc, #20]	@ (8002700 <xTraceInitialize+0x1a0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	4a03      	ldr	r2, [pc, #12]	@ (8002700 <xTraceInitialize+0x1a0>)
 80026f4:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20001eec 	.word	0x20001eec
 8002704:	20001ee4 	.word	0x20001ee4
 8002708:	20001160 	.word	0x20001160

0800270c <prvVerifySizeAlignment>:

/* Do this in function to avoid unreachable code warnings */
traceResult prvVerifySizeAlignment(uint32_t ulSize)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
	return (ulSize % sizeof(TraceUnsignedBaseType_t)) == 0 ? TRC_SUCCESS : TRC_FAIL;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	2b00      	cmp	r3, #0
 800271c:	bf14      	ite	ne
 800271e:	2301      	movne	r3, #1
 8002720:	2300      	moveq	r3, #0
 8002722:	b2db      	uxtb	r3, r3
}
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <xTraceHeaderInitialize>:

traceResult xTraceHeaderInitialize(TraceHeaderBuffer_t *pxBuffer)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
	uint32_t i;
	const char* platform_cfg = TRC_PLATFORM_CFG; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8002738:	4b41      	ldr	r3, [pc, #260]	@ (8002840 <xTraceHeaderInitialize+0x110>)
 800273a:	60bb      	str	r3, [r7, #8]

	TRC_ASSERT_EQUAL_SIZE(TraceHeaderBuffer_t, TraceHeader_t);

	if (pxBuffer == (void*)0)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <xTraceHeaderInitialize+0x16>
	{
		return TRC_FAIL;
 8002742:	2301      	movs	r3, #1
 8002744:	e078      	b.n	8002838 <xTraceHeaderInitialize+0x108>
	}

	if (prvVerifySizeAlignment(sizeof(TraceStreamPortBuffer_t)) == TRC_FAIL)
 8002746:	f640 10d8 	movw	r0, #2520	@ 0x9d8
 800274a:	f7ff ffdf 	bl	800270c <prvVerifySizeAlignment>
 800274e:	4603      	mov	r3, r0
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <xTraceHeaderInitialize+0x28>
	{
		/* TraceStreamPortBuffer_t size is not aligned to TraceUnsignedBaseType_t */
		return TRC_FAIL;
 8002754:	2301      	movs	r3, #1
 8002756:	e06f      	b.n	8002838 <xTraceHeaderInitialize+0x108>
	}

	if (prvVerifySizeAlignment(sizeof(TraceEventDataTable_t)) == TRC_FAIL)
 8002758:	2078      	movs	r0, #120	@ 0x78
 800275a:	f7ff ffd7 	bl	800270c <prvVerifySizeAlignment>
 800275e:	4603      	mov	r3, r0
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <xTraceHeaderInitialize+0x38>
	{
		/* TraceEventDataTable_t size is not aligned to TraceUnsignedBaseType_t */
		return TRC_FAIL;
 8002764:	2301      	movs	r3, #1
 8002766:	e067      	b.n	8002838 <xTraceHeaderInitialize+0x108>
	}

	if (prvVerifySizeAlignment(sizeof(TraceKernelPortDataBuffer_t)) == TRC_FAIL)
 8002768:	2008      	movs	r0, #8
 800276a:	f7ff ffcf 	bl	800270c <prvVerifySizeAlignment>
 800276e:	4603      	mov	r3, r0
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <xTraceHeaderInitialize+0x48>
	{
		/* TraceKernelPortDataBuffer_t size is not aligned to TraceUnsignedBaseType_t */
		return TRC_FAIL;
 8002774:	2301      	movs	r3, #1
 8002776:	e05f      	b.n	8002838 <xTraceHeaderInitialize+0x108>
	}

	pxHeader = (TraceHeader_t*)pxBuffer; /*cstat !MISRAC2004-11.4 !MISRAC2012-Rule-11.3 Suppress conversion between pointer types checks*/
 8002778:	4a32      	ldr	r2, [pc, #200]	@ (8002844 <xTraceHeaderInitialize+0x114>)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6013      	str	r3, [r2, #0]

	pxHeader->uiPSF = TRACE_PSF_ENDIANESS_IDENTIFIER;
 800277e:	4b31      	ldr	r3, [pc, #196]	@ (8002844 <xTraceHeaderInitialize+0x114>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a31      	ldr	r2, [pc, #196]	@ (8002848 <xTraceHeaderInitialize+0x118>)
 8002784:	601a      	str	r2, [r3, #0]
	pxHeader->uiVersion = TRACE_FORMAT_VERSION;
 8002786:	4b2f      	ldr	r3, [pc, #188]	@ (8002844 <xTraceHeaderInitialize+0x114>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	220e      	movs	r2, #14
 800278c:	809a      	strh	r2, [r3, #4]
	pxHeader->uiPlatform = TRACE_KERNEL_VERSION;
 800278e:	4b2d      	ldr	r3, [pc, #180]	@ (8002844 <xTraceHeaderInitialize+0x114>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f641 22a1 	movw	r2, #6817	@ 0x1aa1
 8002796:	80da      	strh	r2, [r3, #6]

	for (i = 0u; i < (uint32_t)(TRC_PLATFORM_CFG_LENGTH); i++)
 8002798:	2300      	movs	r3, #0
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	e013      	b.n	80027c6 <xTraceHeaderInitialize+0x96>
	{
		pxHeader->platformCfg[i] = platform_cfg[i]; /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4413      	add	r3, r2
 80027a4:	4a27      	ldr	r2, [pc, #156]	@ (8002844 <xTraceHeaderInitialize+0x114>)
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	7819      	ldrb	r1, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4413      	add	r3, r2
 80027ae:	3318      	adds	r3, #24
 80027b0:	460a      	mov	r2, r1
 80027b2:	701a      	strb	r2, [r3, #0]
		if (platform_cfg[i] == (char)0) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4413      	add	r3, r2
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d006      	beq.n	80027ce <xTraceHeaderInitialize+0x9e>
	for (i = 0u; i < (uint32_t)(TRC_PLATFORM_CFG_LENGTH); i++)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	3301      	adds	r3, #1
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2b07      	cmp	r3, #7
 80027ca:	d9e8      	bls.n	800279e <xTraceHeaderInitialize+0x6e>
 80027cc:	e000      	b.n	80027d0 <xTraceHeaderInitialize+0xa0>
		{
			break;
 80027ce:	bf00      	nop
		}
	}
	pxHeader->uiPlatformCfgPatch = (uint16_t)TRC_PLATFORM_CFG_PATCH;
 80027d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002844 <xTraceHeaderInitialize+0x114>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2200      	movs	r2, #0
 80027d6:	829a      	strh	r2, [r3, #20]
	pxHeader->uiPlatformCfgMinor = (uint8_t)TRC_PLATFORM_CFG_MINOR;
 80027d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002844 <xTraceHeaderInitialize+0x114>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2202      	movs	r2, #2
 80027de:	759a      	strb	r2, [r3, #22]
	pxHeader->uiPlatformCfgMajor = (uint8_t)TRC_PLATFORM_CFG_MAJOR;
 80027e0:	4b18      	ldr	r3, [pc, #96]	@ (8002844 <xTraceHeaderInitialize+0x114>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2201      	movs	r2, #1
 80027e6:	75da      	strb	r2, [r3, #23]
	pxHeader->uiNumCores = (uint32_t)TRC_CFG_CORE_COUNT;
 80027e8:	4b16      	ldr	r3, [pc, #88]	@ (8002844 <xTraceHeaderInitialize+0x114>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2201      	movs	r2, #1
 80027ee:	60da      	str	r2, [r3, #12]
	
#ifdef TRC_STREAM_PORT_MULTISTREAM_SUPPORT
	pxHeader->uiNumCores |= 2 << 8;
#else
	pxHeader->uiNumCores |= 3 << 8;
 80027f0:	4b14      	ldr	r3, [pc, #80]	@ (8002844 <xTraceHeaderInitialize+0x114>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	4b13      	ldr	r3, [pc, #76]	@ (8002844 <xTraceHeaderInitialize+0x114>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80027fe:	60da      	str	r2, [r3, #12]
#endif
	
	pxHeader->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 8002800:	4b10      	ldr	r3, [pc, #64]	@ (8002844 <xTraceHeaderInitialize+0x114>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2200      	movs	r2, #0
 8002806:	611a      	str	r2, [r3, #16]

	/* Lowest bit used for TRC_IRQ_PRIORITY_ORDER */
	pxHeader->uiOptions = (((uint32_t)(TRC_IRQ_PRIORITY_ORDER)) << 0);
 8002808:	4b0e      	ldr	r3, [pc, #56]	@ (8002844 <xTraceHeaderInitialize+0x114>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2200      	movs	r2, #0
 800280e:	609a      	str	r2, [r3, #8]

	/* 3rd bit used for TRC_CFG_TEST_MODE */
	pxHeader->uiOptions |= (((uint32_t)(TRC_CFG_TEST_MODE)) << 2);
 8002810:	4b0c      	ldr	r3, [pc, #48]	@ (8002844 <xTraceHeaderInitialize+0x114>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <xTraceHeaderInitialize+0x114>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6892      	ldr	r2, [r2, #8]
 800281a:	609a      	str	r2, [r3, #8]

	/* 4th bit used for 64-bit*/
	if (prvIs64bit()) /* Call helper function to avoid "unreachable code" */
 800281c:	f000 f8b6 	bl	800298c <prvIs64bit>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d007      	beq.n	8002836 <xTraceHeaderInitialize+0x106>
	{
		pxHeader->uiOptions |= (1 << 3);
 8002826:	4b07      	ldr	r3, [pc, #28]	@ (8002844 <xTraceHeaderInitialize+0x114>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	4b05      	ldr	r3, [pc, #20]	@ (8002844 <xTraceHeaderInitialize+0x114>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f042 0208 	orr.w	r2, r2, #8
 8002834:	609a      	str	r2, [r3, #8]
	}

	return TRC_SUCCESS;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	0800c3ec 	.word	0x0800c3ec
 8002844:	20001ee8 	.word	0x20001ee8
 8002848:	50534600 	.word	0x50534600

0800284c <xTraceEnable>:

traceResult xTraceEnable(uint32_t uiStartOption)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
	TraceCommand_t xCommand = { 0 };
 8002854:	f107 0310 	add.w	r3, r7, #16
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
	int32_t iBytes;

	if (xTraceInitialize() == TRC_FAIL)
 800285e:	f7ff fe7f 	bl	8002560 <xTraceInitialize>
 8002862:	4603      	mov	r3, r0
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <xTraceEnable+0x20>
	{
		return TRC_FAIL;
 8002868:	2301      	movs	r3, #1
 800286a:	e03f      	b.n	80028ec <xTraceEnable+0xa0>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceStreamPortOnEnable(uiStartOption) == TRC_FAIL)
 800286c:	2300      	movs	r3, #0
 800286e:	2b01      	cmp	r3, #1
 8002870:	d101      	bne.n	8002876 <xTraceEnable+0x2a>
	{
		return TRC_FAIL;
 8002872:	2301      	movs	r3, #1
 8002874:	e03a      	b.n	80028ec <xTraceEnable+0xa0>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceKernelPortEnable() == TRC_FAIL)
 8002876:	f7ff f84b 	bl	8001910 <xTraceKernelPortEnable>
 800287a:	4603      	mov	r3, r0
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <xTraceEnable+0x38>
	{
		return TRC_FAIL;
 8002880:	2301      	movs	r3, #1
 8002882:	e033      	b.n	80028ec <xTraceEnable+0xa0>
	}

	if (uiStartOption == TRC_START_AWAIT_HOST)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d11d      	bne.n	80028c6 <xTraceEnable+0x7a>
	{
		/* We keep trying to read commands from host until the recorder has been started */
		do
		{
			iBytes = 0;
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]

			if (xTraceStreamPortReadData(&xCommand, sizeof(TraceCommand_t), (int32_t*)&iBytes) == TRC_FAIL)
 800288e:	2300      	movs	r3, #0
 8002890:	2b01      	cmp	r3, #1
 8002892:	d102      	bne.n	800289a <xTraceEnable+0x4e>
			{
				(void)xTraceWarning(TRC_WARNING_STREAM_PORT_READ);
 8002894:	200b      	movs	r0, #11
 8002896:	f7fe f971 	bl	8000b7c <xTraceWarning>
			}

			if ((uint32_t)iBytes == sizeof(TraceCommand_t))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2b08      	cmp	r3, #8
 800289e:	d10c      	bne.n	80028ba <xTraceEnable+0x6e>
			{
				if (prvIsValidCommand(&xCommand) != 0)
 80028a0:	f107 0310 	add.w	r3, r7, #16
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 f961 	bl	8002b6c <prvIsValidCommand>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d004      	beq.n	80028ba <xTraceEnable+0x6e>
				{
					prvProcessCommand(&xCommand);
 80028b0:	f107 0310 	add.w	r3, r7, #16
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 f994 	bl	8002be2 <prvProcessCommand>
				}
			}
		} while (pxTraceRecorderData->uiRecorderEnabled == 0u);
 80028ba:	4b0e      	ldr	r3, [pc, #56]	@ (80028f4 <xTraceEnable+0xa8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0e2      	beq.n	800288a <xTraceEnable+0x3e>
 80028c4:	e011      	b.n	80028ea <xTraceEnable+0x9e>
	}
	else if (uiStartOption == (uint32_t)(TRC_START))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d109      	bne.n	80028e0 <xTraceEnable+0x94>
	{
		/* We start streaming directly - this assumes that the host interface is ready! */
		xCommand.cmdCode = CMD_SET_ACTIVE;
 80028cc:	2301      	movs	r3, #1
 80028ce:	743b      	strb	r3, [r7, #16]
		xCommand.param1 = 1u;
 80028d0:	2301      	movs	r3, #1
 80028d2:	747b      	strb	r3, [r7, #17]
		prvProcessCommand(&xCommand);
 80028d4:	f107 0310 	add.w	r3, r7, #16
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 f982 	bl	8002be2 <prvProcessCommand>
 80028de:	e004      	b.n	80028ea <xTraceEnable+0x9e>
	}
	else if (uiStartOption == TRC_START_FROM_HOST)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <xTraceEnable+0x9e>
	{
		/* We prepare the system to receive commands from host, but let system resume execution until that happens */
	}
	else
	{
		return TRC_FAIL;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <xTraceEnable+0xa0>
	}

	return TRC_SUCCESS;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20001ee4 	.word	0x20001ee4

080028f8 <xTraceDisable>:

traceResult xTraceDisable(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
	prvSetRecorderDisabled();
 80028fc:	f000 f89a 	bl	8002a34 <prvSetRecorderDisabled>

	(void)xTraceStreamPortOnDisable();
	
	return TRC_SUCCESS;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <xTraceTzCtrl>:
	
	return TRC_SUCCESS;
}

traceResult xTraceTzCtrl(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
	TraceCommand_t xCommand = { 0 };
 800290e:	f107 0308 	add.w	r3, r7, #8
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	605a      	str	r2, [r3, #4]
	int32_t iRxBytes;
	
	do
	{
		/* Listen for new commands */
		iRxBytes = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	607b      	str	r3, [r7, #4]
		if (xTraceStreamPortReadData(&xCommand, sizeof(TraceCommand_t), &iRxBytes) == TRC_FAIL)
 800291c:	2300      	movs	r3, #0
 800291e:	2b01      	cmp	r3, #1
 8002920:	d103      	bne.n	800292a <xTraceTzCtrl+0x22>
		{
			/* The connection has failed, stop tracing */
			(void)xTraceDisable();
 8002922:	f7ff ffe9 	bl	80028f8 <xTraceDisable>

			return TRC_FAIL;
 8002926:	2301      	movs	r3, #1
 8002928:	e027      	b.n	800297a <xTraceTzCtrl+0x72>
		}

		if ((uint32_t)iRxBytes == sizeof(TraceCommand_t))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b08      	cmp	r3, #8
 800292e:	d10c      	bne.n	800294a <xTraceTzCtrl+0x42>
		{
			if (prvIsValidCommand(&xCommand) != 0)
 8002930:	f107 0308 	add.w	r3, r7, #8
 8002934:	4618      	mov	r0, r3
 8002936:	f000 f919 	bl	8002b6c <prvIsValidCommand>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d004      	beq.n	800294a <xTraceTzCtrl+0x42>
			{
				prvProcessCommand(&xCommand); /* Start or Stop currently... */
 8002940:	f107 0308 	add.w	r3, r7, #8
 8002944:	4618      	mov	r0, r3
 8002946:	f000 f94c 	bl	8002be2 <prvProcessCommand>
			}
		}

		if (xTraceIsRecorderEnabled())
 800294a:	4b0e      	ldr	r3, [pc, #56]	@ (8002984 <xTraceTzCtrl+0x7c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
		}

		/* If there was data sent or received (bytes != 0), loop around and repeat, if there is more data to send or receive.
		Otherwise, step out of this loop and sleep for a while. */

	} while (iRxBytes > 0);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	dcde      	bgt.n	8002918 <xTraceTzCtrl+0x10>

	if (xTraceIsRecorderEnabled())
 800295a:	4b0a      	ldr	r3, [pc, #40]	@ (8002984 <xTraceTzCtrl+0x7c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d008      	beq.n	8002978 <xTraceTzCtrl+0x70>
 8002966:	4b08      	ldr	r3, [pc, #32]	@ (8002988 <xTraceTzCtrl+0x80>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <xTraceTzCtrl+0x70>
	{
		(void)xTraceDiagnosticsCheckStatus();
 8002970:	f7fd fee4 	bl	800073c <xTraceDiagnosticsCheckStatus>
		(void)xTraceStackMonitorReport();
 8002974:	f7ff fd70 	bl	8002458 <xTraceStackMonitorReport>
	}

	return TRC_SUCCESS;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20001eec 	.word	0x20001eec
 8002988:	20001ee4 	.word	0x20001ee4

0800298c <prvIs64bit>:
/******************************************************************************/
/*** INTERNAL FUNCTIONS *******************************************************/
/******************************************************************************/

static TraceUnsignedBaseType_t prvIs64bit(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
	return sizeof(TraceUnsignedBaseType_t) == 8;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <prvSetRecorderEnabled>:

/* Internal function for starting/stopping the recorder. */
static void prvSetRecorderEnabled(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
	TraceUnsignedBaseType_t uxTimestampFrequency = 0u;
 80029a2:	2300      	movs	r3, #0
 80029a4:	607b      	str	r3, [r7, #4]
	uint32_t uiTimestampPeriod = 0u;
 80029a6:	2300      	movs	r3, #0
 80029a8:	603b      	str	r3, [r7, #0]
	
	TRACE_ALLOC_CRITICAL_SECTION();
	
	if (pxTraceRecorderData->uiRecorderEnabled == 1u)
 80029aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002a28 <prvSetRecorderEnabled+0x8c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d034      	beq.n	8002a1e <prvSetRecorderEnabled+0x82>
	{
		return;
	}

	(void)xTraceTimestampGetFrequency(&uxTimestampFrequency);
 80029b4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a2c <prvSetRecorderEnabled+0x90>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	607b      	str	r3, [r7, #4]
	/* If not overridden using xTraceTimestampSetFrequency(...), use default value */
	if (uxTimestampFrequency == 0u)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d104      	bne.n	80029cc <prvSetRecorderEnabled+0x30>
	{
		(void)xTraceTimestampSetFrequency((TraceUnsignedBaseType_t)(TRC_HWTC_FREQ_HZ));
 80029c2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a2c <prvSetRecorderEnabled+0x90>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002a30 <prvSetRecorderEnabled+0x94>)
 80029c8:	6812      	ldr	r2, [r2, #0]
 80029ca:	609a      	str	r2, [r3, #8]
	}

	(void)xTraceTimestampGetPeriod(&uiTimestampPeriod);
 80029cc:	4b17      	ldr	r3, [pc, #92]	@ (8002a2c <prvSetRecorderEnabled+0x90>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	603b      	str	r3, [r7, #0]
	/* If not overridden using xTraceTimestampSetPeriod(...), use default value */
	if (uiTimestampPeriod == 0u)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d103      	bne.n	80029e2 <prvSetRecorderEnabled+0x46>
	{
		(void)xTraceTimestampSetPeriod((TraceUnsignedBaseType_t)(TRC_HWTC_PERIOD));
 80029da:	4b14      	ldr	r3, [pc, #80]	@ (8002a2c <prvSetRecorderEnabled+0x90>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2200      	movs	r2, #0
 80029e0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029e2:	f3ef 8310 	mrs	r3, PRIMASK
 80029e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80029e8:	68bb      	ldr	r3, [r7, #8]
	}

	TRACE_ENTER_CRITICAL_SECTION();
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	2301      	movs	r3, #1
 80029ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f383 8810 	msr	PRIMASK, r3
}
 80029f6:	bf00      	nop

	/* If the internal event buffer is used, we must clear it */
	(void)xTraceInternalEventBufferClear();
	
	(void)xTraceStreamPortOnTraceBegin();
 80029f8:	f7fd fe06 	bl	8000608 <xTraceStreamPortOnTraceBegin>

	prvTraceStoreHeader();
	prvTraceStoreTimestampInfo();
	prvTraceStoreEntryTable();
	prvTraceStoreStartEvent();
 80029fc:	f000 f840 	bl	8002a80 <prvTraceStoreStartEvent>

	pxTraceRecorderData->uiSessionCounter++;
 8002a00:	4b09      	ldr	r3, [pc, #36]	@ (8002a28 <prvSetRecorderEnabled+0x8c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	3201      	adds	r2, #1
 8002a08:	601a      	str	r2, [r3, #0]

	pxTraceRecorderData->uiRecorderEnabled = 1u;
 8002a0a:	4b07      	ldr	r3, [pc, #28]	@ (8002a28 <prvSetRecorderEnabled+0x8c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f383 8810 	msr	PRIMASK, r3
}
 8002a1c:	e000      	b.n	8002a20 <prvSetRecorderEnabled+0x84>
		return;
 8002a1e:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();
}
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20001ee4 	.word	0x20001ee4
 8002a2c:	20001ef4 	.word	0x20001ef4
 8002a30:	20000000 	.word	0x20000000

08002a34 <prvSetRecorderDisabled>:

static void prvSetRecorderDisabled(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
	TRACE_ALLOC_CRITICAL_SECTION();

	if (pxTraceRecorderData->uiRecorderEnabled == 0u)
 8002a3a:	4b10      	ldr	r3, [pc, #64]	@ (8002a7c <prvSetRecorderDisabled+0x48>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d014      	beq.n	8002a6e <prvSetRecorderDisabled+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a44:	f3ef 8310 	mrs	r3, PRIMASK
 8002a48:	603b      	str	r3, [r7, #0]
  return(result);
 8002a4a:	683b      	ldr	r3, [r7, #0]
	{
		return;
	}

	TRACE_ENTER_CRITICAL_SECTION();
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	2301      	movs	r3, #1
 8002a50:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f383 8810 	msr	PRIMASK, r3
}
 8002a58:	bf00      	nop
	
	pxTraceRecorderData->uiRecorderEnabled = 0u;
 8002a5a:	4b08      	ldr	r3, [pc, #32]	@ (8002a7c <prvSetRecorderDisabled+0x48>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	f383 8810 	msr	PRIMASK, r3
}
 8002a6c:	e000      	b.n	8002a70 <prvSetRecorderDisabled+0x3c>
		return;
 8002a6e:	bf00      	nop

	(void)xTraceStreamPortOnTraceEnd();

	TRACE_EXIT_CRITICAL_SECTION();
}
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	20001ee4 	.word	0x20001ee4

08002a80 <prvTraceStoreStartEvent>:
	}
}
#endif /* (TRC_EXTERNAL_BUFFERS == 0) */

static void prvTraceStoreStartEvent(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
	TraceEventHandle_t xEventHandle = 0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60bb      	str	r3, [r7, #8]
	void* pvCurrentTask = (void*)0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	607b      	str	r3, [r7, #4]
	uint32_t i;

	if (xTraceEventBeginOffline(PSF_EVENT_TRACE_START, sizeof(TraceUnsignedBaseType_t) * (TRC_CFG_CORE_COUNT), &xEventHandle) == TRC_SUCCESS)
 8002a8e:	f107 0308 	add.w	r3, r7, #8
 8002a92:	4619      	mov	r1, r3
 8002a94:	200c      	movs	r0, #12
 8002a96:	f7fe fb8f 	bl	80011b8 <xTraceEventBeginRawOffline>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d133      	bne.n	8002b08 <prvTraceStoreStartEvent+0x88>
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	3b08      	subs	r3, #8
 8002aa6:	089b      	lsrs	r3, r3, #2
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	031b      	lsls	r3, r3, #12
 8002aac:	b21b      	sxth	r3, r3
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	b21a      	sxth	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	b292      	uxth	r2, r2
 8002aba:	801a      	strh	r2, [r3, #0]
 8002abc:	4b27      	ldr	r3, [pc, #156]	@ (8002b5c <prvTraceStoreStartEvent+0xdc>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	b292      	uxth	r2, r2
 8002ac8:	805a      	strh	r2, [r3, #2]
 8002aca:	4a25      	ldr	r2, [pc, #148]	@ (8002b60 <prvTraceStoreStartEvent+0xe0>)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6812      	ldr	r2, [r2, #0]
 8002ad2:	605a      	str	r2, [r3, #4]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	4b22      	ldr	r3, [pc, #136]	@ (8002b64 <prvTraceStoreStartEvent+0xe4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d204      	bcs.n	8002aee <prvTraceStoreStartEvent+0x6e>
 8002ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b64 <prvTraceStoreStartEvent+0xe4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	3201      	adds	r2, #1
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	4b1c      	ldr	r3, [pc, #112]	@ (8002b64 <prvTraceStoreStartEvent+0xe4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6852      	ldr	r2, [r2, #4]
 8002af8:	615a      	str	r2, [r3, #20]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3208      	adds	r2, #8
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	2301      	movs	r3, #1
 8002b06:	e000      	b.n	8002b0a <prvTraceStoreStartEvent+0x8a>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d021      	beq.n	8002b52 <prvTraceStoreStartEvent+0xd2>
	{
		for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	e017      	b.n	8002b44 <prvTraceStoreStartEvent+0xc4>
		{

			(void)xTraceTaskGetCurrentOnCore(i, &pvCurrentTask);
 8002b14:	4b14      	ldr	r3, [pc, #80]	@ (8002b68 <prvTraceStoreStartEvent+0xe8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b1e:	607b      	str	r3, [r7, #4]
			(void)xTraceEventAddUnsignedBaseType(xEventHandle, (TraceUnsignedBaseType_t)pvCurrentTask);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f023 0303 	bic.w	r3, r3, #3
 8002b2e:	4413      	add	r3, r2
 8002b30:	460a      	mov	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	3204      	adds	r2, #4
 8002b3c:	609a      	str	r2, [r3, #8]
		for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	3301      	adds	r3, #1
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0e4      	beq.n	8002b14 <prvTraceStoreStartEvent+0x94>
		}
		(void)xTraceEventEndOffline(xEventHandle);
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fe fb9d 	bl	800128c <xTraceEventEndOffline>
	}
}
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000098 	.word	0x20000098
 8002b60:	e0001004 	.word	0xe0001004
 8002b64:	20001ef4 	.word	0x20001ef4
 8002b68:	20001ef0 	.word	0x20001ef0

08002b6c <prvIsValidCommand>:

/* Checks if the provided command is a valid command */
static int32_t prvIsValidCommand(const TraceCommand_t* const cmd)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  	uint16_t checksum = (uint16_t)0xFFFFU - (uint16_t)(unsigned char)(cmd->cmdCode + /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	781a      	ldrb	r2, [r3, #0]
												cmd->param1 +
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	785b      	ldrb	r3, [r3, #1]
  	uint16_t checksum = (uint16_t)0xFFFFU - (uint16_t)(unsigned char)(cmd->cmdCode + /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8002b7c:	4413      	add	r3, r2
 8002b7e:	b2da      	uxtb	r2, r3
												cmd->param2 +
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	789b      	ldrb	r3, [r3, #2]
												cmd->param1 +
 8002b84:	4413      	add	r3, r2
 8002b86:	b2da      	uxtb	r2, r3
												cmd->param3 +
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	78db      	ldrb	r3, [r3, #3]
												cmd->param2 +
 8002b8c:	4413      	add	r3, r2
 8002b8e:	b2da      	uxtb	r2, r3
												cmd->param4 +
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	791b      	ldrb	r3, [r3, #4]
												cmd->param3 +
 8002b94:	4413      	add	r3, r2
 8002b96:	b2da      	uxtb	r2, r3
												cmd->param5);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	795b      	ldrb	r3, [r3, #5]
  	uint16_t checksum = (uint16_t)0xFFFFU - (uint16_t)(unsigned char)(cmd->cmdCode + /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8002b9c:	4413      	add	r3, r2
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	81fb      	strh	r3, [r7, #14]

	if (cmd->checksumMSB != (unsigned char)(checksum >> 8)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	79da      	ldrb	r2, [r3, #7]
 8002ba8:	89fb      	ldrh	r3, [r7, #14]
 8002baa:	0a1b      	lsrs	r3, r3, #8
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <prvIsValidCommand+0x4c>
	{
		return 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	e00e      	b.n	8002bd6 <prvIsValidCommand+0x6a>
	}

	if (cmd->checksumLSB != (unsigned char)(checksum & 0xFFU)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	799a      	ldrb	r2, [r3, #6]
 8002bbc:	89fb      	ldrh	r3, [r7, #14]
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d001      	beq.n	8002bc8 <prvIsValidCommand+0x5c>
	{
		return 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	e006      	b.n	8002bd6 <prvIsValidCommand+0x6a>
	}

	if (cmd->cmdCode > (unsigned char)(CMD_LAST_COMMAND)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d901      	bls.n	8002bd4 <prvIsValidCommand+0x68>
	{
		return 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e000      	b.n	8002bd6 <prvIsValidCommand+0x6a>
	}

	return 1;
 8002bd4:	2301      	movs	r3, #1
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <prvProcessCommand>:

/* Executed the received command (Start or Stop) */
static void prvProcessCommand(const TraceCommand_t* const cmd)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  	switch(cmd->cmdCode)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d109      	bne.n	8002c06 <prvProcessCommand+0x24>
	{
		case CMD_SET_ACTIVE:
			if (cmd->param1 == 1u)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	785b      	ldrb	r3, [r3, #1]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d102      	bne.n	8002c00 <prvProcessCommand+0x1e>
			{
				prvSetRecorderEnabled();
 8002bfa:	f7ff fecf 	bl	800299c <prvSetRecorderEnabled>
			}
			else
			{
				prvSetRecorderDisabled();
			}
		  	break;
 8002bfe:	e003      	b.n	8002c08 <prvProcessCommand+0x26>
				prvSetRecorderDisabled();
 8002c00:	f7ff ff18 	bl	8002a34 <prvSetRecorderDisabled>
		  	break;
 8002c04:	e000      	b.n	8002c08 <prvProcessCommand+0x26>
		default:
		  	break;
 8002c06:	bf00      	nop
	}
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <xTraceStringRegister>:

#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceStringRegister(const char* szString, TraceStringHandle_t *pString)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
	TraceEntryHandle_t xEntryHandle;
	TraceEventHandle_t xEventHandle = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
	int32_t i;
	uint32_t uiLength, uiValue = 0u;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
	
	/* This should never fail */
	TRC_ASSERT(pString != (void*)0);

	/* We need to check this */
	if (xTraceEntryCreate(&xEntryHandle) == TRC_FAIL)
 8002c22:	f107 0314 	add.w	r3, r7, #20
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fd fe34 	bl	8000894 <xTraceEntryCreate>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <xTraceStringRegister+0x26>
	{
		return TRC_FAIL;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e0a3      	b.n	8002d7e <xTraceStringRegister+0x16e>
	}

	for (i = 0; (szString[i] != (char)0) && (i < (int32_t)(TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE)); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	e002      	b.n	8002c42 <xTraceStringRegister+0x32>
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	61fb      	str	r3, [r7, #28]
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	4413      	add	r3, r2
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d002      	beq.n	8002c54 <xTraceStringRegister+0x44>
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	2b17      	cmp	r3, #23
 8002c52:	ddf3      	ble.n	8002c3c <xTraceStringRegister+0x2c>

	uiLength = (uint32_t)i;
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	61bb      	str	r3, [r7, #24]

	/* The address to the available symbol table slot is the address we use */
	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetSymbol(xEntryHandle, szString, uiLength) == TRC_SUCCESS);
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fd feec 	bl	8000a3c <xTraceEntrySetSymbol>

	*pString = (TraceStringHandle_t)xEntryHandle;
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	601a      	str	r2, [r3, #0]

	/* We need to check this */
	if (xTraceEventBegin(PSF_EVENT_OBJ_NAME, sizeof(void*) + uiLength, &xEventHandle) == TRC_SUCCESS)
 8002c6a:	4b47      	ldr	r3, [pc, #284]	@ (8002d88 <xTraceStringRegister+0x178>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d045      	beq.n	8002d02 <xTraceStringRegister+0xf2>
 8002c76:	4b45      	ldr	r3, [pc, #276]	@ (8002d8c <xTraceStringRegister+0x17c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d040      	beq.n	8002d02 <xTraceStringRegister+0xf2>
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	330c      	adds	r3, #12
 8002c84:	f107 0210 	add.w	r2, r7, #16
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fe fa94 	bl	80011b8 <xTraceEventBeginRawOffline>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d133      	bne.n	8002cfe <xTraceStringRegister+0xee>
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	3b08      	subs	r3, #8
 8002c9c:	089b      	lsrs	r3, r3, #2
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	031b      	lsls	r3, r3, #12
 8002ca2:	b21b      	sxth	r3, r3
 8002ca4:	f043 0303 	orr.w	r3, r3, #3
 8002ca8:	b21a      	sxth	r2, r3
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	b292      	uxth	r2, r2
 8002cb0:	801a      	strh	r2, [r3, #0]
 8002cb2:	4b37      	ldr	r3, [pc, #220]	@ (8002d90 <xTraceStringRegister+0x180>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	b292      	uxth	r2, r2
 8002cbe:	805a      	strh	r2, [r3, #2]
 8002cc0:	4a34      	ldr	r2, [pc, #208]	@ (8002d94 <xTraceStringRegister+0x184>)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	4b31      	ldr	r3, [pc, #196]	@ (8002d98 <xTraceStringRegister+0x188>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d204      	bcs.n	8002ce4 <xTraceStringRegister+0xd4>
 8002cda:	4b2f      	ldr	r3, [pc, #188]	@ (8002d98 <xTraceStringRegister+0x188>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	3201      	adds	r2, #1
 8002ce2:	60da      	str	r2, [r3, #12]
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8002d98 <xTraceStringRegister+0x188>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6852      	ldr	r2, [r2, #4]
 8002cee:	615a      	str	r2, [r3, #20]
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	3208      	adds	r2, #8
 8002cf8:	609a      	str	r2, [r3, #8]
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e002      	b.n	8002d04 <xTraceStringRegister+0xf4>
 8002cfe:	2300      	movs	r3, #0
 8002d00:	e000      	b.n	8002d04 <xTraceStringRegister+0xf4>
 8002d02:	2300      	movs	r3, #0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d039      	beq.n	8002d7c <xTraceStringRegister+0x16c>
	{
		(void)xTraceEventAddPointer(xEventHandle, (void*)xEntryHandle);
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f023 0303 	bic.w	r3, r3, #3
 8002d14:	4413      	add	r3, r2
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	3204      	adds	r2, #4
 8002d22:	609a      	str	r2, [r3, #8]
		(void)xTraceEventAddString(xEventHandle, szString, uiLength);
 8002d24:	6938      	ldr	r0, [r7, #16]
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	3303      	adds	r3, #3
 8002d2a:	089b      	lsrs	r3, r3, #2
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	f7fe fade 	bl	80012f0 <xTraceEventAddData>

		/* Check if we can truncate */
		(void)xTraceEventPayloadRemaining(xEventHandle, &uiValue);
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	60fb      	str	r3, [r7, #12]
		if (uiValue > 0u)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00b      	beq.n	8002d5e <xTraceStringRegister+0x14e>
		{
			(void)xTraceEventAdd8(xEventHandle, 0u);
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	4413      	add	r3, r2
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	3201      	adds	r2, #1
 8002d5c:	609a      	str	r2, [r3, #8]
		}
		
		(void)xTraceEventEnd(xEventHandle); /*cstat !MISRAC2012-Rule-17.7 Suppress ignored return value check (inside macro)*/
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d88 <xTraceStringRegister+0x178>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d008      	beq.n	8002d7c <xTraceStringRegister+0x16c>
 8002d6a:	4b08      	ldr	r3, [pc, #32]	@ (8002d8c <xTraceStringRegister+0x17c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <xTraceStringRegister+0x16c>
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fe fa88 	bl	800128c <xTraceEventEndOffline>
	}

	return TRC_SUCCESS;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3720      	adds	r7, #32
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20001eec 	.word	0x20001eec
 8002d8c:	20001ee4 	.word	0x20001ee4
 8002d90:	20000098 	.word	0x20000098
 8002d94:	e0001004 	.word	0xe0001004
 8002d98:	20001ef4 	.word	0x20001ef4

08002d9c <xTraceRegisterString>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
TraceStringHandle_t xTraceRegisterString(const char *name)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
	TraceStringHandle_t trcStr = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60fb      	str	r3, [r7, #12]
	(void)xTraceStringRegister(name, &trcStr);
 8002da8:	f107 030c 	add.w	r3, r7, #12
 8002dac:	4619      	mov	r1, r3
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff ff2e 	bl	8002c10 <xTraceStringRegister>

	return trcStr;
 8002db4:	68fb      	ldr	r3, [r7, #12]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <xTraceTaskInitialize>:
#define TRC_TASK_STATE_INDEX_PRIORITY		0u

TraceTaskData_t* pxTraceTaskData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceTaskInitialize(TraceTaskData_t *pxBuffer)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
	int32_t i;

	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceTaskData= pxBuffer;
 8002dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8002e08 <xTraceTaskInitialize+0x48>)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6013      	str	r3, [r2, #0]

	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	e008      	b.n	8002de6 <xTraceTaskInitialize+0x26>
	{
		pxTraceTaskData->coreTasks[i] = TRACE_HANDLE_NO_TASK;  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002e08 <xTraceTaskInitialize+0x48>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	2102      	movs	r1, #2
 8002ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	3301      	adds	r3, #1
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	ddf3      	ble.n	8002dd4 <xTraceTaskInitialize+0x14>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_TASK);
 8002dec:	4b07      	ldr	r3, [pc, #28]	@ (8002e0c <xTraceTaskInitialize+0x4c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002df4:	4a05      	ldr	r2, [pc, #20]	@ (8002e0c <xTraceTaskInitialize+0x4c>)
 8002df6:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	20001ef0 	.word	0x20001ef0
 8002e0c:	20001eec 	.word	0x20001eec

08002e10 <xTraceTaskSwitch>:

	return TRC_SUCCESS;
}

traceResult xTraceTaskSwitch(void *pvTask, TraceUnsignedBaseType_t uxPriority)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
	traceResult xResult = TRC_FAIL;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	61fb      	str	r3, [r7, #28]
	TRACE_ALLOC_CRITICAL_SECTION();
	
	(void)pvTask;
	(void)uxPriority;

	if (!xTraceIsRecorderInitialized())
 8002e1e:	4b21      	ldr	r3, [pc, #132]	@ (8002ea4 <xTraceTaskSwitch+0x94>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <xTraceTaskSwitch+0x1e>
	{
		return xResult;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	e035      	b.n	8002e9a <xTraceTaskSwitch+0x8a>
	}

	if (!xTraceIsRecorderEnabled())
 8002e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea4 <xTraceTaskSwitch+0x94>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d004      	beq.n	8002e44 <xTraceTaskSwitch+0x34>
 8002e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea8 <xTraceTaskSwitch+0x98>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d105      	bne.n	8002e50 <xTraceTaskSwitch+0x40>
	{
		/* Make sure we store the current task, even while recorder isn't enabled */
		xTraceTaskSetCurrent(pvTask);
 8002e44:	4b19      	ldr	r3, [pc, #100]	@ (8002eac <xTraceTaskSwitch+0x9c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	601a      	str	r2, [r3, #0]

		return xResult;
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	e024      	b.n	8002e9a <xTraceTaskSwitch+0x8a>
	}

	xTraceStateSet(TRC_STATE_IN_TASKSWITCH);
 8002e50:	4b15      	ldr	r3, [pc, #84]	@ (8002ea8 <xTraceTaskSwitch+0x98>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2201      	movs	r2, #1
 8002e56:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e58:	f3ef 8310 	mrs	r3, PRIMASK
 8002e5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e5e:	68fb      	ldr	r3, [r7, #12]

	TRACE_ENTER_CRITICAL_SECTION();
 8002e60:	61bb      	str	r3, [r7, #24]
 8002e62:	2301      	movs	r3, #1
 8002e64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f383 8810 	msr	PRIMASK, r3
}
 8002e6c:	bf00      	nop
#if (TRC_KERNEL_PORT_KERNEL_CAN_SWITCH_TO_SAME_TASK == 1)
	xTraceTaskGetCurrent(&pvCurrent);
	if (pvCurrent != pvTask)
#endif
	{
		xTraceTaskSetCurrent(pvTask);
 8002e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002eac <xTraceTaskSwitch+0x9c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	601a      	str	r2, [r3, #0]

		xResult = xTraceEventCreate2(PSF_EVENT_TASK_ACTIVATE, (TraceUnsignedBaseType_t)pvTask, uxPriority);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	2037      	movs	r0, #55	@ 0x37
 8002e7e:	f7fe f88f 	bl	8000fa0 <xTraceEventCreate2>
 8002e82:	61f8      	str	r0, [r7, #28]
	}

	xTraceStateSet(TRC_STATE_IN_APPLICATION);
 8002e84:	4b08      	ldr	r3, [pc, #32]	@ (8002ea8 <xTraceTaskSwitch+0x98>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2202      	movs	r2, #2
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f383 8810 	msr	PRIMASK, r3
}
 8002e96:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return xResult;
 8002e98:	69fb      	ldr	r3, [r7, #28]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3720      	adds	r7, #32
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20001eec 	.word	0x20001eec
 8002ea8:	20001ee4 	.word	0x20001ee4
 8002eac:	20001ef0 	.word	0x20001ef0

08002eb0 <xTraceTimestampInitialize>:
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceTimestampData_t *pxTraceTimestamp TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceTimestampInitialize(TraceTimestampData_t *pxBuffer)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceTimestamp = pxBuffer;
 8002eb8:	4a16      	ldr	r2, [pc, #88]	@ (8002f14 <xTraceTimestampInitialize+0x64>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6013      	str	r3, [r2, #0]

	/* These will be set when tracing is enabled */
	pxTraceTimestamp->frequency = 0u;
 8002ebe:	4b15      	ldr	r3, [pc, #84]	@ (8002f14 <xTraceTimestampInitialize+0x64>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	609a      	str	r2, [r3, #8]
	pxTraceTimestamp->period = 0u;
 8002ec6:	4b13      	ldr	r3, [pc, #76]	@ (8002f14 <xTraceTimestampInitialize+0x64>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	605a      	str	r2, [r3, #4]

	pxTraceTimestamp->osTickHz = TRC_TICK_RATE_HZ;
 8002ece:	4b11      	ldr	r3, [pc, #68]	@ (8002f14 <xTraceTimestampInitialize+0x64>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ed6:	611a      	str	r2, [r3, #16]
	pxTraceTimestamp->osTickCount = 0u;
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f14 <xTraceTimestampInitialize+0x64>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2200      	movs	r2, #0
 8002ede:	619a      	str	r2, [r3, #24]
	pxTraceTimestamp->wraparounds = 0u;
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f14 <xTraceTimestampInitialize+0x64>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	60da      	str	r2, [r3, #12]
	pxTraceTimestamp->type = TRC_HWTC_TYPE;
 8002ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8002f14 <xTraceTimestampInitialize+0x64>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2201      	movs	r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

#if (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR || TRC_HWTC_TYPE == TRC_CUSTOM_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_INCR)
	pxTraceTimestamp->latestTimestamp = 0u;
 8002ef0:	4b08      	ldr	r3, [pc, #32]	@ (8002f14 <xTraceTimestampInitialize+0x64>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	615a      	str	r2, [r3, #20]
#elif (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR || TRC_HWTC_TYPE == TRC_CUSTOM_TIMER_DECR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	pxTraceTimestamp->latestTimestamp = pxTraceTimestamp->period - 1u;
#endif

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_TIMESTAMP);
 8002ef8:	4b07      	ldr	r3, [pc, #28]	@ (8002f18 <xTraceTimestampInitialize+0x68>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f00:	4a05      	ldr	r2, [pc, #20]	@ (8002f18 <xTraceTimestampInitialize+0x68>)
 8002f02:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	20001ef4 	.word	0x20001ef4
 8002f18:	20001eec 	.word	0x20001eec

08002f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f20:	f001 f929 	bl	8004176 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f24:	f000 f83c 	bl	8002fa0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SystemCoreClockUpdate();
 8002f28:	f001 f814 	bl	8003f54 <SystemCoreClockUpdate>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f2c:	f000 fa20 	bl	8003370 <MX_GPIO_Init>
  MX_DMA_Init();
 8002f30:	f000 fa00 	bl	8003334 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8002f34:	f000 f896 	bl	8003064 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8002f38:	f000 f8cc 	bl	80030d4 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8002f3c:	f000 f908 	bl	8003150 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8002f40:	f000 f92c 	bl	800319c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8002f44:	f000 f968 	bl	8003218 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002f48:	f000 f996 	bl	8003278 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002f4c:	f000 f9c4 	bl	80032d8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  // Initializing and enabling the tracing
  xTraceEnable(TRC_START);
 8002f50:	2001      	movs	r0, #1
 8002f52:	f7ff fc7b 	bl	800284c <xTraceEnable>

  // Initializing the trace wrapper module (proof-of-concept test)
  init_cti_trace();
 8002f56:	f001 f8ab 	bl	80040b0 <init_cti_trace>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002f5a:	f005 fe65 	bl	8008c28 <osKernelInitialize>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */

  /* USER CODE BEGIN RTOS_THREADS */
  BG_TaskHandle = osThreadNew(StartBGTask, NULL, &BG_Task_attributes);
 8002f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f88 <main+0x6c>)
 8002f60:	2100      	movs	r1, #0
 8002f62:	480a      	ldr	r0, [pc, #40]	@ (8002f8c <main+0x70>)
 8002f64:	f005 feaa 	bl	8008cbc <osThreadNew>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	4a09      	ldr	r2, [pc, #36]	@ (8002f90 <main+0x74>)
 8002f6c:	6013      	str	r3, [r2, #0]
  TX_TaskHandle = osThreadNew(StartTXTask, NULL, &TX_Task_attributes);
 8002f6e:	4a09      	ldr	r2, [pc, #36]	@ (8002f94 <main+0x78>)
 8002f70:	2100      	movs	r1, #0
 8002f72:	4809      	ldr	r0, [pc, #36]	@ (8002f98 <main+0x7c>)
 8002f74:	f005 fea2 	bl	8008cbc <osThreadNew>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	4a08      	ldr	r2, [pc, #32]	@ (8002f9c <main+0x80>)
 8002f7c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002f7e:	f005 fe77 	bl	8008c70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002f82:	bf00      	nop
 8002f84:	e7fd      	b.n	8002f82 <main+0x66>
 8002f86:	bf00      	nop
 8002f88:	0800c47c 	.word	0x0800c47c
 8002f8c:	0800373d 	.word	0x0800373d
 8002f90:	20002694 	.word	0x20002694
 8002f94:	0800c458 	.word	0x0800c458
 8002f98:	080036d5 	.word	0x080036d5
 8002f9c:	20002690 	.word	0x20002690

08002fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b096      	sub	sp, #88	@ 0x58
 8002fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fa6:	f107 0314 	add.w	r3, r7, #20
 8002faa:	2244      	movs	r2, #68	@ 0x44
 8002fac:	2100      	movs	r1, #0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f009 f828 	bl	800c004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fb4:	463b      	mov	r3, r7
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	605a      	str	r2, [r3, #4]
 8002fbc:	609a      	str	r2, [r3, #8]
 8002fbe:	60da      	str	r2, [r3, #12]
 8002fc0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002fc2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002fc6:	f002 fa15 	bl	80053f4 <HAL_PWREx_ControlVoltageScaling>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002fd0:	f000 fbe0 	bl	8003794 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002fd4:	f002 f9f0 	bl	80053b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002fd8:	4b21      	ldr	r3, [pc, #132]	@ (8003060 <SystemClock_Config+0xc0>)
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fde:	4a20      	ldr	r2, [pc, #128]	@ (8003060 <SystemClock_Config+0xc0>)
 8002fe0:	f023 0318 	bic.w	r3, r3, #24
 8002fe4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002fe8:	2314      	movs	r3, #20
 8002fea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002fec:	2301      	movs	r3, #1
 8002fee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002ff8:	2360      	movs	r3, #96	@ 0x60
 8002ffa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003000:	2301      	movs	r3, #1
 8003002:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003004:	2301      	movs	r3, #1
 8003006:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003008:	2328      	movs	r3, #40	@ 0x28
 800300a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800300c:	2307      	movs	r3, #7
 800300e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003010:	2302      	movs	r3, #2
 8003012:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003014:	2302      	movs	r3, #2
 8003016:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003018:	f107 0314 	add.w	r3, r7, #20
 800301c:	4618      	mov	r0, r3
 800301e:	f002 fb0b 	bl	8005638 <HAL_RCC_OscConfig>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003028:	f000 fbb4 	bl	8003794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800302c:	230f      	movs	r3, #15
 800302e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003030:	2303      	movs	r3, #3
 8003032:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003034:	2300      	movs	r3, #0
 8003036:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003038:	2300      	movs	r3, #0
 800303a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800303c:	2300      	movs	r3, #0
 800303e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003040:	463b      	mov	r3, r7
 8003042:	2104      	movs	r1, #4
 8003044:	4618      	mov	r0, r3
 8003046:	f002 fed3 	bl	8005df0 <HAL_RCC_ClockConfig>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003050:	f000 fba0 	bl	8003794 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003054:	f003 fc0c 	bl	8006870 <HAL_RCCEx_EnableMSIPLLMode>
}
 8003058:	bf00      	nop
 800305a:	3758      	adds	r7, #88	@ 0x58
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40021000 	.word	0x40021000

08003064 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8003068:	4b18      	ldr	r3, [pc, #96]	@ (80030cc <MX_DFSDM1_Init+0x68>)
 800306a:	4a19      	ldr	r2, [pc, #100]	@ (80030d0 <MX_DFSDM1_Init+0x6c>)
 800306c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800306e:	4b17      	ldr	r3, [pc, #92]	@ (80030cc <MX_DFSDM1_Init+0x68>)
 8003070:	2201      	movs	r2, #1
 8003072:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8003074:	4b15      	ldr	r3, [pc, #84]	@ (80030cc <MX_DFSDM1_Init+0x68>)
 8003076:	2200      	movs	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800307a:	4b14      	ldr	r3, [pc, #80]	@ (80030cc <MX_DFSDM1_Init+0x68>)
 800307c:	2202      	movs	r2, #2
 800307e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8003080:	4b12      	ldr	r3, [pc, #72]	@ (80030cc <MX_DFSDM1_Init+0x68>)
 8003082:	2200      	movs	r2, #0
 8003084:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8003086:	4b11      	ldr	r3, [pc, #68]	@ (80030cc <MX_DFSDM1_Init+0x68>)
 8003088:	2200      	movs	r2, #0
 800308a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800308c:	4b0f      	ldr	r3, [pc, #60]	@ (80030cc <MX_DFSDM1_Init+0x68>)
 800308e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003092:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8003094:	4b0d      	ldr	r3, [pc, #52]	@ (80030cc <MX_DFSDM1_Init+0x68>)
 8003096:	2200      	movs	r2, #0
 8003098:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800309a:	4b0c      	ldr	r3, [pc, #48]	@ (80030cc <MX_DFSDM1_Init+0x68>)
 800309c:	2204      	movs	r2, #4
 800309e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80030a0:	4b0a      	ldr	r3, [pc, #40]	@ (80030cc <MX_DFSDM1_Init+0x68>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80030a6:	4b09      	ldr	r3, [pc, #36]	@ (80030cc <MX_DFSDM1_Init+0x68>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80030ac:	4b07      	ldr	r3, [pc, #28]	@ (80030cc <MX_DFSDM1_Init+0x68>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80030b2:	4b06      	ldr	r3, [pc, #24]	@ (80030cc <MX_DFSDM1_Init+0x68>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80030b8:	4804      	ldr	r0, [pc, #16]	@ (80030cc <MX_DFSDM1_Init+0x68>)
 80030ba:	f001 f99b 	bl	80043f4 <HAL_DFSDM_ChannelInit>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80030c4:	f000 fb66 	bl	8003794 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80030c8:	bf00      	nop
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	20001ef8 	.word	0x20001ef8
 80030d0:	40016020 	.word	0x40016020

080030d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80030d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003148 <MX_I2C2_Init+0x74>)
 80030da:	4a1c      	ldr	r2, [pc, #112]	@ (800314c <MX_I2C2_Init+0x78>)
 80030dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80030de:	4b1a      	ldr	r3, [pc, #104]	@ (8003148 <MX_I2C2_Init+0x74>)
 80030e0:	f640 6214 	movw	r2, #3604	@ 0xe14
 80030e4:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80030e6:	4b18      	ldr	r3, [pc, #96]	@ (8003148 <MX_I2C2_Init+0x74>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030ec:	4b16      	ldr	r3, [pc, #88]	@ (8003148 <MX_I2C2_Init+0x74>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030f2:	4b15      	ldr	r3, [pc, #84]	@ (8003148 <MX_I2C2_Init+0x74>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80030f8:	4b13      	ldr	r3, [pc, #76]	@ (8003148 <MX_I2C2_Init+0x74>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80030fe:	4b12      	ldr	r3, [pc, #72]	@ (8003148 <MX_I2C2_Init+0x74>)
 8003100:	2200      	movs	r2, #0
 8003102:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003104:	4b10      	ldr	r3, [pc, #64]	@ (8003148 <MX_I2C2_Init+0x74>)
 8003106:	2200      	movs	r2, #0
 8003108:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800310a:	4b0f      	ldr	r3, [pc, #60]	@ (8003148 <MX_I2C2_Init+0x74>)
 800310c:	2200      	movs	r2, #0
 800310e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003110:	480d      	ldr	r0, [pc, #52]	@ (8003148 <MX_I2C2_Init+0x74>)
 8003112:	f001 fed6 	bl	8004ec2 <HAL_I2C_Init>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800311c:	f000 fb3a 	bl	8003794 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003120:	2100      	movs	r1, #0
 8003122:	4809      	ldr	r0, [pc, #36]	@ (8003148 <MX_I2C2_Init+0x74>)
 8003124:	f001 ff68 	bl	8004ff8 <HAL_I2CEx_ConfigAnalogFilter>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800312e:	f000 fb31 	bl	8003794 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003132:	2100      	movs	r1, #0
 8003134:	4804      	ldr	r0, [pc, #16]	@ (8003148 <MX_I2C2_Init+0x74>)
 8003136:	f001 ffaa 	bl	800508e <HAL_I2CEx_ConfigDigitalFilter>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8003140:	f000 fb28 	bl	8003794 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003144:	bf00      	nop
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20001f30 	.word	0x20001f30
 800314c:	40005800 	.word	0x40005800

08003150 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8003154:	4b0f      	ldr	r3, [pc, #60]	@ (8003194 <MX_QUADSPI_Init+0x44>)
 8003156:	4a10      	ldr	r2, [pc, #64]	@ (8003198 <MX_QUADSPI_Init+0x48>)
 8003158:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800315a:	4b0e      	ldr	r3, [pc, #56]	@ (8003194 <MX_QUADSPI_Init+0x44>)
 800315c:	2202      	movs	r2, #2
 800315e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8003160:	4b0c      	ldr	r3, [pc, #48]	@ (8003194 <MX_QUADSPI_Init+0x44>)
 8003162:	2204      	movs	r2, #4
 8003164:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8003166:	4b0b      	ldr	r3, [pc, #44]	@ (8003194 <MX_QUADSPI_Init+0x44>)
 8003168:	2210      	movs	r2, #16
 800316a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800316c:	4b09      	ldr	r3, [pc, #36]	@ (8003194 <MX_QUADSPI_Init+0x44>)
 800316e:	2217      	movs	r2, #23
 8003170:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8003172:	4b08      	ldr	r3, [pc, #32]	@ (8003194 <MX_QUADSPI_Init+0x44>)
 8003174:	2200      	movs	r2, #0
 8003176:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8003178:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <MX_QUADSPI_Init+0x44>)
 800317a:	2200      	movs	r2, #0
 800317c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800317e:	4805      	ldr	r0, [pc, #20]	@ (8003194 <MX_QUADSPI_Init+0x44>)
 8003180:	f002 f99e 	bl	80054c0 <HAL_QSPI_Init>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800318a:	f000 fb03 	bl	8003794 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20001f84 	.word	0x20001f84
 8003198:	a0001000 	.word	0xa0001000

0800319c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80031a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003210 <MX_SPI3_Init+0x74>)
 80031a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003214 <MX_SPI3_Init+0x78>)
 80031a4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80031a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003210 <MX_SPI3_Init+0x74>)
 80031a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80031ac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80031ae:	4b18      	ldr	r3, [pc, #96]	@ (8003210 <MX_SPI3_Init+0x74>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80031b4:	4b16      	ldr	r3, [pc, #88]	@ (8003210 <MX_SPI3_Init+0x74>)
 80031b6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80031ba:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031bc:	4b14      	ldr	r3, [pc, #80]	@ (8003210 <MX_SPI3_Init+0x74>)
 80031be:	2200      	movs	r2, #0
 80031c0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031c2:	4b13      	ldr	r3, [pc, #76]	@ (8003210 <MX_SPI3_Init+0x74>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80031c8:	4b11      	ldr	r3, [pc, #68]	@ (8003210 <MX_SPI3_Init+0x74>)
 80031ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031ce:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003210 <MX_SPI3_Init+0x74>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003210 <MX_SPI3_Init+0x74>)
 80031d8:	2200      	movs	r2, #0
 80031da:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80031dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003210 <MX_SPI3_Init+0x74>)
 80031de:	2200      	movs	r2, #0
 80031e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003210 <MX_SPI3_Init+0x74>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80031e8:	4b09      	ldr	r3, [pc, #36]	@ (8003210 <MX_SPI3_Init+0x74>)
 80031ea:	2207      	movs	r2, #7
 80031ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80031ee:	4b08      	ldr	r3, [pc, #32]	@ (8003210 <MX_SPI3_Init+0x74>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80031f4:	4b06      	ldr	r3, [pc, #24]	@ (8003210 <MX_SPI3_Init+0x74>)
 80031f6:	2208      	movs	r2, #8
 80031f8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80031fa:	4805      	ldr	r0, [pc, #20]	@ (8003210 <MX_SPI3_Init+0x74>)
 80031fc:	f003 fd1a 	bl	8006c34 <HAL_SPI_Init>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8003206:	f000 fac5 	bl	8003794 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20001fc8 	.word	0x20001fc8
 8003214:	40003c00 	.word	0x40003c00

08003218 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800321c:	4b13      	ldr	r3, [pc, #76]	@ (800326c <MX_USART1_UART_Init+0x54>)
 800321e:	4a14      	ldr	r2, [pc, #80]	@ (8003270 <MX_USART1_UART_Init+0x58>)
 8003220:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2200000; //2200000 works, default is 115200;
 8003222:	4b12      	ldr	r3, [pc, #72]	@ (800326c <MX_USART1_UART_Init+0x54>)
 8003224:	4a13      	ldr	r2, [pc, #76]	@ (8003274 <MX_USART1_UART_Init+0x5c>)
 8003226:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003228:	4b10      	ldr	r3, [pc, #64]	@ (800326c <MX_USART1_UART_Init+0x54>)
 800322a:	2200      	movs	r2, #0
 800322c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800322e:	4b0f      	ldr	r3, [pc, #60]	@ (800326c <MX_USART1_UART_Init+0x54>)
 8003230:	2200      	movs	r2, #0
 8003232:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003234:	4b0d      	ldr	r3, [pc, #52]	@ (800326c <MX_USART1_UART_Init+0x54>)
 8003236:	2200      	movs	r2, #0
 8003238:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800323a:	4b0c      	ldr	r3, [pc, #48]	@ (800326c <MX_USART1_UART_Init+0x54>)
 800323c:	220c      	movs	r2, #12
 800323e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003240:	4b0a      	ldr	r3, [pc, #40]	@ (800326c <MX_USART1_UART_Init+0x54>)
 8003242:	2200      	movs	r2, #0
 8003244:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003246:	4b09      	ldr	r3, [pc, #36]	@ (800326c <MX_USART1_UART_Init+0x54>)
 8003248:	2200      	movs	r2, #0
 800324a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800324c:	4b07      	ldr	r3, [pc, #28]	@ (800326c <MX_USART1_UART_Init+0x54>)
 800324e:	2200      	movs	r2, #0
 8003250:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003252:	4b06      	ldr	r3, [pc, #24]	@ (800326c <MX_USART1_UART_Init+0x54>)
 8003254:	2200      	movs	r2, #0
 8003256:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003258:	4804      	ldr	r0, [pc, #16]	@ (800326c <MX_USART1_UART_Init+0x54>)
 800325a:	f004 f841 	bl	80072e0 <HAL_UART_Init>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8003264:	f000 fa96 	bl	8003794 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003268:	bf00      	nop
 800326a:	bd80      	pop	{r7, pc}
 800326c:	2000202c 	.word	0x2000202c
 8003270:	40013800 	.word	0x40013800
 8003274:	002191c0 	.word	0x002191c0

08003278 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800327c:	4b14      	ldr	r3, [pc, #80]	@ (80032d0 <MX_USART3_UART_Init+0x58>)
 800327e:	4a15      	ldr	r2, [pc, #84]	@ (80032d4 <MX_USART3_UART_Init+0x5c>)
 8003280:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003282:	4b13      	ldr	r3, [pc, #76]	@ (80032d0 <MX_USART3_UART_Init+0x58>)
 8003284:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003288:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800328a:	4b11      	ldr	r3, [pc, #68]	@ (80032d0 <MX_USART3_UART_Init+0x58>)
 800328c:	2200      	movs	r2, #0
 800328e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003290:	4b0f      	ldr	r3, [pc, #60]	@ (80032d0 <MX_USART3_UART_Init+0x58>)
 8003292:	2200      	movs	r2, #0
 8003294:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003296:	4b0e      	ldr	r3, [pc, #56]	@ (80032d0 <MX_USART3_UART_Init+0x58>)
 8003298:	2200      	movs	r2, #0
 800329a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800329c:	4b0c      	ldr	r3, [pc, #48]	@ (80032d0 <MX_USART3_UART_Init+0x58>)
 800329e:	220c      	movs	r2, #12
 80032a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032a2:	4b0b      	ldr	r3, [pc, #44]	@ (80032d0 <MX_USART3_UART_Init+0x58>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80032a8:	4b09      	ldr	r3, [pc, #36]	@ (80032d0 <MX_USART3_UART_Init+0x58>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032ae:	4b08      	ldr	r3, [pc, #32]	@ (80032d0 <MX_USART3_UART_Init+0x58>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032b4:	4b06      	ldr	r3, [pc, #24]	@ (80032d0 <MX_USART3_UART_Init+0x58>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80032ba:	4805      	ldr	r0, [pc, #20]	@ (80032d0 <MX_USART3_UART_Init+0x58>)
 80032bc:	f004 f810 	bl	80072e0 <HAL_UART_Init>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80032c6:	f000 fa65 	bl	8003794 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80032ca:	bf00      	nop
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	200020b4 	.word	0x200020b4
 80032d4:	40004800 	.word	0x40004800

080032d8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80032dc:	4b14      	ldr	r3, [pc, #80]	@ (8003330 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80032de:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80032e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80032e4:	4b12      	ldr	r3, [pc, #72]	@ (8003330 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80032e6:	2206      	movs	r2, #6
 80032e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80032ea:	4b11      	ldr	r3, [pc, #68]	@ (8003330 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80032ec:	2202      	movs	r2, #2
 80032ee:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80032f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003330 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80032f2:	2202      	movs	r2, #2
 80032f4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80032f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003330 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80032fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003330 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80032fe:	2200      	movs	r2, #0
 8003300:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003302:	4b0b      	ldr	r3, [pc, #44]	@ (8003330 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003304:	2200      	movs	r2, #0
 8003306:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8003308:	4b09      	ldr	r3, [pc, #36]	@ (8003330 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800330a:	2200      	movs	r2, #0
 800330c:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800330e:	4b08      	ldr	r3, [pc, #32]	@ (8003330 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003310:	2200      	movs	r2, #0
 8003312:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003314:	4b06      	ldr	r3, [pc, #24]	@ (8003330 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003316:	2200      	movs	r2, #0
 8003318:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800331a:	4805      	ldr	r0, [pc, #20]	@ (8003330 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800331c:	f001 ff03 	bl	8005126 <HAL_PCD_Init>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003326:	f000 fa35 	bl	8003794 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800332a:	bf00      	nop
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20002184 	.word	0x20002184

08003334 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800333a:	4b0c      	ldr	r3, [pc, #48]	@ (800336c <MX_DMA_Init+0x38>)
 800333c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800333e:	4a0b      	ldr	r2, [pc, #44]	@ (800336c <MX_DMA_Init+0x38>)
 8003340:	f043 0301 	orr.w	r3, r3, #1
 8003344:	6493      	str	r3, [r2, #72]	@ 0x48
 8003346:	4b09      	ldr	r3, [pc, #36]	@ (800336c <MX_DMA_Init+0x38>)
 8003348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	607b      	str	r3, [r7, #4]
 8003350:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8003352:	2200      	movs	r2, #0
 8003354:	2105      	movs	r1, #5
 8003356:	200e      	movs	r0, #14
 8003358:	f001 f822 	bl	80043a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800335c:	200e      	movs	r0, #14
 800335e:	f001 f83b 	bl	80043d8 <HAL_NVIC_EnableIRQ>

}
 8003362:	bf00      	nop
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40021000 	.word	0x40021000

08003370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08a      	sub	sp, #40	@ 0x28
 8003374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003376:	f107 0314 	add.w	r3, r7, #20
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	605a      	str	r2, [r3, #4]
 8003380:	609a      	str	r2, [r3, #8]
 8003382:	60da      	str	r2, [r3, #12]
 8003384:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003386:	4bbd      	ldr	r3, [pc, #756]	@ (800367c <MX_GPIO_Init+0x30c>)
 8003388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800338a:	4abc      	ldr	r2, [pc, #752]	@ (800367c <MX_GPIO_Init+0x30c>)
 800338c:	f043 0310 	orr.w	r3, r3, #16
 8003390:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003392:	4bba      	ldr	r3, [pc, #744]	@ (800367c <MX_GPIO_Init+0x30c>)
 8003394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003396:	f003 0310 	and.w	r3, r3, #16
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800339e:	4bb7      	ldr	r3, [pc, #732]	@ (800367c <MX_GPIO_Init+0x30c>)
 80033a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033a2:	4ab6      	ldr	r2, [pc, #728]	@ (800367c <MX_GPIO_Init+0x30c>)
 80033a4:	f043 0304 	orr.w	r3, r3, #4
 80033a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033aa:	4bb4      	ldr	r3, [pc, #720]	@ (800367c <MX_GPIO_Init+0x30c>)
 80033ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033b6:	4bb1      	ldr	r3, [pc, #708]	@ (800367c <MX_GPIO_Init+0x30c>)
 80033b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ba:	4ab0      	ldr	r2, [pc, #704]	@ (800367c <MX_GPIO_Init+0x30c>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033c2:	4bae      	ldr	r3, [pc, #696]	@ (800367c <MX_GPIO_Init+0x30c>)
 80033c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	60bb      	str	r3, [r7, #8]
 80033cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ce:	4bab      	ldr	r3, [pc, #684]	@ (800367c <MX_GPIO_Init+0x30c>)
 80033d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033d2:	4aaa      	ldr	r2, [pc, #680]	@ (800367c <MX_GPIO_Init+0x30c>)
 80033d4:	f043 0302 	orr.w	r3, r3, #2
 80033d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033da:	4ba8      	ldr	r3, [pc, #672]	@ (800367c <MX_GPIO_Init+0x30c>)
 80033dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	607b      	str	r3, [r7, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033e6:	4ba5      	ldr	r3, [pc, #660]	@ (800367c <MX_GPIO_Init+0x30c>)
 80033e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ea:	4aa4      	ldr	r2, [pc, #656]	@ (800367c <MX_GPIO_Init+0x30c>)
 80033ec:	f043 0308 	orr.w	r3, r3, #8
 80033f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033f2:	4ba2      	ldr	r3, [pc, #648]	@ (800367c <MX_GPIO_Init+0x30c>)
 80033f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80033fe:	2200      	movs	r2, #0
 8003400:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8003404:	489e      	ldr	r0, [pc, #632]	@ (8003680 <MX_GPIO_Init+0x310>)
 8003406:	f001 fd21 	bl	8004e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800340a:	2200      	movs	r2, #0
 800340c:	f248 1104 	movw	r1, #33028	@ 0x8104
 8003410:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003414:	f001 fd1a 	bl	8004e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8003418:	2200      	movs	r2, #0
 800341a:	f24f 0114 	movw	r1, #61460	@ 0xf014
 800341e:	4899      	ldr	r0, [pc, #612]	@ (8003684 <MX_GPIO_Init+0x314>)
 8003420:	f001 fd14 	bl	8004e4c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8003424:	2200      	movs	r2, #0
 8003426:	f241 0181 	movw	r1, #4225	@ 0x1081
 800342a:	4897      	ldr	r0, [pc, #604]	@ (8003688 <MX_GPIO_Init+0x318>)
 800342c:	f001 fd0e 	bl	8004e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8003430:	2201      	movs	r2, #1
 8003432:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003436:	4894      	ldr	r0, [pc, #592]	@ (8003688 <MX_GPIO_Init+0x318>)
 8003438:	f001 fd08 	bl	8004e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800343c:	2200      	movs	r2, #0
 800343e:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8003442:	4892      	ldr	r0, [pc, #584]	@ (800368c <MX_GPIO_Init+0x31c>)
 8003444:	f001 fd02 	bl	8004e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8003448:	2201      	movs	r2, #1
 800344a:	2120      	movs	r1, #32
 800344c:	488d      	ldr	r0, [pc, #564]	@ (8003684 <MX_GPIO_Init+0x314>)
 800344e:	f001 fcfd 	bl	8004e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8003452:	2201      	movs	r2, #1
 8003454:	2101      	movs	r1, #1
 8003456:	488a      	ldr	r0, [pc, #552]	@ (8003680 <MX_GPIO_Init+0x310>)
 8003458:	f001 fcf8 	bl	8004e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800345c:	f240 1315 	movw	r3, #277	@ 0x115
 8003460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003462:	2301      	movs	r3, #1
 8003464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346a:	2300      	movs	r3, #0
 800346c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800346e:	f107 0314 	add.w	r3, r7, #20
 8003472:	4619      	mov	r1, r3
 8003474:	4882      	ldr	r0, [pc, #520]	@ (8003680 <MX_GPIO_Init+0x310>)
 8003476:	f001 fb3f 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800347a:	236a      	movs	r3, #106	@ 0x6a
 800347c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800347e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003484:	2300      	movs	r3, #0
 8003486:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003488:	f107 0314 	add.w	r3, r7, #20
 800348c:	4619      	mov	r1, r3
 800348e:	487c      	ldr	r0, [pc, #496]	@ (8003680 <MX_GPIO_Init+0x310>)
 8003490:	f001 fb32 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8003494:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800349a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800349e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a0:	2300      	movs	r3, #0
 80034a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80034a4:	f107 0314 	add.w	r3, r7, #20
 80034a8:	4619      	mov	r1, r3
 80034aa:	4878      	ldr	r0, [pc, #480]	@ (800368c <MX_GPIO_Init+0x31c>)
 80034ac:	f001 fb24 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80034b0:	233f      	movs	r3, #63	@ 0x3f
 80034b2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80034b4:	230b      	movs	r3, #11
 80034b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034bc:	f107 0314 	add.w	r3, r7, #20
 80034c0:	4619      	mov	r1, r3
 80034c2:	4872      	ldr	r0, [pc, #456]	@ (800368c <MX_GPIO_Init+0x31c>)
 80034c4:	f001 fb18 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80034c8:	2303      	movs	r3, #3
 80034ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034cc:	2302      	movs	r3, #2
 80034ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d4:	2303      	movs	r3, #3
 80034d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80034d8:	2308      	movs	r3, #8
 80034da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034dc:	f107 0314 	add.w	r3, r7, #20
 80034e0:	4619      	mov	r1, r3
 80034e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034e6:	f001 fb07 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80034ea:	f248 1304 	movw	r3, #33028	@ 0x8104
 80034ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034f0:	2301      	movs	r3, #1
 80034f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f8:	2300      	movs	r3, #0
 80034fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034fc:	f107 0314 	add.w	r3, r7, #20
 8003500:	4619      	mov	r1, r3
 8003502:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003506:	f001 faf7 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800350a:	2308      	movs	r3, #8
 800350c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350e:	2302      	movs	r3, #2
 8003510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003516:	2300      	movs	r3, #0
 8003518:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800351a:	2301      	movs	r3, #1
 800351c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800351e:	f107 0314 	add.w	r3, r7, #20
 8003522:	4619      	mov	r1, r3
 8003524:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003528:	f001 fae6 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800352c:	2310      	movs	r3, #16
 800352e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003530:	230b      	movs	r3, #11
 8003532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003534:	2300      	movs	r3, #0
 8003536:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8003538:	f107 0314 	add.w	r3, r7, #20
 800353c:	4619      	mov	r1, r3
 800353e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003542:	f001 fad9 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8003546:	23e0      	movs	r3, #224	@ 0xe0
 8003548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354a:	2302      	movs	r3, #2
 800354c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354e:	2300      	movs	r3, #0
 8003550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003552:	2303      	movs	r3, #3
 8003554:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003556:	2305      	movs	r3, #5
 8003558:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800355a:	f107 0314 	add.w	r3, r7, #20
 800355e:	4619      	mov	r1, r3
 8003560:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003564:	f001 fac8 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8003568:	2301      	movs	r3, #1
 800356a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800356c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003572:	2300      	movs	r3, #0
 8003574:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8003576:	f107 0314 	add.w	r3, r7, #20
 800357a:	4619      	mov	r1, r3
 800357c:	4841      	ldr	r0, [pc, #260]	@ (8003684 <MX_GPIO_Init+0x314>)
 800357e:	f001 fabb 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8003582:	2302      	movs	r3, #2
 8003584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003586:	230b      	movs	r3, #11
 8003588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800358e:	f107 0314 	add.w	r3, r7, #20
 8003592:	4619      	mov	r1, r3
 8003594:	483b      	ldr	r0, [pc, #236]	@ (8003684 <MX_GPIO_Init+0x314>)
 8003596:	f001 faaf 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800359a:	f24f 0334 	movw	r3, #61492	@ 0xf034
 800359e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035a0:	2301      	movs	r3, #1
 80035a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a8:	2300      	movs	r3, #0
 80035aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ac:	f107 0314 	add.w	r3, r7, #20
 80035b0:	4619      	mov	r1, r3
 80035b2:	4834      	ldr	r0, [pc, #208]	@ (8003684 <MX_GPIO_Init+0x314>)
 80035b4:	f001 faa0 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80035b8:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 80035bc:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80035be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80035c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035c8:	f107 0314 	add.w	r3, r7, #20
 80035cc:	4619      	mov	r1, r3
 80035ce:	482e      	ldr	r0, [pc, #184]	@ (8003688 <MX_GPIO_Init+0x318>)
 80035d0:	f001 fa92 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80035d4:	f243 0381 	movw	r3, #12417	@ 0x3081
 80035d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035da:	2301      	movs	r3, #1
 80035dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e2:	2300      	movs	r3, #0
 80035e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035e6:	f107 0314 	add.w	r3, r7, #20
 80035ea:	4619      	mov	r1, r3
 80035ec:	4826      	ldr	r0, [pc, #152]	@ (8003688 <MX_GPIO_Init+0x318>)
 80035ee:	f001 fa83 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80035f2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80035f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035f8:	2301      	movs	r3, #1
 80035fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003600:	2300      	movs	r3, #0
 8003602:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003604:	f107 0314 	add.w	r3, r7, #20
 8003608:	4619      	mov	r1, r3
 800360a:	4820      	ldr	r0, [pc, #128]	@ (800368c <MX_GPIO_Init+0x31c>)
 800360c:	f001 fa74 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8003610:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003616:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800361a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361c:	2300      	movs	r3, #0
 800361e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003620:	f107 0314 	add.w	r3, r7, #20
 8003624:	4619      	mov	r1, r3
 8003626:	4819      	ldr	r0, [pc, #100]	@ (800368c <MX_GPIO_Init+0x31c>)
 8003628:	f001 fa66 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800362c:	2302      	movs	r3, #2
 800362e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003630:	2302      	movs	r3, #2
 8003632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003634:	2300      	movs	r3, #0
 8003636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003638:	2303      	movs	r3, #3
 800363a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800363c:	2305      	movs	r3, #5
 800363e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8003640:	f107 0314 	add.w	r3, r7, #20
 8003644:	4619      	mov	r1, r3
 8003646:	4810      	ldr	r0, [pc, #64]	@ (8003688 <MX_GPIO_Init+0x318>)
 8003648:	f001 fa56 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800364c:	2378      	movs	r3, #120	@ 0x78
 800364e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003650:	2302      	movs	r3, #2
 8003652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003654:	2300      	movs	r3, #0
 8003656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003658:	2303      	movs	r3, #3
 800365a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800365c:	2307      	movs	r3, #7
 800365e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003660:	f107 0314 	add.w	r3, r7, #20
 8003664:	4619      	mov	r1, r3
 8003666:	4808      	ldr	r0, [pc, #32]	@ (8003688 <MX_GPIO_Init+0x318>)
 8003668:	f001 fa46 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800366c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003672:	2312      	movs	r3, #18
 8003674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003676:	2300      	movs	r3, #0
 8003678:	e00a      	b.n	8003690 <MX_GPIO_Init+0x320>
 800367a:	bf00      	nop
 800367c:	40021000 	.word	0x40021000
 8003680:	48001000 	.word	0x48001000
 8003684:	48000400 	.word	0x48000400
 8003688:	48000c00 	.word	0x48000c00
 800368c:	48000800 	.word	0x48000800
 8003690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003692:	2303      	movs	r3, #3
 8003694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003696:	2304      	movs	r3, #4
 8003698:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800369a:	f107 0314 	add.w	r3, r7, #20
 800369e:	4619      	mov	r1, r3
 80036a0:	480b      	ldr	r0, [pc, #44]	@ (80036d0 <MX_GPIO_Init+0x360>)
 80036a2:	f001 fa29 	bl	8004af8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80036a6:	2200      	movs	r2, #0
 80036a8:	2105      	movs	r1, #5
 80036aa:	2017      	movs	r0, #23
 80036ac:	f000 fe78 	bl	80043a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80036b0:	2017      	movs	r0, #23
 80036b2:	f000 fe91 	bl	80043d8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80036b6:	2200      	movs	r2, #0
 80036b8:	2105      	movs	r1, #5
 80036ba:	2028      	movs	r0, #40	@ 0x28
 80036bc:	f000 fe70 	bl	80043a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80036c0:	2028      	movs	r0, #40	@ 0x28
 80036c2:	f000 fe89 	bl	80043d8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80036c6:	bf00      	nop
 80036c8:	3728      	adds	r7, #40	@ 0x28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	48000400 	.word	0x48000400

080036d4 <StartTXTask>:
char tx_buff[BUF_SIZE];

unsigned int bg_counter = 0;

void StartTXTask(void *argument)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]

  for (int i = 0; i < BUF_SIZE; i++)
 80036dc:	2300      	movs	r3, #0
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	e007      	b.n	80036f2 <StartTXTask+0x1e>
	  tx_buff[i] = '-';
 80036e2:	4a14      	ldr	r2, [pc, #80]	@ (8003734 <StartTXTask+0x60>)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4413      	add	r3, r2
 80036e8:	222d      	movs	r2, #45	@ 0x2d
 80036ea:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < BUF_SIZE; i++)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	3301      	adds	r3, #1
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f640 0233 	movw	r2, #2099	@ 0x833
 80036f8:	4293      	cmp	r3, r2
 80036fa:	ddf2      	ble.n	80036e2 <StartTXTask+0xe>
  tx_buff[0] = '<';
 80036fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003734 <StartTXTask+0x60>)
 80036fe:	223c      	movs	r2, #60	@ 0x3c
 8003700:	701a      	strb	r2, [r3, #0]
  tx_buff[BUF_SIZE-1] = '>';
 8003702:	4b0c      	ldr	r3, [pc, #48]	@ (8003734 <StartTXTask+0x60>)
 8003704:	223e      	movs	r2, #62	@ 0x3e
 8003706:	f883 2833 	strb.w	r2, [r3, #2099]	@ 0x833

  for(;;)
  {
	  osDelayUntil(xTaskGetTickCount() + 10);
 800370a:	f006 ff6b 	bl	800a5e4 <xTaskGetTickCount>
 800370e:	4603      	mov	r3, r0
 8003710:	330a      	adds	r3, #10
 8003712:	4618      	mov	r0, r3
 8003714:	f005 fb7f 	bl	8008e16 <osDelayUntil>
	  while(HAL_UART_Transmit_DMA(&huart1, tx_buff, BUF_SIZE) == HAL_BUSY)
 8003718:	e002      	b.n	8003720 <StartTXTask+0x4c>
	  {
		  osDelay(1);
 800371a:	2001      	movs	r0, #1
 800371c:	f005 fb60 	bl	8008de0 <osDelay>
	  while(HAL_UART_Transmit_DMA(&huart1, tx_buff, BUF_SIZE) == HAL_BUSY)
 8003720:	f640 0234 	movw	r2, #2100	@ 0x834
 8003724:	4903      	ldr	r1, [pc, #12]	@ (8003734 <StartTXTask+0x60>)
 8003726:	4804      	ldr	r0, [pc, #16]	@ (8003738 <StartTXTask+0x64>)
 8003728:	f000 fcd6 	bl	80040d8 <__wrap_HAL_UART_Transmit_DMA>
 800372c:	4603      	mov	r3, r0
 800372e:	2b02      	cmp	r3, #2
 8003730:	d0f3      	beq.n	800371a <StartTXTask+0x46>
	  osDelayUntil(xTaskGetTickCount() + 10);
 8003732:	e7ea      	b.n	800370a <StartTXTask+0x36>
 8003734:	20002698 	.word	0x20002698
 8003738:	2000202c 	.word	0x2000202c

0800373c <StartBGTask>:
	  }
  }
}

void StartBGTask(void *argument)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  volatile unsigned int ticks = 0;
 8003744:	2300      	movs	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  ticks = xTaskGetTickCount();
 8003748:	f006 ff4c 	bl	800a5e4 <xTaskGetTickCount>
 800374c:	4603      	mov	r3, r0
 800374e:	60fb      	str	r3, [r7, #12]

	  if (ticks >= 5000)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003756:	4293      	cmp	r3, r2
 8003758:	d902      	bls.n	8003760 <StartBGTask+0x24>
	  {
		  ticks++;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	3301      	adds	r3, #1
 800375e:	60fb      	str	r3, [r7, #12]
	  }

	  bg_counter++;
 8003760:	4b02      	ldr	r3, [pc, #8]	@ (800376c <StartBGTask+0x30>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3301      	adds	r3, #1
 8003766:	4a01      	ldr	r2, [pc, #4]	@ (800376c <StartBGTask+0x30>)
 8003768:	6013      	str	r3, [r2, #0]
	  ticks = xTaskGetTickCount();
 800376a:	e7ed      	b.n	8003748 <StartBGTask+0xc>
 800376c:	20002ecc 	.word	0x20002ecc

08003770 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a04      	ldr	r2, [pc, #16]	@ (8003790 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d101      	bne.n	8003786 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003782:	f000 fd11 	bl	80041a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003786:	bf00      	nop
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40012c00 	.word	0x40012c00

08003794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003798:	b672      	cpsid	i
}
 800379a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800379c:	bf00      	nop
 800379e:	e7fd      	b.n	800379c <Error_Handler+0x8>

080037a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037a6:	4b11      	ldr	r3, [pc, #68]	@ (80037ec <HAL_MspInit+0x4c>)
 80037a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037aa:	4a10      	ldr	r2, [pc, #64]	@ (80037ec <HAL_MspInit+0x4c>)
 80037ac:	f043 0301 	orr.w	r3, r3, #1
 80037b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80037b2:	4b0e      	ldr	r3, [pc, #56]	@ (80037ec <HAL_MspInit+0x4c>)
 80037b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	607b      	str	r3, [r7, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037be:	4b0b      	ldr	r3, [pc, #44]	@ (80037ec <HAL_MspInit+0x4c>)
 80037c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c2:	4a0a      	ldr	r2, [pc, #40]	@ (80037ec <HAL_MspInit+0x4c>)
 80037c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80037ca:	4b08      	ldr	r3, [pc, #32]	@ (80037ec <HAL_MspInit+0x4c>)
 80037cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80037d6:	2200      	movs	r2, #0
 80037d8:	210f      	movs	r1, #15
 80037da:	f06f 0001 	mvn.w	r0, #1
 80037de:	f000 fddf 	bl	80043a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40021000 	.word	0x40021000

080037f0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b0ac      	sub	sp, #176	@ 0xb0
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	605a      	str	r2, [r3, #4]
 8003802:	609a      	str	r2, [r3, #8]
 8003804:	60da      	str	r2, [r3, #12]
 8003806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003808:	f107 0314 	add.w	r3, r7, #20
 800380c:	2288      	movs	r2, #136	@ 0x88
 800380e:	2100      	movs	r1, #0
 8003810:	4618      	mov	r0, r3
 8003812:	f008 fbf7 	bl	800c004 <memset>
  if(DFSDM1_Init == 0)
 8003816:	4b25      	ldr	r3, [pc, #148]	@ (80038ac <HAL_DFSDM_ChannelMspInit+0xbc>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d142      	bne.n	80038a4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800381e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003822:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8003824:	2300      	movs	r3, #0
 8003826:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800382a:	f107 0314 	add.w	r3, r7, #20
 800382e:	4618      	mov	r0, r3
 8003830:	f002 fd34 	bl	800629c <HAL_RCCEx_PeriphCLKConfig>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800383a:	f7ff ffab 	bl	8003794 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800383e:	4b1c      	ldr	r3, [pc, #112]	@ (80038b0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003842:	4a1b      	ldr	r2, [pc, #108]	@ (80038b0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003844:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003848:	6613      	str	r3, [r2, #96]	@ 0x60
 800384a:	4b19      	ldr	r3, [pc, #100]	@ (80038b0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800384c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003856:	4b16      	ldr	r3, [pc, #88]	@ (80038b0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800385a:	4a15      	ldr	r2, [pc, #84]	@ (80038b0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800385c:	f043 0310 	orr.w	r3, r3, #16
 8003860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003862:	4b13      	ldr	r3, [pc, #76]	@ (80038b0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800386e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8003872:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003876:	2302      	movs	r3, #2
 8003878:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387c:	2300      	movs	r3, #0
 800387e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003882:	2300      	movs	r3, #0
 8003884:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003888:	2306      	movs	r3, #6
 800388a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800388e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003892:	4619      	mov	r1, r3
 8003894:	4807      	ldr	r0, [pc, #28]	@ (80038b4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8003896:	f001 f92f 	bl	8004af8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800389a:	4b04      	ldr	r3, [pc, #16]	@ (80038ac <HAL_DFSDM_ChannelMspInit+0xbc>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	3301      	adds	r3, #1
 80038a0:	4a02      	ldr	r2, [pc, #8]	@ (80038ac <HAL_DFSDM_ChannelMspInit+0xbc>)
 80038a2:	6013      	str	r3, [r2, #0]
  }

}
 80038a4:	bf00      	nop
 80038a6:	37b0      	adds	r7, #176	@ 0xb0
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	20002ed0 	.word	0x20002ed0
 80038b0:	40021000 	.word	0x40021000
 80038b4:	48001000 	.word	0x48001000

080038b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b0ac      	sub	sp, #176	@ 0xb0
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	609a      	str	r2, [r3, #8]
 80038cc:	60da      	str	r2, [r3, #12]
 80038ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038d0:	f107 0314 	add.w	r3, r7, #20
 80038d4:	2288      	movs	r2, #136	@ 0x88
 80038d6:	2100      	movs	r1, #0
 80038d8:	4618      	mov	r0, r3
 80038da:	f008 fb93 	bl	800c004 <memset>
  if(hi2c->Instance==I2C2)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a21      	ldr	r2, [pc, #132]	@ (8003968 <HAL_I2C_MspInit+0xb0>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d13b      	bne.n	8003960 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80038e8:	2380      	movs	r3, #128	@ 0x80
 80038ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80038ec:	2300      	movs	r3, #0
 80038ee:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038f0:	f107 0314 	add.w	r3, r7, #20
 80038f4:	4618      	mov	r0, r3
 80038f6:	f002 fcd1 	bl	800629c <HAL_RCCEx_PeriphCLKConfig>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003900:	f7ff ff48 	bl	8003794 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003904:	4b19      	ldr	r3, [pc, #100]	@ (800396c <HAL_I2C_MspInit+0xb4>)
 8003906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003908:	4a18      	ldr	r2, [pc, #96]	@ (800396c <HAL_I2C_MspInit+0xb4>)
 800390a:	f043 0302 	orr.w	r3, r3, #2
 800390e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003910:	4b16      	ldr	r3, [pc, #88]	@ (800396c <HAL_I2C_MspInit+0xb4>)
 8003912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800391c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003920:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003924:	2312      	movs	r3, #18
 8003926:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800392a:	2301      	movs	r3, #1
 800392c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003930:	2303      	movs	r3, #3
 8003932:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003936:	2304      	movs	r3, #4
 8003938:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800393c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003940:	4619      	mov	r1, r3
 8003942:	480b      	ldr	r0, [pc, #44]	@ (8003970 <HAL_I2C_MspInit+0xb8>)
 8003944:	f001 f8d8 	bl	8004af8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003948:	4b08      	ldr	r3, [pc, #32]	@ (800396c <HAL_I2C_MspInit+0xb4>)
 800394a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800394c:	4a07      	ldr	r2, [pc, #28]	@ (800396c <HAL_I2C_MspInit+0xb4>)
 800394e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003952:	6593      	str	r3, [r2, #88]	@ 0x58
 8003954:	4b05      	ldr	r3, [pc, #20]	@ (800396c <HAL_I2C_MspInit+0xb4>)
 8003956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003958:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003960:	bf00      	nop
 8003962:	37b0      	adds	r7, #176	@ 0xb0
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40005800 	.word	0x40005800
 800396c:	40021000 	.word	0x40021000
 8003970:	48000400 	.word	0x48000400

08003974 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08a      	sub	sp, #40	@ 0x28
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800397c:	f107 0314 	add.w	r3, r7, #20
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	605a      	str	r2, [r3, #4]
 8003986:	609a      	str	r2, [r3, #8]
 8003988:	60da      	str	r2, [r3, #12]
 800398a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a17      	ldr	r2, [pc, #92]	@ (80039f0 <HAL_QSPI_MspInit+0x7c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d128      	bne.n	80039e8 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003996:	4b17      	ldr	r3, [pc, #92]	@ (80039f4 <HAL_QSPI_MspInit+0x80>)
 8003998:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800399a:	4a16      	ldr	r2, [pc, #88]	@ (80039f4 <HAL_QSPI_MspInit+0x80>)
 800399c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80039a2:	4b14      	ldr	r3, [pc, #80]	@ (80039f4 <HAL_QSPI_MspInit+0x80>)
 80039a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039aa:	613b      	str	r3, [r7, #16]
 80039ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80039ae:	4b11      	ldr	r3, [pc, #68]	@ (80039f4 <HAL_QSPI_MspInit+0x80>)
 80039b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b2:	4a10      	ldr	r2, [pc, #64]	@ (80039f4 <HAL_QSPI_MspInit+0x80>)
 80039b4:	f043 0310 	orr.w	r3, r3, #16
 80039b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039ba:	4b0e      	ldr	r3, [pc, #56]	@ (80039f4 <HAL_QSPI_MspInit+0x80>)
 80039bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039be:	f003 0310 	and.w	r3, r3, #16
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80039c6:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80039ca:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039cc:	2302      	movs	r3, #2
 80039ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d4:	2303      	movs	r3, #3
 80039d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80039d8:	230a      	movs	r3, #10
 80039da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039dc:	f107 0314 	add.w	r3, r7, #20
 80039e0:	4619      	mov	r1, r3
 80039e2:	4805      	ldr	r0, [pc, #20]	@ (80039f8 <HAL_QSPI_MspInit+0x84>)
 80039e4:	f001 f888 	bl	8004af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80039e8:	bf00      	nop
 80039ea:	3728      	adds	r7, #40	@ 0x28
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	a0001000 	.word	0xa0001000
 80039f4:	40021000 	.word	0x40021000
 80039f8:	48001000 	.word	0x48001000

080039fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	@ 0x28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a04:	f107 0314 	add.w	r3, r7, #20
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	605a      	str	r2, [r3, #4]
 8003a0e:	609a      	str	r2, [r3, #8]
 8003a10:	60da      	str	r2, [r3, #12]
 8003a12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a17      	ldr	r2, [pc, #92]	@ (8003a78 <HAL_SPI_MspInit+0x7c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d128      	bne.n	8003a70 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003a1e:	4b17      	ldr	r3, [pc, #92]	@ (8003a7c <HAL_SPI_MspInit+0x80>)
 8003a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a22:	4a16      	ldr	r2, [pc, #88]	@ (8003a7c <HAL_SPI_MspInit+0x80>)
 8003a24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a28:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a2a:	4b14      	ldr	r3, [pc, #80]	@ (8003a7c <HAL_SPI_MspInit+0x80>)
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a36:	4b11      	ldr	r3, [pc, #68]	@ (8003a7c <HAL_SPI_MspInit+0x80>)
 8003a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3a:	4a10      	ldr	r2, [pc, #64]	@ (8003a7c <HAL_SPI_MspInit+0x80>)
 8003a3c:	f043 0304 	orr.w	r3, r3, #4
 8003a40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a42:	4b0e      	ldr	r3, [pc, #56]	@ (8003a7c <HAL_SPI_MspInit+0x80>)
 8003a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8003a4e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a54:	2302      	movs	r3, #2
 8003a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003a60:	2306      	movs	r3, #6
 8003a62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a64:	f107 0314 	add.w	r3, r7, #20
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4805      	ldr	r0, [pc, #20]	@ (8003a80 <HAL_SPI_MspInit+0x84>)
 8003a6c:	f001 f844 	bl	8004af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003a70:	bf00      	nop
 8003a72:	3728      	adds	r7, #40	@ 0x28
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40003c00 	.word	0x40003c00
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	48000800 	.word	0x48000800

08003a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b0ae      	sub	sp, #184	@ 0xb8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a8c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	605a      	str	r2, [r3, #4]
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	60da      	str	r2, [r3, #12]
 8003a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a9c:	f107 031c 	add.w	r3, r7, #28
 8003aa0:	2288      	movs	r2, #136	@ 0x88
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f008 faad 	bl	800c004 <memset>
  if(huart->Instance==USART1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a5a      	ldr	r2, [pc, #360]	@ (8003c18 <HAL_UART_MspInit+0x194>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d16c      	bne.n	8003b8e <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003abc:	f107 031c 	add.w	r3, r7, #28
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f002 fbeb 	bl	800629c <HAL_RCCEx_PeriphCLKConfig>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003acc:	f7ff fe62 	bl	8003794 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ad0:	4b52      	ldr	r3, [pc, #328]	@ (8003c1c <HAL_UART_MspInit+0x198>)
 8003ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad4:	4a51      	ldr	r2, [pc, #324]	@ (8003c1c <HAL_UART_MspInit+0x198>)
 8003ad6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ada:	6613      	str	r3, [r2, #96]	@ 0x60
 8003adc:	4b4f      	ldr	r3, [pc, #316]	@ (8003c1c <HAL_UART_MspInit+0x198>)
 8003ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ae0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ae8:	4b4c      	ldr	r3, [pc, #304]	@ (8003c1c <HAL_UART_MspInit+0x198>)
 8003aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aec:	4a4b      	ldr	r2, [pc, #300]	@ (8003c1c <HAL_UART_MspInit+0x198>)
 8003aee:	f043 0302 	orr.w	r3, r3, #2
 8003af2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003af4:	4b49      	ldr	r3, [pc, #292]	@ (8003c1c <HAL_UART_MspInit+0x198>)
 8003af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	617b      	str	r3, [r7, #20]
 8003afe:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8003b00:	23c0      	movs	r3, #192	@ 0xc0
 8003b02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b06:	2302      	movs	r3, #2
 8003b08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b12:	2303      	movs	r3, #3
 8003b14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b18:	2307      	movs	r3, #7
 8003b1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b1e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003b22:	4619      	mov	r1, r3
 8003b24:	483e      	ldr	r0, [pc, #248]	@ (8003c20 <HAL_UART_MspInit+0x19c>)
 8003b26:	f000 ffe7 	bl	8004af8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003b2a:	4b3e      	ldr	r3, [pc, #248]	@ (8003c24 <HAL_UART_MspInit+0x1a0>)
 8003b2c:	4a3e      	ldr	r2, [pc, #248]	@ (8003c28 <HAL_UART_MspInit+0x1a4>)
 8003b2e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8003b30:	4b3c      	ldr	r3, [pc, #240]	@ (8003c24 <HAL_UART_MspInit+0x1a0>)
 8003b32:	2202      	movs	r2, #2
 8003b34:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b36:	4b3b      	ldr	r3, [pc, #236]	@ (8003c24 <HAL_UART_MspInit+0x1a0>)
 8003b38:	2210      	movs	r2, #16
 8003b3a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b3c:	4b39      	ldr	r3, [pc, #228]	@ (8003c24 <HAL_UART_MspInit+0x1a0>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b42:	4b38      	ldr	r3, [pc, #224]	@ (8003c24 <HAL_UART_MspInit+0x1a0>)
 8003b44:	2280      	movs	r2, #128	@ 0x80
 8003b46:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b48:	4b36      	ldr	r3, [pc, #216]	@ (8003c24 <HAL_UART_MspInit+0x1a0>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b4e:	4b35      	ldr	r3, [pc, #212]	@ (8003c24 <HAL_UART_MspInit+0x1a0>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003b54:	4b33      	ldr	r3, [pc, #204]	@ (8003c24 <HAL_UART_MspInit+0x1a0>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b5a:	4b32      	ldr	r3, [pc, #200]	@ (8003c24 <HAL_UART_MspInit+0x1a0>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003b60:	4830      	ldr	r0, [pc, #192]	@ (8003c24 <HAL_UART_MspInit+0x1a0>)
 8003b62:	f000 fd53 	bl	800460c <HAL_DMA_Init>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 8003b6c:	f7ff fe12 	bl	8003794 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a2c      	ldr	r2, [pc, #176]	@ (8003c24 <HAL_UART_MspInit+0x1a0>)
 8003b74:	671a      	str	r2, [r3, #112]	@ 0x70
 8003b76:	4a2b      	ldr	r2, [pc, #172]	@ (8003c24 <HAL_UART_MspInit+0x1a0>)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2105      	movs	r1, #5
 8003b80:	2025      	movs	r0, #37	@ 0x25
 8003b82:	f000 fc0d 	bl	80043a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003b86:	2025      	movs	r0, #37	@ 0x25
 8003b88:	f000 fc26 	bl	80043d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003b8c:	e040      	b.n	8003c10 <HAL_UART_MspInit+0x18c>
  else if(huart->Instance==USART3)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a26      	ldr	r2, [pc, #152]	@ (8003c2c <HAL_UART_MspInit+0x1a8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d13b      	bne.n	8003c10 <HAL_UART_MspInit+0x18c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003b98:	2304      	movs	r3, #4
 8003b9a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ba0:	f107 031c 	add.w	r3, r7, #28
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f002 fb79 	bl	800629c <HAL_RCCEx_PeriphCLKConfig>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8003bb0:	f7ff fdf0 	bl	8003794 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003bb4:	4b19      	ldr	r3, [pc, #100]	@ (8003c1c <HAL_UART_MspInit+0x198>)
 8003bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb8:	4a18      	ldr	r2, [pc, #96]	@ (8003c1c <HAL_UART_MspInit+0x198>)
 8003bba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bc0:	4b16      	ldr	r3, [pc, #88]	@ (8003c1c <HAL_UART_MspInit+0x198>)
 8003bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bcc:	4b13      	ldr	r3, [pc, #76]	@ (8003c1c <HAL_UART_MspInit+0x198>)
 8003bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd0:	4a12      	ldr	r2, [pc, #72]	@ (8003c1c <HAL_UART_MspInit+0x198>)
 8003bd2:	f043 0308 	orr.w	r3, r3, #8
 8003bd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bd8:	4b10      	ldr	r3, [pc, #64]	@ (8003c1c <HAL_UART_MspInit+0x198>)
 8003bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bdc:	f003 0308 	and.w	r3, r3, #8
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8003be4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003be8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bec:	2302      	movs	r3, #2
 8003bee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003bfe:	2307      	movs	r3, #7
 8003c00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c04:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4809      	ldr	r0, [pc, #36]	@ (8003c30 <HAL_UART_MspInit+0x1ac>)
 8003c0c:	f000 ff74 	bl	8004af8 <HAL_GPIO_Init>
}
 8003c10:	bf00      	nop
 8003c12:	37b8      	adds	r7, #184	@ 0xb8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40013800 	.word	0x40013800
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	48000400 	.word	0x48000400
 8003c24:	2000213c 	.word	0x2000213c
 8003c28:	40020044 	.word	0x40020044
 8003c2c:	40004800 	.word	0x40004800
 8003c30:	48000c00 	.word	0x48000c00

08003c34 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b0ac      	sub	sp, #176	@ 0xb0
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c3c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	605a      	str	r2, [r3, #4]
 8003c46:	609a      	str	r2, [r3, #8]
 8003c48:	60da      	str	r2, [r3, #12]
 8003c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c4c:	f107 0314 	add.w	r3, r7, #20
 8003c50:	2288      	movs	r2, #136	@ 0x88
 8003c52:	2100      	movs	r1, #0
 8003c54:	4618      	mov	r0, r3
 8003c56:	f008 f9d5 	bl	800c004 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c62:	d17c      	bne.n	8003d5e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003c64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c68:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003c6a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003c6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003c72:	2301      	movs	r3, #1
 8003c74:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003c76:	2301      	movs	r3, #1
 8003c78:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8003c7a:	2318      	movs	r3, #24
 8003c7c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003c7e:	2307      	movs	r3, #7
 8003c80:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003c82:	2302      	movs	r3, #2
 8003c84:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003c86:	2302      	movs	r3, #2
 8003c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8003c8a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003c8e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c90:	f107 0314 	add.w	r3, r7, #20
 8003c94:	4618      	mov	r0, r3
 8003c96:	f002 fb01 	bl	800629c <HAL_RCCEx_PeriphCLKConfig>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8003ca0:	f7ff fd78 	bl	8003794 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ca4:	4b30      	ldr	r3, [pc, #192]	@ (8003d68 <HAL_PCD_MspInit+0x134>)
 8003ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ca8:	4a2f      	ldr	r2, [pc, #188]	@ (8003d68 <HAL_PCD_MspInit+0x134>)
 8003caa:	f043 0301 	orr.w	r3, r3, #1
 8003cae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cb0:	4b2d      	ldr	r3, [pc, #180]	@ (8003d68 <HAL_PCD_MspInit+0x134>)
 8003cb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8003cbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003cc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003cd0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cda:	f000 ff0d 	bl	8004af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8003cde:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003ce2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003cf8:	230a      	movs	r3, #10
 8003cfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cfe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003d02:	4619      	mov	r1, r3
 8003d04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d08:	f000 fef6 	bl	8004af8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003d0c:	4b16      	ldr	r3, [pc, #88]	@ (8003d68 <HAL_PCD_MspInit+0x134>)
 8003d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d10:	4a15      	ldr	r2, [pc, #84]	@ (8003d68 <HAL_PCD_MspInit+0x134>)
 8003d12:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d18:	4b13      	ldr	r3, [pc, #76]	@ (8003d68 <HAL_PCD_MspInit+0x134>)
 8003d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d24:	4b10      	ldr	r3, [pc, #64]	@ (8003d68 <HAL_PCD_MspInit+0x134>)
 8003d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d114      	bne.n	8003d5a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d30:	4b0d      	ldr	r3, [pc, #52]	@ (8003d68 <HAL_PCD_MspInit+0x134>)
 8003d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d34:	4a0c      	ldr	r2, [pc, #48]	@ (8003d68 <HAL_PCD_MspInit+0x134>)
 8003d36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d68 <HAL_PCD_MspInit+0x134>)
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8003d48:	f001 fbaa 	bl	80054a0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d4c:	4b06      	ldr	r3, [pc, #24]	@ (8003d68 <HAL_PCD_MspInit+0x134>)
 8003d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d50:	4a05      	ldr	r2, [pc, #20]	@ (8003d68 <HAL_PCD_MspInit+0x134>)
 8003d52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d56:	6593      	str	r3, [r2, #88]	@ 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003d58:	e001      	b.n	8003d5e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8003d5a:	f001 fba1 	bl	80054a0 <HAL_PWREx_EnableVddUSB>
}
 8003d5e:	bf00      	nop
 8003d60:	37b0      	adds	r7, #176	@ 0xb0
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40021000 	.word	0x40021000

08003d6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08c      	sub	sp, #48	@ 0x30
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003d7a:	4b2e      	ldr	r3, [pc, #184]	@ (8003e34 <HAL_InitTick+0xc8>)
 8003d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d7e:	4a2d      	ldr	r2, [pc, #180]	@ (8003e34 <HAL_InitTick+0xc8>)
 8003d80:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003d84:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d86:	4b2b      	ldr	r3, [pc, #172]	@ (8003e34 <HAL_InitTick+0xc8>)
 8003d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d8e:	60bb      	str	r3, [r7, #8]
 8003d90:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d92:	f107 020c 	add.w	r2, r7, #12
 8003d96:	f107 0310 	add.w	r3, r7, #16
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f002 f9eb 	bl	8006178 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003da2:	f002 f9d3 	bl	800614c <HAL_RCC_GetPCLK2Freq>
 8003da6:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003daa:	4a23      	ldr	r2, [pc, #140]	@ (8003e38 <HAL_InitTick+0xcc>)
 8003dac:	fba2 2303 	umull	r2, r3, r2, r3
 8003db0:	0c9b      	lsrs	r3, r3, #18
 8003db2:	3b01      	subs	r3, #1
 8003db4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003db6:	4b21      	ldr	r3, [pc, #132]	@ (8003e3c <HAL_InitTick+0xd0>)
 8003db8:	4a21      	ldr	r2, [pc, #132]	@ (8003e40 <HAL_InitTick+0xd4>)
 8003dba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8003e3c <HAL_InitTick+0xd0>)
 8003dbe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003dc2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8003e3c <HAL_InitTick+0xd0>)
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003dca:	4b1c      	ldr	r3, [pc, #112]	@ (8003e3c <HAL_InitTick+0xd0>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8003e3c <HAL_InitTick+0xd0>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dd6:	4b19      	ldr	r3, [pc, #100]	@ (8003e3c <HAL_InitTick+0xd0>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003ddc:	4817      	ldr	r0, [pc, #92]	@ (8003e3c <HAL_InitTick+0xd0>)
 8003dde:	f002 ffcc 	bl	8006d7a <HAL_TIM_Base_Init>
 8003de2:	4603      	mov	r3, r0
 8003de4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003de8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d11b      	bne.n	8003e28 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003df0:	4812      	ldr	r0, [pc, #72]	@ (8003e3c <HAL_InitTick+0xd0>)
 8003df2:	f003 f823 	bl	8006e3c <HAL_TIM_Base_Start_IT>
 8003df6:	4603      	mov	r3, r0
 8003df8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003dfc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d111      	bne.n	8003e28 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003e04:	2019      	movs	r0, #25
 8003e06:	f000 fae7 	bl	80043d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b0f      	cmp	r3, #15
 8003e0e:	d808      	bhi.n	8003e22 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8003e10:	2200      	movs	r2, #0
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	2019      	movs	r0, #25
 8003e16:	f000 fac3 	bl	80043a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e44 <HAL_InitTick+0xd8>)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	e002      	b.n	8003e28 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003e28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3730      	adds	r7, #48	@ 0x30
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40021000 	.word	0x40021000
 8003e38:	431bde83 	.word	0x431bde83
 8003e3c:	20002ed4 	.word	0x20002ed4
 8003e40:	40012c00 	.word	0x40012c00
 8003e44:	20000004 	.word	0x20000004

08003e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e4c:	bf00      	nop
 8003e4e:	e7fd      	b.n	8003e4c <NMI_Handler+0x4>

08003e50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e54:	bf00      	nop
 8003e56:	e7fd      	b.n	8003e54 <HardFault_Handler+0x4>

08003e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e5c:	bf00      	nop
 8003e5e:	e7fd      	b.n	8003e5c <MemManage_Handler+0x4>

08003e60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e64:	bf00      	nop
 8003e66:	e7fd      	b.n	8003e64 <BusFault_Handler+0x4>

08003e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e6c:	bf00      	nop
 8003e6e:	e7fd      	b.n	8003e6c <UsageFault_Handler+0x4>

08003e70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e74:	bf00      	nop
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
	...

08003e80 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003e84:	4809      	ldr	r0, [pc, #36]	@ (8003eac <DMA1_Channel4_IRQHandler+0x2c>)
 8003e86:	f000 fd58 	bl	800493a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  if ((DMA1->ISR & DMA_ISR_TCIF4) != 0) /* Test if transfer completed on DMA channel 2 */
 8003e8a:	4b09      	ldr	r3, [pc, #36]	@ (8003eb0 <DMA1_Channel4_IRQHandler+0x30>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d007      	beq.n	8003ea6 <DMA1_Channel4_IRQHandler+0x26>
  {
	  //txTail++;
	  //txTail &= (MAX_SERIAL_TX_BUFFS-1);

	  // Clear the interrupt pending flag
	  __HAL_DMA_DISABLE(&hdma_usart1_tx);
 8003e96:	4b05      	ldr	r3, [pc, #20]	@ (8003eac <DMA1_Channel4_IRQHandler+0x2c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4b03      	ldr	r3, [pc, #12]	@ (8003eac <DMA1_Channel4_IRQHandler+0x2c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0201 	bic.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
	  DMA_ClearITPendingBit(DMA_ISR_TCIF4);
	  DMA_Cmd(DMA1_Channel4, DISABLE);*/
  }

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003ea6:	bf00      	nop
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	2000213c 	.word	0x2000213c
 8003eb0:	40020000 	.word	0x40020000

08003eb4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8003eb8:	2020      	movs	r0, #32
 8003eba:	f000 ffdf 	bl	8004e7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8003ebe:	2040      	movs	r0, #64	@ 0x40
 8003ec0:	f000 ffdc 	bl	8004e7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8003ec4:	2080      	movs	r0, #128	@ 0x80
 8003ec6:	f000 ffd9 	bl	8004e7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8003eca:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003ece:	f000 ffd5 	bl	8004e7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003ed2:	bf00      	nop
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003edc:	4802      	ldr	r0, [pc, #8]	@ (8003ee8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003ede:	f003 f81d 	bl	8006f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003ee2:	bf00      	nop
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20002ed4 	.word	0x20002ed4

08003eec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ef0:	4802      	ldr	r0, [pc, #8]	@ (8003efc <USART1_IRQHandler+0x10>)
 8003ef2:	f003 fabf 	bl	8007474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003ef6:	bf00      	nop
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	2000202c 	.word	0x2000202c

08003f00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8003f04:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003f08:	f000 ffb8 	bl	8004e7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8003f0c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003f10:	f000 ffb4 	bl	8004e7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8003f14:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003f18:	f000 ffb0 	bl	8004e7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8003f1c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003f20:	f000 ffac 	bl	8004e7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8003f24:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003f28:	f000 ffa8 	bl	8004e7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003f2c:	bf00      	nop
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003f34:	4b06      	ldr	r3, [pc, #24]	@ (8003f50 <SystemInit+0x20>)
 8003f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f3a:	4a05      	ldr	r2, [pc, #20]	@ (8003f50 <SystemInit+0x20>)
 8003f3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003f44:	bf00      	nop
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	e000ed00 	.word	0xe000ed00

08003f54 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if ((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8003f5a:	4b4f      	ldr	r3, [pc, #316]	@ (8004098 <SystemCoreClockUpdate+0x144>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d107      	bne.n	8003f76 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8003f66:	4b4c      	ldr	r3, [pc, #304]	@ (8004098 <SystemCoreClockUpdate+0x144>)
 8003f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f6c:	0a1b      	lsrs	r3, r3, #8
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	e005      	b.n	8003f82 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8003f76:	4b48      	ldr	r3, [pc, #288]	@ (8004098 <SystemCoreClockUpdate+0x144>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	091b      	lsrs	r3, r3, #4
 8003f7c:	f003 030f 	and.w	r3, r3, #15
 8003f80:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8003f82:	4a46      	ldr	r2, [pc, #280]	@ (800409c <SystemCoreClockUpdate+0x148>)
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f8a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f8c:	4b42      	ldr	r3, [pc, #264]	@ (8004098 <SystemCoreClockUpdate+0x144>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 030c 	and.w	r3, r3, #12
 8003f94:	2b0c      	cmp	r3, #12
 8003f96:	d866      	bhi.n	8004066 <SystemCoreClockUpdate+0x112>
 8003f98:	a201      	add	r2, pc, #4	@ (adr r2, 8003fa0 <SystemCoreClockUpdate+0x4c>)
 8003f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9e:	bf00      	nop
 8003fa0:	08003fd5 	.word	0x08003fd5
 8003fa4:	08004067 	.word	0x08004067
 8003fa8:	08004067 	.word	0x08004067
 8003fac:	08004067 	.word	0x08004067
 8003fb0:	08003fdd 	.word	0x08003fdd
 8003fb4:	08004067 	.word	0x08004067
 8003fb8:	08004067 	.word	0x08004067
 8003fbc:	08004067 	.word	0x08004067
 8003fc0:	08003fe5 	.word	0x08003fe5
 8003fc4:	08004067 	.word	0x08004067
 8003fc8:	08004067 	.word	0x08004067
 8003fcc:	08004067 	.word	0x08004067
 8003fd0:	08003fed 	.word	0x08003fed
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8003fd4:	4a32      	ldr	r2, [pc, #200]	@ (80040a0 <SystemCoreClockUpdate+0x14c>)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	6013      	str	r3, [r2, #0]
      break;
 8003fda:	e048      	b.n	800406e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8003fdc:	4b30      	ldr	r3, [pc, #192]	@ (80040a0 <SystemCoreClockUpdate+0x14c>)
 8003fde:	4a31      	ldr	r2, [pc, #196]	@ (80040a4 <SystemCoreClockUpdate+0x150>)
 8003fe0:	601a      	str	r2, [r3, #0]
      break;
 8003fe2:	e044      	b.n	800406e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003fe4:	4b2e      	ldr	r3, [pc, #184]	@ (80040a0 <SystemCoreClockUpdate+0x14c>)
 8003fe6:	4a30      	ldr	r2, [pc, #192]	@ (80040a8 <SystemCoreClockUpdate+0x154>)
 8003fe8:	601a      	str	r2, [r3, #0]
      break;
 8003fea:	e040      	b.n	800406e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003fec:	4b2a      	ldr	r3, [pc, #168]	@ (8004098 <SystemCoreClockUpdate+0x144>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f003 0303 	and.w	r3, r3, #3
 8003ff4:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8003ff6:	4b28      	ldr	r3, [pc, #160]	@ (8004098 <SystemCoreClockUpdate+0x144>)
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	091b      	lsrs	r3, r3, #4
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	3301      	adds	r3, #1
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d003      	beq.n	8004012 <SystemCoreClockUpdate+0xbe>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b03      	cmp	r3, #3
 800400e:	d006      	beq.n	800401e <SystemCoreClockUpdate+0xca>
 8004010:	e00b      	b.n	800402a <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8004012:	4a24      	ldr	r2, [pc, #144]	@ (80040a4 <SystemCoreClockUpdate+0x150>)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	fbb2 f3f3 	udiv	r3, r2, r3
 800401a:	613b      	str	r3, [r7, #16]
          break;
 800401c:	e00b      	b.n	8004036 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800401e:	4a22      	ldr	r2, [pc, #136]	@ (80040a8 <SystemCoreClockUpdate+0x154>)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	fbb2 f3f3 	udiv	r3, r2, r3
 8004026:	613b      	str	r3, [r7, #16]
          break;
 8004028:	e005      	b.n	8004036 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004032:	613b      	str	r3, [r7, #16]
          break;
 8004034:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8004036:	4b18      	ldr	r3, [pc, #96]	@ (8004098 <SystemCoreClockUpdate+0x144>)
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	0a1b      	lsrs	r3, r3, #8
 800403c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	fb02 f303 	mul.w	r3, r2, r3
 8004046:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8004048:	4b13      	ldr	r3, [pc, #76]	@ (8004098 <SystemCoreClockUpdate+0x144>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	0e5b      	lsrs	r3, r3, #25
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	3301      	adds	r3, #1
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004060:	4a0f      	ldr	r2, [pc, #60]	@ (80040a0 <SystemCoreClockUpdate+0x14c>)
 8004062:	6013      	str	r3, [r2, #0]
      break;
 8004064:	e003      	b.n	800406e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8004066:	4a0e      	ldr	r2, [pc, #56]	@ (80040a0 <SystemCoreClockUpdate+0x14c>)
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	6013      	str	r3, [r2, #0]
      break;
 800406c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800406e:	4b0a      	ldr	r3, [pc, #40]	@ (8004098 <SystemCoreClockUpdate+0x144>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	091b      	lsrs	r3, r3, #4
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	4a0c      	ldr	r2, [pc, #48]	@ (80040ac <SystemCoreClockUpdate+0x158>)
 800407a:	5cd3      	ldrb	r3, [r2, r3]
 800407c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800407e:	4b08      	ldr	r3, [pc, #32]	@ (80040a0 <SystemCoreClockUpdate+0x14c>)
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	fa22 f303 	lsr.w	r3, r2, r3
 8004088:	4a05      	ldr	r2, [pc, #20]	@ (80040a0 <SystemCoreClockUpdate+0x14c>)
 800408a:	6013      	str	r3, [r2, #0]
}
 800408c:	bf00      	nop
 800408e:	371c      	adds	r7, #28
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	40021000 	.word	0x40021000
 800409c:	0800c4b8 	.word	0x0800c4b8
 80040a0:	20000000 	.word	0x20000000
 80040a4:	00f42400 	.word	0x00f42400
 80040a8:	007a1200 	.word	0x007a1200
 80040ac:	0800c4a0 	.word	0x0800c4a0

080040b0 <init_cti_trace>:

// The ID/index of each function in the filter
#define HAL_UART_Transmit_DMA_filter 0

void init_cti_trace(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
	chn_hal_uart = xTraceRegisterString("HAL_UART");
 80040b4:	4805      	ldr	r0, [pc, #20]	@ (80040cc <init_cti_trace+0x1c>)
 80040b6:	f7fe fe71 	bl	8002d9c <xTraceRegisterString>
 80040ba:	4603      	mov	r3, r0
 80040bc:	4a04      	ldr	r2, [pc, #16]	@ (80040d0 <init_cti_trace+0x20>)
 80040be:	6013      	str	r3, [r2, #0]
	event_filter[HAL_UART_Transmit_DMA_filter] = 1; // Include this function
 80040c0:	4b04      	ldr	r3, [pc, #16]	@ (80040d4 <init_cti_trace+0x24>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	701a      	strb	r2, [r3, #0]
}
 80040c6:	bf00      	nop
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	0800c408 	.word	0x0800c408
 80040d0:	20002f20 	.word	0x20002f20
 80040d4:	20002f24 	.word	0x20002f24

080040d8 <__wrap_HAL_UART_Transmit_DMA>:
// To avoid warnings
extern HAL_StatusTypeDef __real_HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size);

// The wrapper function traces all calls of this function (add func
HAL_StatusTypeDef __wrap_HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	4613      	mov	r3, r2
 80040e4:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	status = __real_HAL_UART_Transmit_DMA(huart, pData, Size);
 80040e6:	88fb      	ldrh	r3, [r7, #6]
 80040e8:	461a      	mov	r2, r3
 80040ea:	68b9      	ldr	r1, [r7, #8]
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f003 f945 	bl	800737c <HAL_UART_Transmit_DMA>
 80040f2:	4603      	mov	r3, r0
 80040f4:	75fb      	strb	r3, [r7, #23]

	if (event_filter[HAL_UART_Transmit_DMA_filter] == 1)
 80040f6:	4b08      	ldr	r3, [pc, #32]	@ (8004118 <__wrap_HAL_UART_Transmit_DMA+0x40>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d106      	bne.n	800410e <__wrap_HAL_UART_Transmit_DMA+0x36>
	{
		xTracePrintF(chn_hal_uart, "HAL_UART_Transmit_DMA(%d) returned %d", Size, status);
 8004100:	4b06      	ldr	r3, [pc, #24]	@ (800411c <__wrap_HAL_UART_Transmit_DMA+0x44>)
 8004102:	6818      	ldr	r0, [r3, #0]
 8004104:	88fa      	ldrh	r2, [r7, #6]
 8004106:	7dfb      	ldrb	r3, [r7, #23]
 8004108:	4905      	ldr	r1, [pc, #20]	@ (8004120 <__wrap_HAL_UART_Transmit_DMA+0x48>)
 800410a:	f7fd ffbb 	bl	8002084 <xTracePrintF>
	}

	return status;
 800410e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	20002f24 	.word	0x20002f24
 800411c:	20002f20 	.word	0x20002f20
 8004120:	0800c414 	.word	0x0800c414

08004124 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004124:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800415c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004128:	f7ff ff02 	bl	8003f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800412c:	480c      	ldr	r0, [pc, #48]	@ (8004160 <LoopForever+0x6>)
  ldr r1, =_edata
 800412e:	490d      	ldr	r1, [pc, #52]	@ (8004164 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004130:	4a0d      	ldr	r2, [pc, #52]	@ (8004168 <LoopForever+0xe>)
  movs r3, #0
 8004132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004134:	e002      	b.n	800413c <LoopCopyDataInit>

08004136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800413a:	3304      	adds	r3, #4

0800413c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800413c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800413e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004140:	d3f9      	bcc.n	8004136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004142:	4a0a      	ldr	r2, [pc, #40]	@ (800416c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004144:	4c0a      	ldr	r4, [pc, #40]	@ (8004170 <LoopForever+0x16>)
  movs r3, #0
 8004146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004148:	e001      	b.n	800414e <LoopFillZerobss>

0800414a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800414a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800414c:	3204      	adds	r2, #4

0800414e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800414e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004150:	d3fb      	bcc.n	800414a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004152:	f007 ffb5 	bl	800c0c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004156:	f7fe fee1 	bl	8002f1c <main>

0800415a <LoopForever>:

LoopForever:
    b LoopForever
 800415a:	e7fe      	b.n	800415a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800415c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004164:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8004168:	0800c4f8 	.word	0x0800c4f8
  ldr r2, =_sbss
 800416c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8004170:	20004aac 	.word	0x20004aac

08004174 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004174:	e7fe      	b.n	8004174 <ADC1_2_IRQHandler>

08004176 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b082      	sub	sp, #8
 800417a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800417c:	2300      	movs	r3, #0
 800417e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004180:	2003      	movs	r0, #3
 8004182:	f000 f902 	bl	800438a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004186:	200f      	movs	r0, #15
 8004188:	f7ff fdf0 	bl	8003d6c <HAL_InitTick>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d002      	beq.n	8004198 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	71fb      	strb	r3, [r7, #7]
 8004196:	e001      	b.n	800419c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004198:	f7ff fb02 	bl	80037a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800419c:	79fb      	ldrb	r3, [r7, #7]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80041ac:	4b06      	ldr	r3, [pc, #24]	@ (80041c8 <HAL_IncTick+0x20>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	4b06      	ldr	r3, [pc, #24]	@ (80041cc <HAL_IncTick+0x24>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4413      	add	r3, r2
 80041b8:	4a04      	ldr	r2, [pc, #16]	@ (80041cc <HAL_IncTick+0x24>)
 80041ba:	6013      	str	r3, [r2, #0]
}
 80041bc:	bf00      	nop
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	20000008 	.word	0x20000008
 80041cc:	20002fa4 	.word	0x20002fa4

080041d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  return uwTick;
 80041d4:	4b03      	ldr	r3, [pc, #12]	@ (80041e4 <HAL_GetTick+0x14>)
 80041d6:	681b      	ldr	r3, [r3, #0]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	20002fa4 	.word	0x20002fa4

080041e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041f0:	f7ff ffee 	bl	80041d0 <HAL_GetTick>
 80041f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004200:	d005      	beq.n	800420e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004202:	4b0a      	ldr	r3, [pc, #40]	@ (800422c <HAL_Delay+0x44>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4413      	add	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800420e:	bf00      	nop
 8004210:	f7ff ffde 	bl	80041d0 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	429a      	cmp	r2, r3
 800421e:	d8f7      	bhi.n	8004210 <HAL_Delay+0x28>
  {
  }
}
 8004220:	bf00      	nop
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20000008 	.word	0x20000008

08004230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004240:	4b0c      	ldr	r3, [pc, #48]	@ (8004274 <__NVIC_SetPriorityGrouping+0x44>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800424c:	4013      	ands	r3, r2
 800424e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004258:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800425c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004262:	4a04      	ldr	r2, [pc, #16]	@ (8004274 <__NVIC_SetPriorityGrouping+0x44>)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	60d3      	str	r3, [r2, #12]
}
 8004268:	bf00      	nop
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	e000ed00 	.word	0xe000ed00

08004278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800427c:	4b04      	ldr	r3, [pc, #16]	@ (8004290 <__NVIC_GetPriorityGrouping+0x18>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	0a1b      	lsrs	r3, r3, #8
 8004282:	f003 0307 	and.w	r3, r3, #7
}
 8004286:	4618      	mov	r0, r3
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	e000ed00 	.word	0xe000ed00

08004294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	4603      	mov	r3, r0
 800429c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800429e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	db0b      	blt.n	80042be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	f003 021f 	and.w	r2, r3, #31
 80042ac:	4907      	ldr	r1, [pc, #28]	@ (80042cc <__NVIC_EnableIRQ+0x38>)
 80042ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	2001      	movs	r0, #1
 80042b6:	fa00 f202 	lsl.w	r2, r0, r2
 80042ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	e000e100 	.word	0xe000e100

080042d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	6039      	str	r1, [r7, #0]
 80042da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	db0a      	blt.n	80042fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	490c      	ldr	r1, [pc, #48]	@ (800431c <__NVIC_SetPriority+0x4c>)
 80042ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ee:	0112      	lsls	r2, r2, #4
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	440b      	add	r3, r1
 80042f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042f8:	e00a      	b.n	8004310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	4908      	ldr	r1, [pc, #32]	@ (8004320 <__NVIC_SetPriority+0x50>)
 8004300:	79fb      	ldrb	r3, [r7, #7]
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	3b04      	subs	r3, #4
 8004308:	0112      	lsls	r2, r2, #4
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	440b      	add	r3, r1
 800430e:	761a      	strb	r2, [r3, #24]
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	e000e100 	.word	0xe000e100
 8004320:	e000ed00 	.word	0xe000ed00

08004324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004324:	b480      	push	{r7}
 8004326:	b089      	sub	sp, #36	@ 0x24
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f1c3 0307 	rsb	r3, r3, #7
 800433e:	2b04      	cmp	r3, #4
 8004340:	bf28      	it	cs
 8004342:	2304      	movcs	r3, #4
 8004344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	3304      	adds	r3, #4
 800434a:	2b06      	cmp	r3, #6
 800434c:	d902      	bls.n	8004354 <NVIC_EncodePriority+0x30>
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	3b03      	subs	r3, #3
 8004352:	e000      	b.n	8004356 <NVIC_EncodePriority+0x32>
 8004354:	2300      	movs	r3, #0
 8004356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004358:	f04f 32ff 	mov.w	r2, #4294967295
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	43da      	mvns	r2, r3
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	401a      	ands	r2, r3
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800436c:	f04f 31ff 	mov.w	r1, #4294967295
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	fa01 f303 	lsl.w	r3, r1, r3
 8004376:	43d9      	mvns	r1, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800437c:	4313      	orrs	r3, r2
         );
}
 800437e:	4618      	mov	r0, r3
 8004380:	3724      	adds	r7, #36	@ 0x24
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7ff ff4c 	bl	8004230 <__NVIC_SetPriorityGrouping>
}
 8004398:	bf00      	nop
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80043ae:	2300      	movs	r3, #0
 80043b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043b2:	f7ff ff61 	bl	8004278 <__NVIC_GetPriorityGrouping>
 80043b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	68b9      	ldr	r1, [r7, #8]
 80043bc:	6978      	ldr	r0, [r7, #20]
 80043be:	f7ff ffb1 	bl	8004324 <NVIC_EncodePriority>
 80043c2:	4602      	mov	r2, r0
 80043c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043c8:	4611      	mov	r1, r2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff ff80 	bl	80042d0 <__NVIC_SetPriority>
}
 80043d0:	bf00      	nop
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff ff54 	bl	8004294 <__NVIC_EnableIRQ>
}
 80043ec:	bf00      	nop
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e0ac      	b.n	8004560 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f000 f8b2 	bl	8004574 <DFSDM_GetChannelFromInstance>
 8004410:	4603      	mov	r3, r0
 8004412:	4a55      	ldr	r2, [pc, #340]	@ (8004568 <HAL_DFSDM_ChannelInit+0x174>)
 8004414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e09f      	b.n	8004560 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7ff f9e5 	bl	80037f0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004426:	4b51      	ldr	r3, [pc, #324]	@ (800456c <HAL_DFSDM_ChannelInit+0x178>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3301      	adds	r3, #1
 800442c:	4a4f      	ldr	r2, [pc, #316]	@ (800456c <HAL_DFSDM_ChannelInit+0x178>)
 800442e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004430:	4b4e      	ldr	r3, [pc, #312]	@ (800456c <HAL_DFSDM_ChannelInit+0x178>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d125      	bne.n	8004484 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004438:	4b4d      	ldr	r3, [pc, #308]	@ (8004570 <HAL_DFSDM_ChannelInit+0x17c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a4c      	ldr	r2, [pc, #304]	@ (8004570 <HAL_DFSDM_ChannelInit+0x17c>)
 800443e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004442:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004444:	4b4a      	ldr	r3, [pc, #296]	@ (8004570 <HAL_DFSDM_ChannelInit+0x17c>)
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	4948      	ldr	r1, [pc, #288]	@ (8004570 <HAL_DFSDM_ChannelInit+0x17c>)
 800444e:	4313      	orrs	r3, r2
 8004450:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004452:	4b47      	ldr	r3, [pc, #284]	@ (8004570 <HAL_DFSDM_ChannelInit+0x17c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a46      	ldr	r2, [pc, #280]	@ (8004570 <HAL_DFSDM_ChannelInit+0x17c>)
 8004458:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 800445c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	791b      	ldrb	r3, [r3, #4]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d108      	bne.n	8004478 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004466:	4b42      	ldr	r3, [pc, #264]	@ (8004570 <HAL_DFSDM_ChannelInit+0x17c>)
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	3b01      	subs	r3, #1
 8004470:	041b      	lsls	r3, r3, #16
 8004472:	493f      	ldr	r1, [pc, #252]	@ (8004570 <HAL_DFSDM_ChannelInit+0x17c>)
 8004474:	4313      	orrs	r3, r2
 8004476:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004478:	4b3d      	ldr	r3, [pc, #244]	@ (8004570 <HAL_DFSDM_ChannelInit+0x17c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a3c      	ldr	r2, [pc, #240]	@ (8004570 <HAL_DFSDM_ChannelInit+0x17c>)
 800447e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004482:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8004492:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6819      	ldr	r1, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80044a2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80044a8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 020f 	bic.w	r2, r2, #15
 80044c0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6819      	ldr	r1, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80044e8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6899      	ldr	r1, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f8:	3b01      	subs	r3, #1
 80044fa:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80044fc:	431a      	orrs	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f002 0207 	and.w	r2, r2, #7
 8004514:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6859      	ldr	r1, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004520:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004526:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004528:	431a      	orrs	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004540:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f000 f810 	bl	8004574 <DFSDM_GetChannelFromInstance>
 8004554:	4602      	mov	r2, r0
 8004556:	4904      	ldr	r1, [pc, #16]	@ (8004568 <HAL_DFSDM_ChannelInit+0x174>)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20002fac 	.word	0x20002fac
 800456c:	20002fa8 	.word	0x20002fa8
 8004570:	40016000 	.word	0x40016000

08004574 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a1c      	ldr	r2, [pc, #112]	@ (80045f0 <DFSDM_GetChannelFromInstance+0x7c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d102      	bne.n	800458a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	e02b      	b.n	80045e2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a19      	ldr	r2, [pc, #100]	@ (80045f4 <DFSDM_GetChannelFromInstance+0x80>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d102      	bne.n	8004598 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004592:	2301      	movs	r3, #1
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	e024      	b.n	80045e2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a17      	ldr	r2, [pc, #92]	@ (80045f8 <DFSDM_GetChannelFromInstance+0x84>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d102      	bne.n	80045a6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80045a0:	2302      	movs	r3, #2
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	e01d      	b.n	80045e2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a14      	ldr	r2, [pc, #80]	@ (80045fc <DFSDM_GetChannelFromInstance+0x88>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d102      	bne.n	80045b4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80045ae:	2304      	movs	r3, #4
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	e016      	b.n	80045e2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a12      	ldr	r2, [pc, #72]	@ (8004600 <DFSDM_GetChannelFromInstance+0x8c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d102      	bne.n	80045c2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80045bc:	2305      	movs	r3, #5
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	e00f      	b.n	80045e2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a0f      	ldr	r2, [pc, #60]	@ (8004604 <DFSDM_GetChannelFromInstance+0x90>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d102      	bne.n	80045d0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80045ca:	2306      	movs	r3, #6
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	e008      	b.n	80045e2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004608 <DFSDM_GetChannelFromInstance+0x94>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d102      	bne.n	80045de <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80045d8:	2307      	movs	r3, #7
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	e001      	b.n	80045e2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80045de:	2303      	movs	r3, #3
 80045e0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80045e2:	68fb      	ldr	r3, [r7, #12]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	40016000 	.word	0x40016000
 80045f4:	40016020 	.word	0x40016020
 80045f8:	40016040 	.word	0x40016040
 80045fc:	40016080 	.word	0x40016080
 8004600:	400160a0 	.word	0x400160a0
 8004604:	400160c0 	.word	0x400160c0
 8004608:	400160e0 	.word	0x400160e0

0800460c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e098      	b.n	8004750 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	461a      	mov	r2, r3
 8004624:	4b4d      	ldr	r3, [pc, #308]	@ (800475c <HAL_DMA_Init+0x150>)
 8004626:	429a      	cmp	r2, r3
 8004628:	d80f      	bhi.n	800464a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	4b4b      	ldr	r3, [pc, #300]	@ (8004760 <HAL_DMA_Init+0x154>)
 8004632:	4413      	add	r3, r2
 8004634:	4a4b      	ldr	r2, [pc, #300]	@ (8004764 <HAL_DMA_Init+0x158>)
 8004636:	fba2 2303 	umull	r2, r3, r2, r3
 800463a:	091b      	lsrs	r3, r3, #4
 800463c:	009a      	lsls	r2, r3, #2
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a48      	ldr	r2, [pc, #288]	@ (8004768 <HAL_DMA_Init+0x15c>)
 8004646:	641a      	str	r2, [r3, #64]	@ 0x40
 8004648:	e00e      	b.n	8004668 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	4b46      	ldr	r3, [pc, #280]	@ (800476c <HAL_DMA_Init+0x160>)
 8004652:	4413      	add	r3, r2
 8004654:	4a43      	ldr	r2, [pc, #268]	@ (8004764 <HAL_DMA_Init+0x158>)
 8004656:	fba2 2303 	umull	r2, r3, r2, r3
 800465a:	091b      	lsrs	r3, r3, #4
 800465c:	009a      	lsls	r2, r3, #2
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a42      	ldr	r2, [pc, #264]	@ (8004770 <HAL_DMA_Init+0x164>)
 8004666:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800467e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004682:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800468c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004698:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046c2:	d039      	beq.n	8004738 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c8:	4a27      	ldr	r2, [pc, #156]	@ (8004768 <HAL_DMA_Init+0x15c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d11a      	bne.n	8004704 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80046ce:	4b29      	ldr	r3, [pc, #164]	@ (8004774 <HAL_DMA_Init+0x168>)
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d6:	f003 031c 	and.w	r3, r3, #28
 80046da:	210f      	movs	r1, #15
 80046dc:	fa01 f303 	lsl.w	r3, r1, r3
 80046e0:	43db      	mvns	r3, r3
 80046e2:	4924      	ldr	r1, [pc, #144]	@ (8004774 <HAL_DMA_Init+0x168>)
 80046e4:	4013      	ands	r3, r2
 80046e6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80046e8:	4b22      	ldr	r3, [pc, #136]	@ (8004774 <HAL_DMA_Init+0x168>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6859      	ldr	r1, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f4:	f003 031c 	and.w	r3, r3, #28
 80046f8:	fa01 f303 	lsl.w	r3, r1, r3
 80046fc:	491d      	ldr	r1, [pc, #116]	@ (8004774 <HAL_DMA_Init+0x168>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	600b      	str	r3, [r1, #0]
 8004702:	e019      	b.n	8004738 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004704:	4b1c      	ldr	r3, [pc, #112]	@ (8004778 <HAL_DMA_Init+0x16c>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470c:	f003 031c 	and.w	r3, r3, #28
 8004710:	210f      	movs	r1, #15
 8004712:	fa01 f303 	lsl.w	r3, r1, r3
 8004716:	43db      	mvns	r3, r3
 8004718:	4917      	ldr	r1, [pc, #92]	@ (8004778 <HAL_DMA_Init+0x16c>)
 800471a:	4013      	ands	r3, r2
 800471c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800471e:	4b16      	ldr	r3, [pc, #88]	@ (8004778 <HAL_DMA_Init+0x16c>)
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6859      	ldr	r1, [r3, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472a:	f003 031c 	and.w	r3, r3, #28
 800472e:	fa01 f303 	lsl.w	r3, r1, r3
 8004732:	4911      	ldr	r1, [pc, #68]	@ (8004778 <HAL_DMA_Init+0x16c>)
 8004734:	4313      	orrs	r3, r2
 8004736:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	40020407 	.word	0x40020407
 8004760:	bffdfff8 	.word	0xbffdfff8
 8004764:	cccccccd 	.word	0xcccccccd
 8004768:	40020000 	.word	0x40020000
 800476c:	bffdfbf8 	.word	0xbffdfbf8
 8004770:	40020400 	.word	0x40020400
 8004774:	400200a8 	.word	0x400200a8
 8004778:	400204a8 	.word	0x400204a8

0800477c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004794:	2b01      	cmp	r3, #1
 8004796:	d101      	bne.n	800479c <HAL_DMA_Start_IT+0x20>
 8004798:	2302      	movs	r3, #2
 800479a:	e04b      	b.n	8004834 <HAL_DMA_Start_IT+0xb8>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d13a      	bne.n	8004826 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0201 	bic.w	r2, r2, #1
 80047cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	68b9      	ldr	r1, [r7, #8]
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 f95f 	bl	8004a98 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d008      	beq.n	80047f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 020e 	orr.w	r2, r2, #14
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	e00f      	b.n	8004814 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0204 	bic.w	r2, r2, #4
 8004802:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 020a 	orr.w	r2, r2, #10
 8004812:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0201 	orr.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	e005      	b.n	8004832 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800482e:	2302      	movs	r3, #2
 8004830:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004832:	7dfb      	ldrb	r3, [r7, #23]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004844:	2300      	movs	r3, #0
 8004846:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d008      	beq.n	8004866 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2204      	movs	r2, #4
 8004858:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e022      	b.n	80048ac <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 020e 	bic.w	r2, r2, #14
 8004874:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0201 	bic.w	r2, r2, #1
 8004884:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800488a:	f003 021c 	and.w	r2, r3, #28
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004892:	2101      	movs	r1, #1
 8004894:	fa01 f202 	lsl.w	r2, r1, r2
 8004898:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80048aa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048c0:	2300      	movs	r3, #0
 80048c2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d005      	beq.n	80048dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2204      	movs	r2, #4
 80048d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	73fb      	strb	r3, [r7, #15]
 80048da:	e029      	b.n	8004930 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 020e 	bic.w	r2, r2, #14
 80048ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0201 	bic.w	r2, r2, #1
 80048fa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004900:	f003 021c 	and.w	r2, r3, #28
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004908:	2101      	movs	r1, #1
 800490a:	fa01 f202 	lsl.w	r2, r1, r2
 800490e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	4798      	blx	r3
    }
  }
  return status;
 8004930:	7bfb      	ldrb	r3, [r7, #15]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004956:	f003 031c 	and.w	r3, r3, #28
 800495a:	2204      	movs	r2, #4
 800495c:	409a      	lsls	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	4013      	ands	r3, r2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d026      	beq.n	80049b4 <HAL_DMA_IRQHandler+0x7a>
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d021      	beq.n	80049b4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0320 	and.w	r3, r3, #32
 800497a:	2b00      	cmp	r3, #0
 800497c:	d107      	bne.n	800498e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0204 	bic.w	r2, r2, #4
 800498c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004992:	f003 021c 	and.w	r2, r3, #28
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499a:	2104      	movs	r1, #4
 800499c:	fa01 f202 	lsl.w	r2, r1, r2
 80049a0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d071      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80049b2:	e06c      	b.n	8004a8e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b8:	f003 031c 	and.w	r3, r3, #28
 80049bc:	2202      	movs	r2, #2
 80049be:	409a      	lsls	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d02e      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xec>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d029      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0320 	and.w	r3, r3, #32
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10b      	bne.n	80049f8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 020a 	bic.w	r2, r2, #10
 80049ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049fc:	f003 021c 	and.w	r2, r3, #28
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a04:	2102      	movs	r1, #2
 8004a06:	fa01 f202 	lsl.w	r2, r1, r2
 8004a0a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d038      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004a24:	e033      	b.n	8004a8e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a2a:	f003 031c 	and.w	r3, r3, #28
 8004a2e:	2208      	movs	r2, #8
 8004a30:	409a      	lsls	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4013      	ands	r3, r2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d02a      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x156>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	f003 0308 	and.w	r3, r3, #8
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d025      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 020e 	bic.w	r2, r2, #14
 8004a52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a58:	f003 021c 	and.w	r2, r3, #28
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a60:	2101      	movs	r1, #1
 8004a62:	fa01 f202 	lsl.w	r2, r1, r2
 8004a66:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d004      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004a8e:	bf00      	nop
 8004a90:	bf00      	nop
}
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aaa:	f003 021c 	and.w	r2, r3, #28
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	2b10      	cmp	r3, #16
 8004ac8:	d108      	bne.n	8004adc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ada:	e007      	b.n	8004aec <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	60da      	str	r2, [r3, #12]
}
 8004aec:	bf00      	nop
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b02:	2300      	movs	r3, #0
 8004b04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b06:	e17f      	b.n	8004e08 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	fa01 f303 	lsl.w	r3, r1, r3
 8004b14:	4013      	ands	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 8171 	beq.w	8004e02 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f003 0303 	and.w	r3, r3, #3
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d005      	beq.n	8004b38 <HAL_GPIO_Init+0x40>
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f003 0303 	and.w	r3, r3, #3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d130      	bne.n	8004b9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	2203      	movs	r2, #3
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b6e:	2201      	movs	r2, #1
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	fa02 f303 	lsl.w	r3, r2, r3
 8004b76:	43db      	mvns	r3, r3
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	091b      	lsrs	r3, r3, #4
 8004b84:	f003 0201 	and.w	r2, r3, #1
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d118      	bne.n	8004bd8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004baa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004bac:	2201      	movs	r2, #1
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	08db      	lsrs	r3, r3, #3
 8004bc2:	f003 0201 	and.w	r2, r3, #1
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f003 0303 	and.w	r3, r3, #3
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d017      	beq.n	8004c14 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	2203      	movs	r2, #3
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	fa02 f303 	lsl.w	r3, r2, r3
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 0303 	and.w	r3, r3, #3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d123      	bne.n	8004c68 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	08da      	lsrs	r2, r3, #3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3208      	adds	r2, #8
 8004c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	220f      	movs	r2, #15
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4013      	ands	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	fa02 f303 	lsl.w	r3, r2, r3
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	08da      	lsrs	r2, r3, #3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3208      	adds	r2, #8
 8004c62:	6939      	ldr	r1, [r7, #16]
 8004c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	2203      	movs	r2, #3
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f003 0203 	and.w	r2, r3, #3
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 80ac 	beq.w	8004e02 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004caa:	4b5f      	ldr	r3, [pc, #380]	@ (8004e28 <HAL_GPIO_Init+0x330>)
 8004cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cae:	4a5e      	ldr	r2, [pc, #376]	@ (8004e28 <HAL_GPIO_Init+0x330>)
 8004cb0:	f043 0301 	orr.w	r3, r3, #1
 8004cb4:	6613      	str	r3, [r2, #96]	@ 0x60
 8004cb6:	4b5c      	ldr	r3, [pc, #368]	@ (8004e28 <HAL_GPIO_Init+0x330>)
 8004cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	60bb      	str	r3, [r7, #8]
 8004cc0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004cc2:	4a5a      	ldr	r2, [pc, #360]	@ (8004e2c <HAL_GPIO_Init+0x334>)
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	089b      	lsrs	r3, r3, #2
 8004cc8:	3302      	adds	r3, #2
 8004cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	220f      	movs	r2, #15
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	43db      	mvns	r3, r3
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004cec:	d025      	beq.n	8004d3a <HAL_GPIO_Init+0x242>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a4f      	ldr	r2, [pc, #316]	@ (8004e30 <HAL_GPIO_Init+0x338>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d01f      	beq.n	8004d36 <HAL_GPIO_Init+0x23e>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a4e      	ldr	r2, [pc, #312]	@ (8004e34 <HAL_GPIO_Init+0x33c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d019      	beq.n	8004d32 <HAL_GPIO_Init+0x23a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a4d      	ldr	r2, [pc, #308]	@ (8004e38 <HAL_GPIO_Init+0x340>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d013      	beq.n	8004d2e <HAL_GPIO_Init+0x236>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a4c      	ldr	r2, [pc, #304]	@ (8004e3c <HAL_GPIO_Init+0x344>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00d      	beq.n	8004d2a <HAL_GPIO_Init+0x232>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a4b      	ldr	r2, [pc, #300]	@ (8004e40 <HAL_GPIO_Init+0x348>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d007      	beq.n	8004d26 <HAL_GPIO_Init+0x22e>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a4a      	ldr	r2, [pc, #296]	@ (8004e44 <HAL_GPIO_Init+0x34c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d101      	bne.n	8004d22 <HAL_GPIO_Init+0x22a>
 8004d1e:	2306      	movs	r3, #6
 8004d20:	e00c      	b.n	8004d3c <HAL_GPIO_Init+0x244>
 8004d22:	2307      	movs	r3, #7
 8004d24:	e00a      	b.n	8004d3c <HAL_GPIO_Init+0x244>
 8004d26:	2305      	movs	r3, #5
 8004d28:	e008      	b.n	8004d3c <HAL_GPIO_Init+0x244>
 8004d2a:	2304      	movs	r3, #4
 8004d2c:	e006      	b.n	8004d3c <HAL_GPIO_Init+0x244>
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e004      	b.n	8004d3c <HAL_GPIO_Init+0x244>
 8004d32:	2302      	movs	r3, #2
 8004d34:	e002      	b.n	8004d3c <HAL_GPIO_Init+0x244>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <HAL_GPIO_Init+0x244>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	f002 0203 	and.w	r2, r2, #3
 8004d42:	0092      	lsls	r2, r2, #2
 8004d44:	4093      	lsls	r3, r2
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004d4c:	4937      	ldr	r1, [pc, #220]	@ (8004e2c <HAL_GPIO_Init+0x334>)
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	089b      	lsrs	r3, r3, #2
 8004d52:	3302      	adds	r3, #2
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8004e48 <HAL_GPIO_Init+0x350>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	43db      	mvns	r3, r3
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	4013      	ands	r3, r2
 8004d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d7e:	4a32      	ldr	r2, [pc, #200]	@ (8004e48 <HAL_GPIO_Init+0x350>)
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004d84:	4b30      	ldr	r3, [pc, #192]	@ (8004e48 <HAL_GPIO_Init+0x350>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	4013      	ands	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004da8:	4a27      	ldr	r2, [pc, #156]	@ (8004e48 <HAL_GPIO_Init+0x350>)
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004dae:	4b26      	ldr	r3, [pc, #152]	@ (8004e48 <HAL_GPIO_Init+0x350>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	43db      	mvns	r3, r3
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004dd2:	4a1d      	ldr	r2, [pc, #116]	@ (8004e48 <HAL_GPIO_Init+0x350>)
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8004e48 <HAL_GPIO_Init+0x350>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	43db      	mvns	r3, r3
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4013      	ands	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004dfc:	4a12      	ldr	r2, [pc, #72]	@ (8004e48 <HAL_GPIO_Init+0x350>)
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	3301      	adds	r3, #1
 8004e06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f47f ae78 	bne.w	8004b08 <HAL_GPIO_Init+0x10>
  }
}
 8004e18:	bf00      	nop
 8004e1a:	bf00      	nop
 8004e1c:	371c      	adds	r7, #28
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40021000 	.word	0x40021000
 8004e2c:	40010000 	.word	0x40010000
 8004e30:	48000400 	.word	0x48000400
 8004e34:	48000800 	.word	0x48000800
 8004e38:	48000c00 	.word	0x48000c00
 8004e3c:	48001000 	.word	0x48001000
 8004e40:	48001400 	.word	0x48001400
 8004e44:	48001800 	.word	0x48001800
 8004e48:	40010400 	.word	0x40010400

08004e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	460b      	mov	r3, r1
 8004e56:	807b      	strh	r3, [r7, #2]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e5c:	787b      	ldrb	r3, [r7, #1]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e62:	887a      	ldrh	r2, [r7, #2]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e68:	e002      	b.n	8004e70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e6a:	887a      	ldrh	r2, [r7, #2]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	4603      	mov	r3, r0
 8004e84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e86:	4b08      	ldr	r3, [pc, #32]	@ (8004ea8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e88:	695a      	ldr	r2, [r3, #20]
 8004e8a:	88fb      	ldrh	r3, [r7, #6]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d006      	beq.n	8004ea0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e92:	4a05      	ldr	r2, [pc, #20]	@ (8004ea8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e94:	88fb      	ldrh	r3, [r7, #6]
 8004e96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e98:	88fb      	ldrh	r3, [r7, #6]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 f806 	bl	8004eac <HAL_GPIO_EXTI_Callback>
  }
}
 8004ea0:	bf00      	nop
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40010400 	.word	0x40010400

08004eac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b082      	sub	sp, #8
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e08d      	b.n	8004ff0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d106      	bne.n	8004eee <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7fe fce5 	bl	80038b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2224      	movs	r2, #36	@ 0x24
 8004ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0201 	bic.w	r2, r2, #1
 8004f04:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004f12:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689a      	ldr	r2, [r3, #8]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f22:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d107      	bne.n	8004f3c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f38:	609a      	str	r2, [r3, #8]
 8004f3a:	e006      	b.n	8004f4a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004f48:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d108      	bne.n	8004f64 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f60:	605a      	str	r2, [r3, #4]
 8004f62:	e007      	b.n	8004f74 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f72:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6812      	ldr	r2, [r2, #0]
 8004f7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004f82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f86:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68da      	ldr	r2, [r3, #12]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f96:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69d9      	ldr	r1, [r3, #28]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1a      	ldr	r2, [r3, #32]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f042 0201 	orr.w	r2, r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b20      	cmp	r3, #32
 800500c:	d138      	bne.n	8005080 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005018:	2302      	movs	r3, #2
 800501a:	e032      	b.n	8005082 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2224      	movs	r2, #36	@ 0x24
 8005028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0201 	bic.w	r2, r2, #1
 800503a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800504a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6819      	ldr	r1, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2220      	movs	r2, #32
 8005070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800507c:	2300      	movs	r3, #0
 800507e:	e000      	b.n	8005082 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005080:	2302      	movs	r3, #2
  }
}
 8005082:	4618      	mov	r0, r3
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800508e:	b480      	push	{r7}
 8005090:	b085      	sub	sp, #20
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
 8005096:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b20      	cmp	r3, #32
 80050a2:	d139      	bne.n	8005118 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d101      	bne.n	80050b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80050ae:	2302      	movs	r3, #2
 80050b0:	e033      	b.n	800511a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2224      	movs	r2, #36	@ 0x24
 80050be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0201 	bic.w	r2, r2, #1
 80050d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80050e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	021b      	lsls	r3, r3, #8
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0201 	orr.w	r2, r2, #1
 8005102:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2220      	movs	r2, #32
 8005108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005114:	2300      	movs	r3, #0
 8005116:	e000      	b.n	800511a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005118:	2302      	movs	r3, #2
  }
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005126:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005128:	b08f      	sub	sp, #60	@ 0x3c
 800512a:	af0a      	add	r7, sp, #40	@ 0x28
 800512c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e116      	b.n	8005366 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d106      	bne.n	8005158 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7fe fd6e 	bl	8003c34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2203      	movs	r2, #3
 800515c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005168:	2b00      	cmp	r3, #0
 800516a:	d102      	bne.n	8005172 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f003 fa93 	bl	80086a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	603b      	str	r3, [r7, #0]
 8005182:	687e      	ldr	r6, [r7, #4]
 8005184:	466d      	mov	r5, sp
 8005186:	f106 0410 	add.w	r4, r6, #16
 800518a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800518c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800518e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005190:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005192:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005196:	e885 0003 	stmia.w	r5, {r0, r1}
 800519a:	1d33      	adds	r3, r6, #4
 800519c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800519e:	6838      	ldr	r0, [r7, #0]
 80051a0:	f003 fa53 	bl	800864a <USB_CoreInit>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d005      	beq.n	80051b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2202      	movs	r2, #2
 80051ae:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e0d7      	b.n	8005366 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2100      	movs	r1, #0
 80051bc:	4618      	mov	r0, r3
 80051be:	f003 fa81 	bl	80086c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051c2:	2300      	movs	r3, #0
 80051c4:	73fb      	strb	r3, [r7, #15]
 80051c6:	e04a      	b.n	800525e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80051c8:	7bfa      	ldrb	r2, [r7, #15]
 80051ca:	6879      	ldr	r1, [r7, #4]
 80051cc:	4613      	mov	r3, r2
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	4413      	add	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	440b      	add	r3, r1
 80051d6:	333d      	adds	r3, #61	@ 0x3d
 80051d8:	2201      	movs	r2, #1
 80051da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80051dc:	7bfa      	ldrb	r2, [r7, #15]
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	4613      	mov	r3, r2
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	4413      	add	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	333c      	adds	r3, #60	@ 0x3c
 80051ec:	7bfa      	ldrb	r2, [r7, #15]
 80051ee:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80051f0:	7bfa      	ldrb	r2, [r7, #15]
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
 80051f4:	b298      	uxth	r0, r3
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	4613      	mov	r3, r2
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	4413      	add	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	440b      	add	r3, r1
 8005202:	3356      	adds	r3, #86	@ 0x56
 8005204:	4602      	mov	r2, r0
 8005206:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005208:	7bfa      	ldrb	r2, [r7, #15]
 800520a:	6879      	ldr	r1, [r7, #4]
 800520c:	4613      	mov	r3, r2
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	4413      	add	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	440b      	add	r3, r1
 8005216:	3340      	adds	r3, #64	@ 0x40
 8005218:	2200      	movs	r2, #0
 800521a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800521c:	7bfa      	ldrb	r2, [r7, #15]
 800521e:	6879      	ldr	r1, [r7, #4]
 8005220:	4613      	mov	r3, r2
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	4413      	add	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	440b      	add	r3, r1
 800522a:	3344      	adds	r3, #68	@ 0x44
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005230:	7bfa      	ldrb	r2, [r7, #15]
 8005232:	6879      	ldr	r1, [r7, #4]
 8005234:	4613      	mov	r3, r2
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	4413      	add	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	440b      	add	r3, r1
 800523e:	3348      	adds	r3, #72	@ 0x48
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005244:	7bfa      	ldrb	r2, [r7, #15]
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	4613      	mov	r3, r2
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	4413      	add	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	440b      	add	r3, r1
 8005252:	334c      	adds	r3, #76	@ 0x4c
 8005254:	2200      	movs	r2, #0
 8005256:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005258:	7bfb      	ldrb	r3, [r7, #15]
 800525a:	3301      	adds	r3, #1
 800525c:	73fb      	strb	r3, [r7, #15]
 800525e:	7bfa      	ldrb	r2, [r7, #15]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	429a      	cmp	r2, r3
 8005266:	d3af      	bcc.n	80051c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005268:	2300      	movs	r3, #0
 800526a:	73fb      	strb	r3, [r7, #15]
 800526c:	e044      	b.n	80052f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800526e:	7bfa      	ldrb	r2, [r7, #15]
 8005270:	6879      	ldr	r1, [r7, #4]
 8005272:	4613      	mov	r3, r2
 8005274:	00db      	lsls	r3, r3, #3
 8005276:	4413      	add	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	440b      	add	r3, r1
 800527c:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8005280:	2200      	movs	r2, #0
 8005282:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005284:	7bfa      	ldrb	r2, [r7, #15]
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	4613      	mov	r3, r2
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	4413      	add	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	440b      	add	r3, r1
 8005292:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8005296:	7bfa      	ldrb	r2, [r7, #15]
 8005298:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800529a:	7bfa      	ldrb	r2, [r7, #15]
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	4613      	mov	r3, r2
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	4413      	add	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	440b      	add	r3, r1
 80052a8:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80052ac:	2200      	movs	r2, #0
 80052ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80052b0:	7bfa      	ldrb	r2, [r7, #15]
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	4613      	mov	r3, r2
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	4413      	add	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	440b      	add	r3, r1
 80052be:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80052c6:	7bfa      	ldrb	r2, [r7, #15]
 80052c8:	6879      	ldr	r1, [r7, #4]
 80052ca:	4613      	mov	r3, r2
 80052cc:	00db      	lsls	r3, r3, #3
 80052ce:	4413      	add	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	440b      	add	r3, r1
 80052d4:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80052d8:	2200      	movs	r2, #0
 80052da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80052dc:	7bfa      	ldrb	r2, [r7, #15]
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	4613      	mov	r3, r2
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	440b      	add	r3, r1
 80052ea:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
 80052f4:	3301      	adds	r3, #1
 80052f6:	73fb      	strb	r3, [r7, #15]
 80052f8:	7bfa      	ldrb	r2, [r7, #15]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d3b5      	bcc.n	800526e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	603b      	str	r3, [r7, #0]
 8005308:	687e      	ldr	r6, [r7, #4]
 800530a:	466d      	mov	r5, sp
 800530c:	f106 0410 	add.w	r4, r6, #16
 8005310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005312:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005316:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005318:	e894 0003 	ldmia.w	r4, {r0, r1}
 800531c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005320:	1d33      	adds	r3, r6, #4
 8005322:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005324:	6838      	ldr	r0, [r7, #0]
 8005326:	f003 fa19 	bl	800875c <USB_DevInit>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e014      	b.n	8005366 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005350:	2b01      	cmp	r3, #1
 8005352:	d102      	bne.n	800535a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f80a 	bl	800536e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f003 fbbb 	bl	8008ada <USB_DevDisconnect>

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800536e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800536e:	b480      	push	{r7}
 8005370:	b085      	sub	sp, #20
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800539c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053a0:	f043 0303 	orr.w	r3, r3, #3
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
	...

080053b8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80053b8:	b480      	push	{r7}
 80053ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053bc:	4b05      	ldr	r3, [pc, #20]	@ (80053d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a04      	ldr	r2, [pc, #16]	@ (80053d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80053c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053c6:	6013      	str	r3, [r2, #0]
}
 80053c8:	bf00      	nop
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	40007000 	.word	0x40007000

080053d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80053dc:	4b04      	ldr	r3, [pc, #16]	@ (80053f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40007000 	.word	0x40007000

080053f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005402:	d130      	bne.n	8005466 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005404:	4b23      	ldr	r3, [pc, #140]	@ (8005494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800540c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005410:	d038      	beq.n	8005484 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005412:	4b20      	ldr	r3, [pc, #128]	@ (8005494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800541a:	4a1e      	ldr	r2, [pc, #120]	@ (8005494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800541c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005420:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005422:	4b1d      	ldr	r3, [pc, #116]	@ (8005498 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2232      	movs	r2, #50	@ 0x32
 8005428:	fb02 f303 	mul.w	r3, r2, r3
 800542c:	4a1b      	ldr	r2, [pc, #108]	@ (800549c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800542e:	fba2 2303 	umull	r2, r3, r2, r3
 8005432:	0c9b      	lsrs	r3, r3, #18
 8005434:	3301      	adds	r3, #1
 8005436:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005438:	e002      	b.n	8005440 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	3b01      	subs	r3, #1
 800543e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005440:	4b14      	ldr	r3, [pc, #80]	@ (8005494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005448:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800544c:	d102      	bne.n	8005454 <HAL_PWREx_ControlVoltageScaling+0x60>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1f2      	bne.n	800543a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005454:	4b0f      	ldr	r3, [pc, #60]	@ (8005494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800545c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005460:	d110      	bne.n	8005484 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e00f      	b.n	8005486 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005466:	4b0b      	ldr	r3, [pc, #44]	@ (8005494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800546e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005472:	d007      	beq.n	8005484 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005474:	4b07      	ldr	r3, [pc, #28]	@ (8005494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800547c:	4a05      	ldr	r2, [pc, #20]	@ (8005494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800547e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005482:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40007000 	.word	0x40007000
 8005498:	20000000 	.word	0x20000000
 800549c:	431bde83 	.word	0x431bde83

080054a0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80054a4:	4b05      	ldr	r3, [pc, #20]	@ (80054bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	4a04      	ldr	r2, [pc, #16]	@ (80054bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80054aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054ae:	6053      	str	r3, [r2, #4]
}
 80054b0:	bf00      	nop
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	40007000 	.word	0x40007000

080054c0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af02      	add	r7, sp, #8
 80054c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80054c8:	f7fe fe82 	bl	80041d0 <HAL_GetTick>
 80054cc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e063      	b.n	80055a0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10b      	bne.n	80054fc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f7fe fa41 	bl	8003974 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80054f2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f858 	bl	80055ac <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	3b01      	subs	r3, #1
 800550c:	021a      	lsls	r2, r3, #8
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	2120      	movs	r1, #32
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f850 	bl	80055c8 <QSPI_WaitFlagStateUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800552c:	7afb      	ldrb	r3, [r7, #11]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d131      	bne.n	8005596 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800553c:	f023 0310 	bic.w	r3, r3, #16
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	6852      	ldr	r2, [r2, #4]
 8005544:	0611      	lsls	r1, r2, #24
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	68d2      	ldr	r2, [r2, #12]
 800554a:	4311      	orrs	r1, r2
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6812      	ldr	r2, [r2, #0]
 8005550:	430b      	orrs	r3, r1
 8005552:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	4b13      	ldr	r3, [pc, #76]	@ (80055a8 <HAL_QSPI_Init+0xe8>)
 800555c:	4013      	ands	r3, r2
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6912      	ldr	r2, [r2, #16]
 8005562:	0411      	lsls	r1, r2, #16
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6952      	ldr	r2, [r2, #20]
 8005568:	4311      	orrs	r1, r2
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	6992      	ldr	r2, [r2, #24]
 800556e:	4311      	orrs	r1, r2
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	6812      	ldr	r2, [r2, #0]
 8005574:	430b      	orrs	r3, r1
 8005576:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0201 	orr.w	r2, r2, #1
 8005586:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800559e:	7afb      	ldrb	r3, [r7, #11]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	ffe0f8fe 	.word	0xffe0f8fe

080055ac <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	683a      	ldr	r2, [r7, #0]
 80055ba:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	603b      	str	r3, [r7, #0]
 80055d4:	4613      	mov	r3, r2
 80055d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80055d8:	e01a      	b.n	8005610 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e0:	d016      	beq.n	8005610 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e2:	f7fe fdf5 	bl	80041d0 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d302      	bcc.n	80055f8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10b      	bne.n	8005610 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2204      	movs	r2, #4
 80055fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005604:	f043 0201 	orr.w	r2, r3, #1
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e00e      	b.n	800562e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689a      	ldr	r2, [r3, #8]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	4013      	ands	r3, r2
 800561a:	2b00      	cmp	r3, #0
 800561c:	bf14      	ite	ne
 800561e:	2301      	movne	r3, #1
 8005620:	2300      	moveq	r3, #0
 8005622:	b2db      	uxtb	r3, r3
 8005624:	461a      	mov	r2, r3
 8005626:	79fb      	ldrb	r3, [r7, #7]
 8005628:	429a      	cmp	r2, r3
 800562a:	d1d6      	bne.n	80055da <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
	...

08005638 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b088      	sub	sp, #32
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e3ca      	b.n	8005de0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800564a:	4b97      	ldr	r3, [pc, #604]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 030c 	and.w	r3, r3, #12
 8005652:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005654:	4b94      	ldr	r3, [pc, #592]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f003 0303 	and.w	r3, r3, #3
 800565c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0310 	and.w	r3, r3, #16
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 80e4 	beq.w	8005834 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d007      	beq.n	8005682 <HAL_RCC_OscConfig+0x4a>
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	2b0c      	cmp	r3, #12
 8005676:	f040 808b 	bne.w	8005790 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2b01      	cmp	r3, #1
 800567e:	f040 8087 	bne.w	8005790 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005682:	4b89      	ldr	r3, [pc, #548]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d005      	beq.n	800569a <HAL_RCC_OscConfig+0x62>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e3a2      	b.n	8005de0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1a      	ldr	r2, [r3, #32]
 800569e:	4b82      	ldr	r3, [pc, #520]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d004      	beq.n	80056b4 <HAL_RCC_OscConfig+0x7c>
 80056aa:	4b7f      	ldr	r3, [pc, #508]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056b2:	e005      	b.n	80056c0 <HAL_RCC_OscConfig+0x88>
 80056b4:	4b7c      	ldr	r3, [pc, #496]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 80056b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056ba:	091b      	lsrs	r3, r3, #4
 80056bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d223      	bcs.n	800570c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 fd87 	bl	80061dc <RCC_SetFlashLatencyFromMSIRange>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e383      	b.n	8005de0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056d8:	4b73      	ldr	r3, [pc, #460]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a72      	ldr	r2, [pc, #456]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 80056de:	f043 0308 	orr.w	r3, r3, #8
 80056e2:	6013      	str	r3, [r2, #0]
 80056e4:	4b70      	ldr	r3, [pc, #448]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	496d      	ldr	r1, [pc, #436]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056f6:	4b6c      	ldr	r3, [pc, #432]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	021b      	lsls	r3, r3, #8
 8005704:	4968      	ldr	r1, [pc, #416]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 8005706:	4313      	orrs	r3, r2
 8005708:	604b      	str	r3, [r1, #4]
 800570a:	e025      	b.n	8005758 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800570c:	4b66      	ldr	r3, [pc, #408]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a65      	ldr	r2, [pc, #404]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 8005712:	f043 0308 	orr.w	r3, r3, #8
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	4b63      	ldr	r3, [pc, #396]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	4960      	ldr	r1, [pc, #384]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 8005726:	4313      	orrs	r3, r2
 8005728:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800572a:	4b5f      	ldr	r3, [pc, #380]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	021b      	lsls	r3, r3, #8
 8005738:	495b      	ldr	r1, [pc, #364]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 800573a:	4313      	orrs	r3, r2
 800573c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d109      	bne.n	8005758 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	4618      	mov	r0, r3
 800574a:	f000 fd47 	bl	80061dc <RCC_SetFlashLatencyFromMSIRange>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e343      	b.n	8005de0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005758:	f000 fc4a 	bl	8005ff0 <HAL_RCC_GetSysClockFreq>
 800575c:	4602      	mov	r2, r0
 800575e:	4b52      	ldr	r3, [pc, #328]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	091b      	lsrs	r3, r3, #4
 8005764:	f003 030f 	and.w	r3, r3, #15
 8005768:	4950      	ldr	r1, [pc, #320]	@ (80058ac <HAL_RCC_OscConfig+0x274>)
 800576a:	5ccb      	ldrb	r3, [r1, r3]
 800576c:	f003 031f 	and.w	r3, r3, #31
 8005770:	fa22 f303 	lsr.w	r3, r2, r3
 8005774:	4a4e      	ldr	r2, [pc, #312]	@ (80058b0 <HAL_RCC_OscConfig+0x278>)
 8005776:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005778:	4b4e      	ldr	r3, [pc, #312]	@ (80058b4 <HAL_RCC_OscConfig+0x27c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4618      	mov	r0, r3
 800577e:	f7fe faf5 	bl	8003d6c <HAL_InitTick>
 8005782:	4603      	mov	r3, r0
 8005784:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005786:	7bfb      	ldrb	r3, [r7, #15]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d052      	beq.n	8005832 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800578c:	7bfb      	ldrb	r3, [r7, #15]
 800578e:	e327      	b.n	8005de0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d032      	beq.n	80057fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005798:	4b43      	ldr	r3, [pc, #268]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a42      	ldr	r2, [pc, #264]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 800579e:	f043 0301 	orr.w	r3, r3, #1
 80057a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057a4:	f7fe fd14 	bl	80041d0 <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057ac:	f7fe fd10 	bl	80041d0 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e310      	b.n	8005de0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057be:	4b3a      	ldr	r3, [pc, #232]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0f0      	beq.n	80057ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057ca:	4b37      	ldr	r3, [pc, #220]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a36      	ldr	r2, [pc, #216]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 80057d0:	f043 0308 	orr.w	r3, r3, #8
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	4b34      	ldr	r3, [pc, #208]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	4931      	ldr	r1, [pc, #196]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057e8:	4b2f      	ldr	r3, [pc, #188]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	021b      	lsls	r3, r3, #8
 80057f6:	492c      	ldr	r1, [pc, #176]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	604b      	str	r3, [r1, #4]
 80057fc:	e01a      	b.n	8005834 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80057fe:	4b2a      	ldr	r3, [pc, #168]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a29      	ldr	r2, [pc, #164]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 8005804:	f023 0301 	bic.w	r3, r3, #1
 8005808:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800580a:	f7fe fce1 	bl	80041d0 <HAL_GetTick>
 800580e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005810:	e008      	b.n	8005824 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005812:	f7fe fcdd 	bl	80041d0 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e2dd      	b.n	8005de0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005824:	4b20      	ldr	r3, [pc, #128]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1f0      	bne.n	8005812 <HAL_RCC_OscConfig+0x1da>
 8005830:	e000      	b.n	8005834 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005832:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	d074      	beq.n	800592a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	2b08      	cmp	r3, #8
 8005844:	d005      	beq.n	8005852 <HAL_RCC_OscConfig+0x21a>
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	2b0c      	cmp	r3, #12
 800584a:	d10e      	bne.n	800586a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2b03      	cmp	r3, #3
 8005850:	d10b      	bne.n	800586a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005852:	4b15      	ldr	r3, [pc, #84]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d064      	beq.n	8005928 <HAL_RCC_OscConfig+0x2f0>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d160      	bne.n	8005928 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e2ba      	b.n	8005de0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005872:	d106      	bne.n	8005882 <HAL_RCC_OscConfig+0x24a>
 8005874:	4b0c      	ldr	r3, [pc, #48]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a0b      	ldr	r2, [pc, #44]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 800587a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800587e:	6013      	str	r3, [r2, #0]
 8005880:	e026      	b.n	80058d0 <HAL_RCC_OscConfig+0x298>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800588a:	d115      	bne.n	80058b8 <HAL_RCC_OscConfig+0x280>
 800588c:	4b06      	ldr	r3, [pc, #24]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a05      	ldr	r2, [pc, #20]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 8005892:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005896:	6013      	str	r3, [r2, #0]
 8005898:	4b03      	ldr	r3, [pc, #12]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a02      	ldr	r2, [pc, #8]	@ (80058a8 <HAL_RCC_OscConfig+0x270>)
 800589e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058a2:	6013      	str	r3, [r2, #0]
 80058a4:	e014      	b.n	80058d0 <HAL_RCC_OscConfig+0x298>
 80058a6:	bf00      	nop
 80058a8:	40021000 	.word	0x40021000
 80058ac:	0800c4a0 	.word	0x0800c4a0
 80058b0:	20000000 	.word	0x20000000
 80058b4:	20000004 	.word	0x20000004
 80058b8:	4ba0      	ldr	r3, [pc, #640]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a9f      	ldr	r2, [pc, #636]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 80058be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058c2:	6013      	str	r3, [r2, #0]
 80058c4:	4b9d      	ldr	r3, [pc, #628]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a9c      	ldr	r2, [pc, #624]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 80058ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d013      	beq.n	8005900 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d8:	f7fe fc7a 	bl	80041d0 <HAL_GetTick>
 80058dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058de:	e008      	b.n	80058f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058e0:	f7fe fc76 	bl	80041d0 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b64      	cmp	r3, #100	@ 0x64
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e276      	b.n	8005de0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058f2:	4b92      	ldr	r3, [pc, #584]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d0f0      	beq.n	80058e0 <HAL_RCC_OscConfig+0x2a8>
 80058fe:	e014      	b.n	800592a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005900:	f7fe fc66 	bl	80041d0 <HAL_GetTick>
 8005904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005906:	e008      	b.n	800591a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005908:	f7fe fc62 	bl	80041d0 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b64      	cmp	r3, #100	@ 0x64
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e262      	b.n	8005de0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800591a:	4b88      	ldr	r3, [pc, #544]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1f0      	bne.n	8005908 <HAL_RCC_OscConfig+0x2d0>
 8005926:	e000      	b.n	800592a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d060      	beq.n	80059f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	2b04      	cmp	r3, #4
 800593a:	d005      	beq.n	8005948 <HAL_RCC_OscConfig+0x310>
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	2b0c      	cmp	r3, #12
 8005940:	d119      	bne.n	8005976 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2b02      	cmp	r3, #2
 8005946:	d116      	bne.n	8005976 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005948:	4b7c      	ldr	r3, [pc, #496]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005950:	2b00      	cmp	r3, #0
 8005952:	d005      	beq.n	8005960 <HAL_RCC_OscConfig+0x328>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e23f      	b.n	8005de0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005960:	4b76      	ldr	r3, [pc, #472]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	061b      	lsls	r3, r3, #24
 800596e:	4973      	ldr	r1, [pc, #460]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 8005970:	4313      	orrs	r3, r2
 8005972:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005974:	e040      	b.n	80059f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d023      	beq.n	80059c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800597e:	4b6f      	ldr	r3, [pc, #444]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a6e      	ldr	r2, [pc, #440]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 8005984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598a:	f7fe fc21 	bl	80041d0 <HAL_GetTick>
 800598e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005990:	e008      	b.n	80059a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005992:	f7fe fc1d 	bl	80041d0 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d901      	bls.n	80059a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e21d      	b.n	8005de0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059a4:	4b65      	ldr	r3, [pc, #404]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d0f0      	beq.n	8005992 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059b0:	4b62      	ldr	r3, [pc, #392]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	061b      	lsls	r3, r3, #24
 80059be:	495f      	ldr	r1, [pc, #380]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	604b      	str	r3, [r1, #4]
 80059c4:	e018      	b.n	80059f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059c6:	4b5d      	ldr	r3, [pc, #372]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a5c      	ldr	r2, [pc, #368]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 80059cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d2:	f7fe fbfd 	bl	80041d0 <HAL_GetTick>
 80059d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059d8:	e008      	b.n	80059ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059da:	f7fe fbf9 	bl	80041d0 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e1f9      	b.n	8005de0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059ec:	4b53      	ldr	r3, [pc, #332]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1f0      	bne.n	80059da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0308 	and.w	r3, r3, #8
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d03c      	beq.n	8005a7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d01c      	beq.n	8005a46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a0c:	4b4b      	ldr	r3, [pc, #300]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 8005a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a12:	4a4a      	ldr	r2, [pc, #296]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 8005a14:	f043 0301 	orr.w	r3, r3, #1
 8005a18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a1c:	f7fe fbd8 	bl	80041d0 <HAL_GetTick>
 8005a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a22:	e008      	b.n	8005a36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a24:	f7fe fbd4 	bl	80041d0 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d901      	bls.n	8005a36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e1d4      	b.n	8005de0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a36:	4b41      	ldr	r3, [pc, #260]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 8005a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d0ef      	beq.n	8005a24 <HAL_RCC_OscConfig+0x3ec>
 8005a44:	e01b      	b.n	8005a7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a46:	4b3d      	ldr	r3, [pc, #244]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 8005a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a4c:	4a3b      	ldr	r2, [pc, #236]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 8005a4e:	f023 0301 	bic.w	r3, r3, #1
 8005a52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a56:	f7fe fbbb 	bl	80041d0 <HAL_GetTick>
 8005a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a5c:	e008      	b.n	8005a70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a5e:	f7fe fbb7 	bl	80041d0 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d901      	bls.n	8005a70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e1b7      	b.n	8005de0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a70:	4b32      	ldr	r3, [pc, #200]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 8005a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1ef      	bne.n	8005a5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0304 	and.w	r3, r3, #4
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 80a6 	beq.w	8005bd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005a90:	4b2a      	ldr	r3, [pc, #168]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 8005a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10d      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a9c:	4b27      	ldr	r3, [pc, #156]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 8005a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aa0:	4a26      	ldr	r2, [pc, #152]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 8005aa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005aa6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005aa8:	4b24      	ldr	r3, [pc, #144]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 8005aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ab0:	60bb      	str	r3, [r7, #8]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ab8:	4b21      	ldr	r3, [pc, #132]	@ (8005b40 <HAL_RCC_OscConfig+0x508>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d118      	bne.n	8005af6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8005b40 <HAL_RCC_OscConfig+0x508>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8005b40 <HAL_RCC_OscConfig+0x508>)
 8005aca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ace:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ad0:	f7fe fb7e 	bl	80041d0 <HAL_GetTick>
 8005ad4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ad6:	e008      	b.n	8005aea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ad8:	f7fe fb7a 	bl	80041d0 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e17a      	b.n	8005de0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005aea:	4b15      	ldr	r3, [pc, #84]	@ (8005b40 <HAL_RCC_OscConfig+0x508>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0f0      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d108      	bne.n	8005b10 <HAL_RCC_OscConfig+0x4d8>
 8005afe:	4b0f      	ldr	r3, [pc, #60]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 8005b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b04:	4a0d      	ldr	r2, [pc, #52]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 8005b06:	f043 0301 	orr.w	r3, r3, #1
 8005b0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b0e:	e029      	b.n	8005b64 <HAL_RCC_OscConfig+0x52c>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	2b05      	cmp	r3, #5
 8005b16:	d115      	bne.n	8005b44 <HAL_RCC_OscConfig+0x50c>
 8005b18:	4b08      	ldr	r3, [pc, #32]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 8005b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b1e:	4a07      	ldr	r2, [pc, #28]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 8005b20:	f043 0304 	orr.w	r3, r3, #4
 8005b24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b28:	4b04      	ldr	r3, [pc, #16]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 8005b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b2e:	4a03      	ldr	r2, [pc, #12]	@ (8005b3c <HAL_RCC_OscConfig+0x504>)
 8005b30:	f043 0301 	orr.w	r3, r3, #1
 8005b34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b38:	e014      	b.n	8005b64 <HAL_RCC_OscConfig+0x52c>
 8005b3a:	bf00      	nop
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	40007000 	.word	0x40007000
 8005b44:	4b9c      	ldr	r3, [pc, #624]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b4a:	4a9b      	ldr	r2, [pc, #620]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005b4c:	f023 0301 	bic.w	r3, r3, #1
 8005b50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b54:	4b98      	ldr	r3, [pc, #608]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b5a:	4a97      	ldr	r2, [pc, #604]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005b5c:	f023 0304 	bic.w	r3, r3, #4
 8005b60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d016      	beq.n	8005b9a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b6c:	f7fe fb30 	bl	80041d0 <HAL_GetTick>
 8005b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b72:	e00a      	b.n	8005b8a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b74:	f7fe fb2c 	bl	80041d0 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e12a      	b.n	8005de0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b8a:	4b8b      	ldr	r3, [pc, #556]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0ed      	beq.n	8005b74 <HAL_RCC_OscConfig+0x53c>
 8005b98:	e015      	b.n	8005bc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b9a:	f7fe fb19 	bl	80041d0 <HAL_GetTick>
 8005b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ba0:	e00a      	b.n	8005bb8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ba2:	f7fe fb15 	bl	80041d0 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e113      	b.n	8005de0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005bb8:	4b7f      	ldr	r3, [pc, #508]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1ed      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bc6:	7ffb      	ldrb	r3, [r7, #31]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d105      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bcc:	4b7a      	ldr	r3, [pc, #488]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bd0:	4a79      	ldr	r2, [pc, #484]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005bd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bd6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 80fe 	beq.w	8005dde <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	f040 80d0 	bne.w	8005d8c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005bec:	4b72      	ldr	r3, [pc, #456]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f003 0203 	and.w	r2, r3, #3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d130      	bne.n	8005c62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d127      	bne.n	8005c62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d11f      	bne.n	8005c62 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005c2c:	2a07      	cmp	r2, #7
 8005c2e:	bf14      	ite	ne
 8005c30:	2201      	movne	r2, #1
 8005c32:	2200      	moveq	r2, #0
 8005c34:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d113      	bne.n	8005c62 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c44:	085b      	lsrs	r3, r3, #1
 8005c46:	3b01      	subs	r3, #1
 8005c48:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d109      	bne.n	8005c62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c58:	085b      	lsrs	r3, r3, #1
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d06e      	beq.n	8005d40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	2b0c      	cmp	r3, #12
 8005c66:	d069      	beq.n	8005d3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005c68:	4b53      	ldr	r3, [pc, #332]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d105      	bne.n	8005c80 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005c74:	4b50      	ldr	r3, [pc, #320]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e0ad      	b.n	8005de0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005c84:	4b4c      	ldr	r3, [pc, #304]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a4b      	ldr	r2, [pc, #300]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005c8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c8e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c90:	f7fe fa9e 	bl	80041d0 <HAL_GetTick>
 8005c94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c96:	e008      	b.n	8005caa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c98:	f7fe fa9a 	bl	80041d0 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e09a      	b.n	8005de0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005caa:	4b43      	ldr	r3, [pc, #268]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1f0      	bne.n	8005c98 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cb6:	4b40      	ldr	r3, [pc, #256]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005cb8:	68da      	ldr	r2, [r3, #12]
 8005cba:	4b40      	ldr	r3, [pc, #256]	@ (8005dbc <HAL_RCC_OscConfig+0x784>)
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005cc6:	3a01      	subs	r2, #1
 8005cc8:	0112      	lsls	r2, r2, #4
 8005cca:	4311      	orrs	r1, r2
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005cd0:	0212      	lsls	r2, r2, #8
 8005cd2:	4311      	orrs	r1, r2
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005cd8:	0852      	lsrs	r2, r2, #1
 8005cda:	3a01      	subs	r2, #1
 8005cdc:	0552      	lsls	r2, r2, #21
 8005cde:	4311      	orrs	r1, r2
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005ce4:	0852      	lsrs	r2, r2, #1
 8005ce6:	3a01      	subs	r2, #1
 8005ce8:	0652      	lsls	r2, r2, #25
 8005cea:	4311      	orrs	r1, r2
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005cf0:	0912      	lsrs	r2, r2, #4
 8005cf2:	0452      	lsls	r2, r2, #17
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	4930      	ldr	r1, [pc, #192]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005cfc:	4b2e      	ldr	r3, [pc, #184]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a2d      	ldr	r2, [pc, #180]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005d02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d08:	4b2b      	ldr	r3, [pc, #172]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	4a2a      	ldr	r2, [pc, #168]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005d0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d14:	f7fe fa5c 	bl	80041d0 <HAL_GetTick>
 8005d18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d1a:	e008      	b.n	8005d2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d1c:	f7fe fa58 	bl	80041d0 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e058      	b.n	8005de0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d2e:	4b22      	ldr	r3, [pc, #136]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0f0      	beq.n	8005d1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d3a:	e050      	b.n	8005dde <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e04f      	b.n	8005de0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d40:	4b1d      	ldr	r3, [pc, #116]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d148      	bne.n	8005dde <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a19      	ldr	r2, [pc, #100]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005d52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d58:	4b17      	ldr	r3, [pc, #92]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	4a16      	ldr	r2, [pc, #88]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005d5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d64:	f7fe fa34 	bl	80041d0 <HAL_GetTick>
 8005d68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d6a:	e008      	b.n	8005d7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d6c:	f7fe fa30 	bl	80041d0 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d901      	bls.n	8005d7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e030      	b.n	8005de0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0f0      	beq.n	8005d6c <HAL_RCC_OscConfig+0x734>
 8005d8a:	e028      	b.n	8005dde <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	2b0c      	cmp	r3, #12
 8005d90:	d023      	beq.n	8005dda <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d92:	4b09      	ldr	r3, [pc, #36]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a08      	ldr	r2, [pc, #32]	@ (8005db8 <HAL_RCC_OscConfig+0x780>)
 8005d98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d9e:	f7fe fa17 	bl	80041d0 <HAL_GetTick>
 8005da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005da4:	e00c      	b.n	8005dc0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da6:	f7fe fa13 	bl	80041d0 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d905      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e013      	b.n	8005de0 <HAL_RCC_OscConfig+0x7a8>
 8005db8:	40021000 	.word	0x40021000
 8005dbc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dc0:	4b09      	ldr	r3, [pc, #36]	@ (8005de8 <HAL_RCC_OscConfig+0x7b0>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1ec      	bne.n	8005da6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005dcc:	4b06      	ldr	r3, [pc, #24]	@ (8005de8 <HAL_RCC_OscConfig+0x7b0>)
 8005dce:	68da      	ldr	r2, [r3, #12]
 8005dd0:	4905      	ldr	r1, [pc, #20]	@ (8005de8 <HAL_RCC_OscConfig+0x7b0>)
 8005dd2:	4b06      	ldr	r3, [pc, #24]	@ (8005dec <HAL_RCC_OscConfig+0x7b4>)
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	60cb      	str	r3, [r1, #12]
 8005dd8:	e001      	b.n	8005dde <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e000      	b.n	8005de0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3720      	adds	r7, #32
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	40021000 	.word	0x40021000
 8005dec:	feeefffc 	.word	0xfeeefffc

08005df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e0e7      	b.n	8005fd4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e04:	4b75      	ldr	r3, [pc, #468]	@ (8005fdc <HAL_RCC_ClockConfig+0x1ec>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d910      	bls.n	8005e34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e12:	4b72      	ldr	r3, [pc, #456]	@ (8005fdc <HAL_RCC_ClockConfig+0x1ec>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f023 0207 	bic.w	r2, r3, #7
 8005e1a:	4970      	ldr	r1, [pc, #448]	@ (8005fdc <HAL_RCC_ClockConfig+0x1ec>)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e22:	4b6e      	ldr	r3, [pc, #440]	@ (8005fdc <HAL_RCC_ClockConfig+0x1ec>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d001      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e0cf      	b.n	8005fd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d010      	beq.n	8005e62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	4b66      	ldr	r3, [pc, #408]	@ (8005fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d908      	bls.n	8005e62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e50:	4b63      	ldr	r3, [pc, #396]	@ (8005fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	4960      	ldr	r1, [pc, #384]	@ (8005fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d04c      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2b03      	cmp	r3, #3
 8005e74:	d107      	bne.n	8005e86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e76:	4b5a      	ldr	r3, [pc, #360]	@ (8005fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d121      	bne.n	8005ec6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e0a6      	b.n	8005fd4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d107      	bne.n	8005e9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e8e:	4b54      	ldr	r3, [pc, #336]	@ (8005fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d115      	bne.n	8005ec6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e09a      	b.n	8005fd4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d107      	bne.n	8005eb6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ea6:	4b4e      	ldr	r3, [pc, #312]	@ (8005fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d109      	bne.n	8005ec6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e08e      	b.n	8005fd4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005eb6:	4b4a      	ldr	r3, [pc, #296]	@ (8005fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e086      	b.n	8005fd4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ec6:	4b46      	ldr	r3, [pc, #280]	@ (8005fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f023 0203 	bic.w	r2, r3, #3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	4943      	ldr	r1, [pc, #268]	@ (8005fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ed8:	f7fe f97a 	bl	80041d0 <HAL_GetTick>
 8005edc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ede:	e00a      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ee0:	f7fe f976 	bl	80041d0 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e06e      	b.n	8005fd4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ef6:	4b3a      	ldr	r3, [pc, #232]	@ (8005fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f003 020c 	and.w	r2, r3, #12
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d1eb      	bne.n	8005ee0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d010      	beq.n	8005f36 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	4b31      	ldr	r3, [pc, #196]	@ (8005fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d208      	bcs.n	8005f36 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f24:	4b2e      	ldr	r3, [pc, #184]	@ (8005fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	492b      	ldr	r1, [pc, #172]	@ (8005fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f36:	4b29      	ldr	r3, [pc, #164]	@ (8005fdc <HAL_RCC_ClockConfig+0x1ec>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0307 	and.w	r3, r3, #7
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d210      	bcs.n	8005f66 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f44:	4b25      	ldr	r3, [pc, #148]	@ (8005fdc <HAL_RCC_ClockConfig+0x1ec>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f023 0207 	bic.w	r2, r3, #7
 8005f4c:	4923      	ldr	r1, [pc, #140]	@ (8005fdc <HAL_RCC_ClockConfig+0x1ec>)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f54:	4b21      	ldr	r3, [pc, #132]	@ (8005fdc <HAL_RCC_ClockConfig+0x1ec>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0307 	and.w	r3, r3, #7
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d001      	beq.n	8005f66 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e036      	b.n	8005fd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0304 	and.w	r3, r3, #4
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d008      	beq.n	8005f84 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f72:	4b1b      	ldr	r3, [pc, #108]	@ (8005fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	4918      	ldr	r1, [pc, #96]	@ (8005fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0308 	and.w	r3, r3, #8
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d009      	beq.n	8005fa4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f90:	4b13      	ldr	r3, [pc, #76]	@ (8005fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	00db      	lsls	r3, r3, #3
 8005f9e:	4910      	ldr	r1, [pc, #64]	@ (8005fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005fa4:	f000 f824 	bl	8005ff0 <HAL_RCC_GetSysClockFreq>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	4b0d      	ldr	r3, [pc, #52]	@ (8005fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	091b      	lsrs	r3, r3, #4
 8005fb0:	f003 030f 	and.w	r3, r3, #15
 8005fb4:	490b      	ldr	r1, [pc, #44]	@ (8005fe4 <HAL_RCC_ClockConfig+0x1f4>)
 8005fb6:	5ccb      	ldrb	r3, [r1, r3]
 8005fb8:	f003 031f 	and.w	r3, r3, #31
 8005fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc0:	4a09      	ldr	r2, [pc, #36]	@ (8005fe8 <HAL_RCC_ClockConfig+0x1f8>)
 8005fc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005fc4:	4b09      	ldr	r3, [pc, #36]	@ (8005fec <HAL_RCC_ClockConfig+0x1fc>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fd fecf 	bl	8003d6c <HAL_InitTick>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	72fb      	strb	r3, [r7, #11]

  return status;
 8005fd2:	7afb      	ldrb	r3, [r7, #11]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	40022000 	.word	0x40022000
 8005fe0:	40021000 	.word	0x40021000
 8005fe4:	0800c4a0 	.word	0x0800c4a0
 8005fe8:	20000000 	.word	0x20000000
 8005fec:	20000004 	.word	0x20000004

08005ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b089      	sub	sp, #36	@ 0x24
 8005ff4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61fb      	str	r3, [r7, #28]
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ffe:	4b3e      	ldr	r3, [pc, #248]	@ (80060f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f003 030c 	and.w	r3, r3, #12
 8006006:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006008:	4b3b      	ldr	r3, [pc, #236]	@ (80060f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f003 0303 	and.w	r3, r3, #3
 8006010:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d005      	beq.n	8006024 <HAL_RCC_GetSysClockFreq+0x34>
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	2b0c      	cmp	r3, #12
 800601c:	d121      	bne.n	8006062 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d11e      	bne.n	8006062 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006024:	4b34      	ldr	r3, [pc, #208]	@ (80060f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0308 	and.w	r3, r3, #8
 800602c:	2b00      	cmp	r3, #0
 800602e:	d107      	bne.n	8006040 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006030:	4b31      	ldr	r3, [pc, #196]	@ (80060f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006032:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006036:	0a1b      	lsrs	r3, r3, #8
 8006038:	f003 030f 	and.w	r3, r3, #15
 800603c:	61fb      	str	r3, [r7, #28]
 800603e:	e005      	b.n	800604c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006040:	4b2d      	ldr	r3, [pc, #180]	@ (80060f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	091b      	lsrs	r3, r3, #4
 8006046:	f003 030f 	and.w	r3, r3, #15
 800604a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800604c:	4a2b      	ldr	r2, [pc, #172]	@ (80060fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006054:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10d      	bne.n	8006078 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006060:	e00a      	b.n	8006078 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	2b04      	cmp	r3, #4
 8006066:	d102      	bne.n	800606e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006068:	4b25      	ldr	r3, [pc, #148]	@ (8006100 <HAL_RCC_GetSysClockFreq+0x110>)
 800606a:	61bb      	str	r3, [r7, #24]
 800606c:	e004      	b.n	8006078 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	2b08      	cmp	r3, #8
 8006072:	d101      	bne.n	8006078 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006074:	4b23      	ldr	r3, [pc, #140]	@ (8006104 <HAL_RCC_GetSysClockFreq+0x114>)
 8006076:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	2b0c      	cmp	r3, #12
 800607c:	d134      	bne.n	80060e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800607e:	4b1e      	ldr	r3, [pc, #120]	@ (80060f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f003 0303 	and.w	r3, r3, #3
 8006086:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	2b02      	cmp	r3, #2
 800608c:	d003      	beq.n	8006096 <HAL_RCC_GetSysClockFreq+0xa6>
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2b03      	cmp	r3, #3
 8006092:	d003      	beq.n	800609c <HAL_RCC_GetSysClockFreq+0xac>
 8006094:	e005      	b.n	80060a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006096:	4b1a      	ldr	r3, [pc, #104]	@ (8006100 <HAL_RCC_GetSysClockFreq+0x110>)
 8006098:	617b      	str	r3, [r7, #20]
      break;
 800609a:	e005      	b.n	80060a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800609c:	4b19      	ldr	r3, [pc, #100]	@ (8006104 <HAL_RCC_GetSysClockFreq+0x114>)
 800609e:	617b      	str	r3, [r7, #20]
      break;
 80060a0:	e002      	b.n	80060a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	617b      	str	r3, [r7, #20]
      break;
 80060a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060a8:	4b13      	ldr	r3, [pc, #76]	@ (80060f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	091b      	lsrs	r3, r3, #4
 80060ae:	f003 0307 	and.w	r3, r3, #7
 80060b2:	3301      	adds	r3, #1
 80060b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80060b6:	4b10      	ldr	r3, [pc, #64]	@ (80060f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	0a1b      	lsrs	r3, r3, #8
 80060bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	fb03 f202 	mul.w	r2, r3, r2
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80060ce:	4b0a      	ldr	r3, [pc, #40]	@ (80060f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	0e5b      	lsrs	r3, r3, #25
 80060d4:	f003 0303 	and.w	r3, r3, #3
 80060d8:	3301      	adds	r3, #1
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80060e8:	69bb      	ldr	r3, [r7, #24]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3724      	adds	r7, #36	@ 0x24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	40021000 	.word	0x40021000
 80060fc:	0800c4b8 	.word	0x0800c4b8
 8006100:	00f42400 	.word	0x00f42400
 8006104:	007a1200 	.word	0x007a1200

08006108 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006108:	b480      	push	{r7}
 800610a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800610c:	4b03      	ldr	r3, [pc, #12]	@ (800611c <HAL_RCC_GetHCLKFreq+0x14>)
 800610e:	681b      	ldr	r3, [r3, #0]
}
 8006110:	4618      	mov	r0, r3
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	20000000 	.word	0x20000000

08006120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006124:	f7ff fff0 	bl	8006108 <HAL_RCC_GetHCLKFreq>
 8006128:	4602      	mov	r2, r0
 800612a:	4b06      	ldr	r3, [pc, #24]	@ (8006144 <HAL_RCC_GetPCLK1Freq+0x24>)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	0a1b      	lsrs	r3, r3, #8
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	4904      	ldr	r1, [pc, #16]	@ (8006148 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006136:	5ccb      	ldrb	r3, [r1, r3]
 8006138:	f003 031f 	and.w	r3, r3, #31
 800613c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006140:	4618      	mov	r0, r3
 8006142:	bd80      	pop	{r7, pc}
 8006144:	40021000 	.word	0x40021000
 8006148:	0800c4b0 	.word	0x0800c4b0

0800614c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006150:	f7ff ffda 	bl	8006108 <HAL_RCC_GetHCLKFreq>
 8006154:	4602      	mov	r2, r0
 8006156:	4b06      	ldr	r3, [pc, #24]	@ (8006170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	0adb      	lsrs	r3, r3, #11
 800615c:	f003 0307 	and.w	r3, r3, #7
 8006160:	4904      	ldr	r1, [pc, #16]	@ (8006174 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006162:	5ccb      	ldrb	r3, [r1, r3]
 8006164:	f003 031f 	and.w	r3, r3, #31
 8006168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800616c:	4618      	mov	r0, r3
 800616e:	bd80      	pop	{r7, pc}
 8006170:	40021000 	.word	0x40021000
 8006174:	0800c4b0 	.word	0x0800c4b0

08006178 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	220f      	movs	r2, #15
 8006186:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006188:	4b12      	ldr	r3, [pc, #72]	@ (80061d4 <HAL_RCC_GetClockConfig+0x5c>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f003 0203 	and.w	r2, r3, #3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006194:	4b0f      	ldr	r3, [pc, #60]	@ (80061d4 <HAL_RCC_GetClockConfig+0x5c>)
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80061a0:	4b0c      	ldr	r3, [pc, #48]	@ (80061d4 <HAL_RCC_GetClockConfig+0x5c>)
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80061ac:	4b09      	ldr	r3, [pc, #36]	@ (80061d4 <HAL_RCC_GetClockConfig+0x5c>)
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	08db      	lsrs	r3, r3, #3
 80061b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80061ba:	4b07      	ldr	r3, [pc, #28]	@ (80061d8 <HAL_RCC_GetClockConfig+0x60>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0207 	and.w	r2, r3, #7
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	601a      	str	r2, [r3, #0]
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	40021000 	.word	0x40021000
 80061d8:	40022000 	.word	0x40022000

080061dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80061e4:	2300      	movs	r3, #0
 80061e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80061e8:	4b2a      	ldr	r3, [pc, #168]	@ (8006294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80061ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d003      	beq.n	80061fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80061f4:	f7ff f8f0 	bl	80053d8 <HAL_PWREx_GetVoltageRange>
 80061f8:	6178      	str	r0, [r7, #20]
 80061fa:	e014      	b.n	8006226 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80061fc:	4b25      	ldr	r3, [pc, #148]	@ (8006294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80061fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006200:	4a24      	ldr	r2, [pc, #144]	@ (8006294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006206:	6593      	str	r3, [r2, #88]	@ 0x58
 8006208:	4b22      	ldr	r3, [pc, #136]	@ (8006294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800620a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800620c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006210:	60fb      	str	r3, [r7, #12]
 8006212:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006214:	f7ff f8e0 	bl	80053d8 <HAL_PWREx_GetVoltageRange>
 8006218:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800621a:	4b1e      	ldr	r3, [pc, #120]	@ (8006294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800621c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800621e:	4a1d      	ldr	r2, [pc, #116]	@ (8006294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006220:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006224:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800622c:	d10b      	bne.n	8006246 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b80      	cmp	r3, #128	@ 0x80
 8006232:	d919      	bls.n	8006268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2ba0      	cmp	r3, #160	@ 0xa0
 8006238:	d902      	bls.n	8006240 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800623a:	2302      	movs	r3, #2
 800623c:	613b      	str	r3, [r7, #16]
 800623e:	e013      	b.n	8006268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006240:	2301      	movs	r3, #1
 8006242:	613b      	str	r3, [r7, #16]
 8006244:	e010      	b.n	8006268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b80      	cmp	r3, #128	@ 0x80
 800624a:	d902      	bls.n	8006252 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800624c:	2303      	movs	r3, #3
 800624e:	613b      	str	r3, [r7, #16]
 8006250:	e00a      	b.n	8006268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b80      	cmp	r3, #128	@ 0x80
 8006256:	d102      	bne.n	800625e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006258:	2302      	movs	r3, #2
 800625a:	613b      	str	r3, [r7, #16]
 800625c:	e004      	b.n	8006268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b70      	cmp	r3, #112	@ 0x70
 8006262:	d101      	bne.n	8006268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006264:	2301      	movs	r3, #1
 8006266:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006268:	4b0b      	ldr	r3, [pc, #44]	@ (8006298 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f023 0207 	bic.w	r2, r3, #7
 8006270:	4909      	ldr	r1, [pc, #36]	@ (8006298 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	4313      	orrs	r3, r2
 8006276:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006278:	4b07      	ldr	r3, [pc, #28]	@ (8006298 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0307 	and.w	r3, r3, #7
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	429a      	cmp	r2, r3
 8006284:	d001      	beq.n	800628a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e000      	b.n	800628c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	40021000 	.word	0x40021000
 8006298:	40022000 	.word	0x40022000

0800629c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062a4:	2300      	movs	r3, #0
 80062a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062a8:	2300      	movs	r3, #0
 80062aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d041      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80062c0:	d02a      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80062c2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80062c6:	d824      	bhi.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80062c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062cc:	d008      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80062ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062d2:	d81e      	bhi.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00a      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80062d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062dc:	d010      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80062de:	e018      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80062e0:	4b86      	ldr	r3, [pc, #536]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	4a85      	ldr	r2, [pc, #532]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80062ec:	e015      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	3304      	adds	r3, #4
 80062f2:	2100      	movs	r1, #0
 80062f4:	4618      	mov	r0, r3
 80062f6:	f000 facb 	bl	8006890 <RCCEx_PLLSAI1_Config>
 80062fa:	4603      	mov	r3, r0
 80062fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80062fe:	e00c      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	3320      	adds	r3, #32
 8006304:	2100      	movs	r1, #0
 8006306:	4618      	mov	r0, r3
 8006308:	f000 fbb6 	bl	8006a78 <RCCEx_PLLSAI2_Config>
 800630c:	4603      	mov	r3, r0
 800630e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006310:	e003      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	74fb      	strb	r3, [r7, #19]
      break;
 8006316:	e000      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006318:	bf00      	nop
    }

    if(ret == HAL_OK)
 800631a:	7cfb      	ldrb	r3, [r7, #19]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10b      	bne.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006320:	4b76      	ldr	r3, [pc, #472]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006326:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800632e:	4973      	ldr	r1, [pc, #460]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006330:	4313      	orrs	r3, r2
 8006332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006336:	e001      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006338:	7cfb      	ldrb	r3, [r7, #19]
 800633a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d041      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800634c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006350:	d02a      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006352:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006356:	d824      	bhi.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006358:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800635c:	d008      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800635e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006362:	d81e      	bhi.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00a      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006368:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800636c:	d010      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800636e:	e018      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006370:	4b62      	ldr	r3, [pc, #392]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	4a61      	ldr	r2, [pc, #388]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006376:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800637a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800637c:	e015      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3304      	adds	r3, #4
 8006382:	2100      	movs	r1, #0
 8006384:	4618      	mov	r0, r3
 8006386:	f000 fa83 	bl	8006890 <RCCEx_PLLSAI1_Config>
 800638a:	4603      	mov	r3, r0
 800638c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800638e:	e00c      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	3320      	adds	r3, #32
 8006394:	2100      	movs	r1, #0
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fb6e 	bl	8006a78 <RCCEx_PLLSAI2_Config>
 800639c:	4603      	mov	r3, r0
 800639e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80063a0:	e003      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	74fb      	strb	r3, [r7, #19]
      break;
 80063a6:	e000      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80063a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063aa:	7cfb      	ldrb	r3, [r7, #19]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10b      	bne.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80063b0:	4b52      	ldr	r3, [pc, #328]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063b6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063be:	494f      	ldr	r1, [pc, #316]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80063c6:	e001      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c8:	7cfb      	ldrb	r3, [r7, #19]
 80063ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 80a0 	beq.w	800651a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063da:	2300      	movs	r3, #0
 80063dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80063de:	4b47      	ldr	r3, [pc, #284]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x152>
 80063ea:	2301      	movs	r3, #1
 80063ec:	e000      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80063ee:	2300      	movs	r3, #0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00d      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063f4:	4b41      	ldr	r3, [pc, #260]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063f8:	4a40      	ldr	r2, [pc, #256]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006400:	4b3e      	ldr	r3, [pc, #248]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006404:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006408:	60bb      	str	r3, [r7, #8]
 800640a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800640c:	2301      	movs	r3, #1
 800640e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006410:	4b3b      	ldr	r3, [pc, #236]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a3a      	ldr	r2, [pc, #232]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006416:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800641a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800641c:	f7fd fed8 	bl	80041d0 <HAL_GetTick>
 8006420:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006422:	e009      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006424:	f7fd fed4 	bl	80041d0 <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	2b02      	cmp	r3, #2
 8006430:	d902      	bls.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	74fb      	strb	r3, [r7, #19]
        break;
 8006436:	e005      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006438:	4b31      	ldr	r3, [pc, #196]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006440:	2b00      	cmp	r3, #0
 8006442:	d0ef      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006444:	7cfb      	ldrb	r3, [r7, #19]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d15c      	bne.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800644a:	4b2c      	ldr	r3, [pc, #176]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800644c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006450:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006454:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d01f      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	429a      	cmp	r2, r3
 8006466:	d019      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006468:	4b24      	ldr	r3, [pc, #144]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800646a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800646e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006472:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006474:	4b21      	ldr	r3, [pc, #132]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800647a:	4a20      	ldr	r2, [pc, #128]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800647c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006480:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006484:	4b1d      	ldr	r3, [pc, #116]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800648a:	4a1c      	ldr	r2, [pc, #112]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800648c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006490:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006494:	4a19      	ldr	r2, [pc, #100]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d016      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a6:	f7fd fe93 	bl	80041d0 <HAL_GetTick>
 80064aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064ac:	e00b      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ae:	f7fd fe8f 	bl	80041d0 <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064bc:	4293      	cmp	r3, r2
 80064be:	d902      	bls.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	74fb      	strb	r3, [r7, #19]
            break;
 80064c4:	e006      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064c6:	4b0d      	ldr	r3, [pc, #52]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d0ec      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80064d4:	7cfb      	ldrb	r3, [r7, #19]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10c      	bne.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064da:	4b08      	ldr	r3, [pc, #32]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064ea:	4904      	ldr	r1, [pc, #16]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80064f2:	e009      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064f4:	7cfb      	ldrb	r3, [r7, #19]
 80064f6:	74bb      	strb	r3, [r7, #18]
 80064f8:	e006      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80064fa:	bf00      	nop
 80064fc:	40021000 	.word	0x40021000
 8006500:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006504:	7cfb      	ldrb	r3, [r7, #19]
 8006506:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006508:	7c7b      	ldrb	r3, [r7, #17]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d105      	bne.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800650e:	4b9e      	ldr	r3, [pc, #632]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006512:	4a9d      	ldr	r2, [pc, #628]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006514:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006518:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006526:	4b98      	ldr	r3, [pc, #608]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800652c:	f023 0203 	bic.w	r2, r3, #3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006534:	4994      	ldr	r1, [pc, #592]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006536:	4313      	orrs	r3, r2
 8006538:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00a      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006548:	4b8f      	ldr	r3, [pc, #572]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800654a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800654e:	f023 020c 	bic.w	r2, r3, #12
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006556:	498c      	ldr	r1, [pc, #560]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006558:	4313      	orrs	r3, r2
 800655a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0304 	and.w	r3, r3, #4
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800656a:	4b87      	ldr	r3, [pc, #540]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800656c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006570:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006578:	4983      	ldr	r1, [pc, #524]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800657a:	4313      	orrs	r3, r2
 800657c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0308 	and.w	r3, r3, #8
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800658c:	4b7e      	ldr	r3, [pc, #504]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800658e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006592:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800659a:	497b      	ldr	r1, [pc, #492]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800659c:	4313      	orrs	r3, r2
 800659e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0310 	and.w	r3, r3, #16
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80065ae:	4b76      	ldr	r3, [pc, #472]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065bc:	4972      	ldr	r1, [pc, #456]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0320 	and.w	r3, r3, #32
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00a      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065d0:	4b6d      	ldr	r3, [pc, #436]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065de:	496a      	ldr	r1, [pc, #424]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065f2:	4b65      	ldr	r3, [pc, #404]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006600:	4961      	ldr	r1, [pc, #388]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006602:	4313      	orrs	r3, r2
 8006604:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00a      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006614:	4b5c      	ldr	r3, [pc, #368]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800661a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006622:	4959      	ldr	r1, [pc, #356]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006624:	4313      	orrs	r3, r2
 8006626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00a      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006636:	4b54      	ldr	r3, [pc, #336]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800663c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006644:	4950      	ldr	r1, [pc, #320]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006646:	4313      	orrs	r3, r2
 8006648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00a      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006658:	4b4b      	ldr	r3, [pc, #300]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800665a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800665e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006666:	4948      	ldr	r1, [pc, #288]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006668:	4313      	orrs	r3, r2
 800666a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800667a:	4b43      	ldr	r3, [pc, #268]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800667c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006680:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006688:	493f      	ldr	r1, [pc, #252]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800668a:	4313      	orrs	r3, r2
 800668c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d028      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800669c:	4b3a      	ldr	r3, [pc, #232]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800669e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066aa:	4937      	ldr	r1, [pc, #220]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066ba:	d106      	bne.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066bc:	4b32      	ldr	r3, [pc, #200]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	4a31      	ldr	r2, [pc, #196]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066c6:	60d3      	str	r3, [r2, #12]
 80066c8:	e011      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80066d2:	d10c      	bne.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	3304      	adds	r3, #4
 80066d8:	2101      	movs	r1, #1
 80066da:	4618      	mov	r0, r3
 80066dc:	f000 f8d8 	bl	8006890 <RCCEx_PLLSAI1_Config>
 80066e0:	4603      	mov	r3, r0
 80066e2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80066e4:	7cfb      	ldrb	r3, [r7, #19]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80066ea:	7cfb      	ldrb	r3, [r7, #19]
 80066ec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d028      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80066fa:	4b23      	ldr	r3, [pc, #140]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006700:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006708:	491f      	ldr	r1, [pc, #124]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800670a:	4313      	orrs	r3, r2
 800670c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006714:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006718:	d106      	bne.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800671a:	4b1b      	ldr	r3, [pc, #108]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	4a1a      	ldr	r2, [pc, #104]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006720:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006724:	60d3      	str	r3, [r2, #12]
 8006726:	e011      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800672c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006730:	d10c      	bne.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	3304      	adds	r3, #4
 8006736:	2101      	movs	r1, #1
 8006738:	4618      	mov	r0, r3
 800673a:	f000 f8a9 	bl	8006890 <RCCEx_PLLSAI1_Config>
 800673e:	4603      	mov	r3, r0
 8006740:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006742:	7cfb      	ldrb	r3, [r7, #19]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d001      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006748:	7cfb      	ldrb	r3, [r7, #19]
 800674a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d02b      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006758:	4b0b      	ldr	r3, [pc, #44]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800675a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800675e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006766:	4908      	ldr	r1, [pc, #32]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006768:	4313      	orrs	r3, r2
 800676a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006772:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006776:	d109      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006778:	4b03      	ldr	r3, [pc, #12]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	4a02      	ldr	r2, [pc, #8]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800677e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006782:	60d3      	str	r3, [r2, #12]
 8006784:	e014      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006786:	bf00      	nop
 8006788:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006790:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006794:	d10c      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3304      	adds	r3, #4
 800679a:	2101      	movs	r1, #1
 800679c:	4618      	mov	r0, r3
 800679e:	f000 f877 	bl	8006890 <RCCEx_PLLSAI1_Config>
 80067a2:	4603      	mov	r3, r0
 80067a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80067a6:	7cfb      	ldrb	r3, [r7, #19]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80067ac:	7cfb      	ldrb	r3, [r7, #19]
 80067ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d02f      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067bc:	4b2b      	ldr	r3, [pc, #172]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80067be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067c2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067ca:	4928      	ldr	r1, [pc, #160]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067da:	d10d      	bne.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	3304      	adds	r3, #4
 80067e0:	2102      	movs	r1, #2
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 f854 	bl	8006890 <RCCEx_PLLSAI1_Config>
 80067e8:	4603      	mov	r3, r0
 80067ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80067ec:	7cfb      	ldrb	r3, [r7, #19]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d014      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80067f2:	7cfb      	ldrb	r3, [r7, #19]
 80067f4:	74bb      	strb	r3, [r7, #18]
 80067f6:	e011      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006800:	d10c      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	3320      	adds	r3, #32
 8006806:	2102      	movs	r1, #2
 8006808:	4618      	mov	r0, r3
 800680a:	f000 f935 	bl	8006a78 <RCCEx_PLLSAI2_Config>
 800680e:	4603      	mov	r3, r0
 8006810:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006812:	7cfb      	ldrb	r3, [r7, #19]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006818:	7cfb      	ldrb	r3, [r7, #19]
 800681a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00a      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006828:	4b10      	ldr	r3, [pc, #64]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800682a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800682e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006836:	490d      	ldr	r1, [pc, #52]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006838:	4313      	orrs	r3, r2
 800683a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00b      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800684a:	4b08      	ldr	r3, [pc, #32]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800684c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006850:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800685a:	4904      	ldr	r1, [pc, #16]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800685c:	4313      	orrs	r3, r2
 800685e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006862:	7cbb      	ldrb	r3, [r7, #18]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3718      	adds	r7, #24
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	40021000 	.word	0x40021000

08006870 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006870:	b480      	push	{r7}
 8006872:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006874:	4b05      	ldr	r3, [pc, #20]	@ (800688c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a04      	ldr	r2, [pc, #16]	@ (800688c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800687a:	f043 0304 	orr.w	r3, r3, #4
 800687e:	6013      	str	r3, [r2, #0]
}
 8006880:	bf00      	nop
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	40021000 	.word	0x40021000

08006890 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800689a:	2300      	movs	r3, #0
 800689c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800689e:	4b75      	ldr	r3, [pc, #468]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d018      	beq.n	80068dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80068aa:	4b72      	ldr	r3, [pc, #456]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f003 0203 	and.w	r2, r3, #3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d10d      	bne.n	80068d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
       ||
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d009      	beq.n	80068d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80068c2:	4b6c      	ldr	r3, [pc, #432]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	091b      	lsrs	r3, r3, #4
 80068c8:	f003 0307 	and.w	r3, r3, #7
 80068cc:	1c5a      	adds	r2, r3, #1
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
       ||
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d047      	beq.n	8006966 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	73fb      	strb	r3, [r7, #15]
 80068da:	e044      	b.n	8006966 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b03      	cmp	r3, #3
 80068e2:	d018      	beq.n	8006916 <RCCEx_PLLSAI1_Config+0x86>
 80068e4:	2b03      	cmp	r3, #3
 80068e6:	d825      	bhi.n	8006934 <RCCEx_PLLSAI1_Config+0xa4>
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d002      	beq.n	80068f2 <RCCEx_PLLSAI1_Config+0x62>
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d009      	beq.n	8006904 <RCCEx_PLLSAI1_Config+0x74>
 80068f0:	e020      	b.n	8006934 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80068f2:	4b60      	ldr	r3, [pc, #384]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d11d      	bne.n	800693a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006902:	e01a      	b.n	800693a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006904:	4b5b      	ldr	r3, [pc, #364]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800690c:	2b00      	cmp	r3, #0
 800690e:	d116      	bne.n	800693e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006914:	e013      	b.n	800693e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006916:	4b57      	ldr	r3, [pc, #348]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10f      	bne.n	8006942 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006922:	4b54      	ldr	r3, [pc, #336]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d109      	bne.n	8006942 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006932:	e006      	b.n	8006942 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	73fb      	strb	r3, [r7, #15]
      break;
 8006938:	e004      	b.n	8006944 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800693a:	bf00      	nop
 800693c:	e002      	b.n	8006944 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800693e:	bf00      	nop
 8006940:	e000      	b.n	8006944 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006942:	bf00      	nop
    }

    if(status == HAL_OK)
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10d      	bne.n	8006966 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800694a:	4b4a      	ldr	r3, [pc, #296]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6819      	ldr	r1, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	3b01      	subs	r3, #1
 800695c:	011b      	lsls	r3, r3, #4
 800695e:	430b      	orrs	r3, r1
 8006960:	4944      	ldr	r1, [pc, #272]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006962:	4313      	orrs	r3, r2
 8006964:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006966:	7bfb      	ldrb	r3, [r7, #15]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d17d      	bne.n	8006a68 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800696c:	4b41      	ldr	r3, [pc, #260]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a40      	ldr	r2, [pc, #256]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006972:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006976:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006978:	f7fd fc2a 	bl	80041d0 <HAL_GetTick>
 800697c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800697e:	e009      	b.n	8006994 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006980:	f7fd fc26 	bl	80041d0 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b02      	cmp	r3, #2
 800698c:	d902      	bls.n	8006994 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	73fb      	strb	r3, [r7, #15]
        break;
 8006992:	e005      	b.n	80069a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006994:	4b37      	ldr	r3, [pc, #220]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1ef      	bne.n	8006980 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d160      	bne.n	8006a68 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d111      	bne.n	80069d0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069ac:	4b31      	ldr	r3, [pc, #196]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80069b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	6892      	ldr	r2, [r2, #8]
 80069bc:	0211      	lsls	r1, r2, #8
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	68d2      	ldr	r2, [r2, #12]
 80069c2:	0912      	lsrs	r2, r2, #4
 80069c4:	0452      	lsls	r2, r2, #17
 80069c6:	430a      	orrs	r2, r1
 80069c8:	492a      	ldr	r1, [pc, #168]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	610b      	str	r3, [r1, #16]
 80069ce:	e027      	b.n	8006a20 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d112      	bne.n	80069fc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069d6:	4b27      	ldr	r3, [pc, #156]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80069de:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	6892      	ldr	r2, [r2, #8]
 80069e6:	0211      	lsls	r1, r2, #8
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	6912      	ldr	r2, [r2, #16]
 80069ec:	0852      	lsrs	r2, r2, #1
 80069ee:	3a01      	subs	r2, #1
 80069f0:	0552      	lsls	r2, r2, #21
 80069f2:	430a      	orrs	r2, r1
 80069f4:	491f      	ldr	r1, [pc, #124]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	610b      	str	r3, [r1, #16]
 80069fa:	e011      	b.n	8006a20 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069fc:	4b1d      	ldr	r3, [pc, #116]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006a04:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	6892      	ldr	r2, [r2, #8]
 8006a0c:	0211      	lsls	r1, r2, #8
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	6952      	ldr	r2, [r2, #20]
 8006a12:	0852      	lsrs	r2, r2, #1
 8006a14:	3a01      	subs	r2, #1
 8006a16:	0652      	lsls	r2, r2, #25
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	4916      	ldr	r1, [pc, #88]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006a20:	4b14      	ldr	r3, [pc, #80]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a13      	ldr	r2, [pc, #76]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a26:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a2c:	f7fd fbd0 	bl	80041d0 <HAL_GetTick>
 8006a30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a32:	e009      	b.n	8006a48 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a34:	f7fd fbcc 	bl	80041d0 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d902      	bls.n	8006a48 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	73fb      	strb	r3, [r7, #15]
          break;
 8006a46:	e005      	b.n	8006a54 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a48:	4b0a      	ldr	r3, [pc, #40]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d0ef      	beq.n	8006a34 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d106      	bne.n	8006a68 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006a5a:	4b06      	ldr	r3, [pc, #24]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a5c:	691a      	ldr	r2, [r3, #16]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	4904      	ldr	r1, [pc, #16]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	40021000 	.word	0x40021000

08006a78 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006a86:	4b6a      	ldr	r3, [pc, #424]	@ (8006c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	f003 0303 	and.w	r3, r3, #3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d018      	beq.n	8006ac4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006a92:	4b67      	ldr	r3, [pc, #412]	@ (8006c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	f003 0203 	and.w	r2, r3, #3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d10d      	bne.n	8006abe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
       ||
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d009      	beq.n	8006abe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006aaa:	4b61      	ldr	r3, [pc, #388]	@ (8006c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	091b      	lsrs	r3, r3, #4
 8006ab0:	f003 0307 	and.w	r3, r3, #7
 8006ab4:	1c5a      	adds	r2, r3, #1
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
       ||
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d047      	beq.n	8006b4e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	73fb      	strb	r3, [r7, #15]
 8006ac2:	e044      	b.n	8006b4e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b03      	cmp	r3, #3
 8006aca:	d018      	beq.n	8006afe <RCCEx_PLLSAI2_Config+0x86>
 8006acc:	2b03      	cmp	r3, #3
 8006ace:	d825      	bhi.n	8006b1c <RCCEx_PLLSAI2_Config+0xa4>
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d002      	beq.n	8006ada <RCCEx_PLLSAI2_Config+0x62>
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d009      	beq.n	8006aec <RCCEx_PLLSAI2_Config+0x74>
 8006ad8:	e020      	b.n	8006b1c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006ada:	4b55      	ldr	r3, [pc, #340]	@ (8006c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0302 	and.w	r3, r3, #2
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d11d      	bne.n	8006b22 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006aea:	e01a      	b.n	8006b22 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006aec:	4b50      	ldr	r3, [pc, #320]	@ (8006c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d116      	bne.n	8006b26 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006afc:	e013      	b.n	8006b26 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006afe:	4b4c      	ldr	r3, [pc, #304]	@ (8006c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10f      	bne.n	8006b2a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b0a:	4b49      	ldr	r3, [pc, #292]	@ (8006c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d109      	bne.n	8006b2a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b1a:	e006      	b.n	8006b2a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b20:	e004      	b.n	8006b2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006b22:	bf00      	nop
 8006b24:	e002      	b.n	8006b2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006b26:	bf00      	nop
 8006b28:	e000      	b.n	8006b2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006b2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10d      	bne.n	8006b4e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006b32:	4b3f      	ldr	r3, [pc, #252]	@ (8006c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6819      	ldr	r1, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	011b      	lsls	r3, r3, #4
 8006b46:	430b      	orrs	r3, r1
 8006b48:	4939      	ldr	r1, [pc, #228]	@ (8006c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006b4e:	7bfb      	ldrb	r3, [r7, #15]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d167      	bne.n	8006c24 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006b54:	4b36      	ldr	r3, [pc, #216]	@ (8006c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a35      	ldr	r2, [pc, #212]	@ (8006c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b60:	f7fd fb36 	bl	80041d0 <HAL_GetTick>
 8006b64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b66:	e009      	b.n	8006b7c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b68:	f7fd fb32 	bl	80041d0 <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d902      	bls.n	8006b7c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	73fb      	strb	r3, [r7, #15]
        break;
 8006b7a:	e005      	b.n	8006b88 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8006c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1ef      	bne.n	8006b68 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d14a      	bne.n	8006c24 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d111      	bne.n	8006bb8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b94:	4b26      	ldr	r3, [pc, #152]	@ (8006c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006b9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	6892      	ldr	r2, [r2, #8]
 8006ba4:	0211      	lsls	r1, r2, #8
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	68d2      	ldr	r2, [r2, #12]
 8006baa:	0912      	lsrs	r2, r2, #4
 8006bac:	0452      	lsls	r2, r2, #17
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	491f      	ldr	r1, [pc, #124]	@ (8006c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	614b      	str	r3, [r1, #20]
 8006bb6:	e011      	b.n	8006bdc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8006c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006bc0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	6892      	ldr	r2, [r2, #8]
 8006bc8:	0211      	lsls	r1, r2, #8
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	6912      	ldr	r2, [r2, #16]
 8006bce:	0852      	lsrs	r2, r2, #1
 8006bd0:	3a01      	subs	r2, #1
 8006bd2:	0652      	lsls	r2, r2, #25
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	4916      	ldr	r1, [pc, #88]	@ (8006c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006bdc:	4b14      	ldr	r3, [pc, #80]	@ (8006c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a13      	ldr	r2, [pc, #76]	@ (8006c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006be6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be8:	f7fd faf2 	bl	80041d0 <HAL_GetTick>
 8006bec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006bee:	e009      	b.n	8006c04 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006bf0:	f7fd faee 	bl	80041d0 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d902      	bls.n	8006c04 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	73fb      	strb	r3, [r7, #15]
          break;
 8006c02:	e005      	b.n	8006c10 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c04:	4b0a      	ldr	r3, [pc, #40]	@ (8006c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d0ef      	beq.n	8006bf0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d106      	bne.n	8006c24 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006c16:	4b06      	ldr	r3, [pc, #24]	@ (8006c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c18:	695a      	ldr	r2, [r3, #20]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	4904      	ldr	r1, [pc, #16]	@ (8006c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	40021000 	.word	0x40021000

08006c34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e095      	b.n	8006d72 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d108      	bne.n	8006c60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c56:	d009      	beq.n	8006c6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	61da      	str	r2, [r3, #28]
 8006c5e:	e005      	b.n	8006c6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d106      	bne.n	8006c8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7fc feb8 	bl	80039fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ca2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006cac:	d902      	bls.n	8006cb4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60fb      	str	r3, [r7, #12]
 8006cb2:	e002      	b.n	8006cba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006cb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006cb8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006cc2:	d007      	beq.n	8006cd4 <HAL_SPI_Init+0xa0>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ccc:	d002      	beq.n	8006cd4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006ce4:	431a      	orrs	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d02:	431a      	orrs	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	69db      	ldr	r3, [r3, #28]
 8006d08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d0c:	431a      	orrs	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d16:	ea42 0103 	orr.w	r1, r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d1e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	0c1b      	lsrs	r3, r3, #16
 8006d30:	f003 0204 	and.w	r2, r3, #4
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d38:	f003 0310 	and.w	r3, r3, #16
 8006d3c:	431a      	orrs	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d42:	f003 0308 	and.w	r3, r3, #8
 8006d46:	431a      	orrs	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006d50:	ea42 0103 	orr.w	r1, r2, r3
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b082      	sub	sp, #8
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e049      	b.n	8006e20 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d106      	bne.n	8006da6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f841 	bl	8006e28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2202      	movs	r2, #2
 8006daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	3304      	adds	r3, #4
 8006db6:	4619      	mov	r1, r3
 8006db8:	4610      	mov	r0, r2
 8006dba:	f000 f9d9 	bl	8007170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d001      	beq.n	8006e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e04f      	b.n	8006ef4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68da      	ldr	r2, [r3, #12]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f042 0201 	orr.w	r2, r2, #1
 8006e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a23      	ldr	r2, [pc, #140]	@ (8006f00 <HAL_TIM_Base_Start_IT+0xc4>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d01d      	beq.n	8006eb2 <HAL_TIM_Base_Start_IT+0x76>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e7e:	d018      	beq.n	8006eb2 <HAL_TIM_Base_Start_IT+0x76>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a1f      	ldr	r2, [pc, #124]	@ (8006f04 <HAL_TIM_Base_Start_IT+0xc8>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d013      	beq.n	8006eb2 <HAL_TIM_Base_Start_IT+0x76>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8006f08 <HAL_TIM_Base_Start_IT+0xcc>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d00e      	beq.n	8006eb2 <HAL_TIM_Base_Start_IT+0x76>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a1c      	ldr	r2, [pc, #112]	@ (8006f0c <HAL_TIM_Base_Start_IT+0xd0>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d009      	beq.n	8006eb2 <HAL_TIM_Base_Start_IT+0x76>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8006f10 <HAL_TIM_Base_Start_IT+0xd4>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d004      	beq.n	8006eb2 <HAL_TIM_Base_Start_IT+0x76>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a19      	ldr	r2, [pc, #100]	@ (8006f14 <HAL_TIM_Base_Start_IT+0xd8>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d115      	bne.n	8006ede <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689a      	ldr	r2, [r3, #8]
 8006eb8:	4b17      	ldr	r3, [pc, #92]	@ (8006f18 <HAL_TIM_Base_Start_IT+0xdc>)
 8006eba:	4013      	ands	r3, r2
 8006ebc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b06      	cmp	r3, #6
 8006ec2:	d015      	beq.n	8006ef0 <HAL_TIM_Base_Start_IT+0xb4>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eca:	d011      	beq.n	8006ef0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f042 0201 	orr.w	r2, r2, #1
 8006eda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006edc:	e008      	b.n	8006ef0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f042 0201 	orr.w	r2, r2, #1
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	e000      	b.n	8006ef2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ef0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	40012c00 	.word	0x40012c00
 8006f04:	40000400 	.word	0x40000400
 8006f08:	40000800 	.word	0x40000800
 8006f0c:	40000c00 	.word	0x40000c00
 8006f10:	40013400 	.word	0x40013400
 8006f14:	40014000 	.word	0x40014000
 8006f18:	00010007 	.word	0x00010007

08006f1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d020      	beq.n	8006f80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f003 0302 	and.w	r3, r3, #2
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d01b      	beq.n	8006f80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f06f 0202 	mvn.w	r2, #2
 8006f50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	f003 0303 	and.w	r3, r3, #3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d003      	beq.n	8006f6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f8e4 	bl	8007134 <HAL_TIM_IC_CaptureCallback>
 8006f6c:	e005      	b.n	8006f7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f8d6 	bl	8007120 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f8e7 	bl	8007148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	f003 0304 	and.w	r3, r3, #4
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d020      	beq.n	8006fcc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f003 0304 	and.w	r3, r3, #4
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d01b      	beq.n	8006fcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f06f 0204 	mvn.w	r2, #4
 8006f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f8be 	bl	8007134 <HAL_TIM_IC_CaptureCallback>
 8006fb8:	e005      	b.n	8006fc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f8b0 	bl	8007120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f8c1 	bl	8007148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	f003 0308 	and.w	r3, r3, #8
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d020      	beq.n	8007018 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f003 0308 	and.w	r3, r3, #8
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d01b      	beq.n	8007018 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f06f 0208 	mvn.w	r2, #8
 8006fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2204      	movs	r2, #4
 8006fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	f003 0303 	and.w	r3, r3, #3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f898 	bl	8007134 <HAL_TIM_IC_CaptureCallback>
 8007004:	e005      	b.n	8007012 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f88a 	bl	8007120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f89b 	bl	8007148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	f003 0310 	and.w	r3, r3, #16
 800701e:	2b00      	cmp	r3, #0
 8007020:	d020      	beq.n	8007064 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f003 0310 	and.w	r3, r3, #16
 8007028:	2b00      	cmp	r3, #0
 800702a:	d01b      	beq.n	8007064 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f06f 0210 	mvn.w	r2, #16
 8007034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2208      	movs	r2, #8
 800703a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007046:	2b00      	cmp	r3, #0
 8007048:	d003      	beq.n	8007052 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f872 	bl	8007134 <HAL_TIM_IC_CaptureCallback>
 8007050:	e005      	b.n	800705e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f864 	bl	8007120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f875 	bl	8007148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00c      	beq.n	8007088 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b00      	cmp	r3, #0
 8007076:	d007      	beq.n	8007088 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f06f 0201 	mvn.w	r2, #1
 8007080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7fc fb74 	bl	8003770 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00c      	beq.n	80070ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007098:	2b00      	cmp	r3, #0
 800709a:	d007      	beq.n	80070ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80070a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f906 	bl	80072b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00c      	beq.n	80070d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d007      	beq.n	80070d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80070c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f8fe 	bl	80072cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00c      	beq.n	80070f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d007      	beq.n	80070f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80070ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f834 	bl	800715c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	f003 0320 	and.w	r3, r3, #32
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00c      	beq.n	8007118 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f003 0320 	and.w	r3, r3, #32
 8007104:	2b00      	cmp	r3, #0
 8007106:	d007      	beq.n	8007118 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f06f 0220 	mvn.w	r2, #32
 8007110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f8c6 	bl	80072a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007118:	bf00      	nop
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007128:	bf00      	nop
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a40      	ldr	r2, [pc, #256]	@ (8007284 <TIM_Base_SetConfig+0x114>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d013      	beq.n	80071b0 <TIM_Base_SetConfig+0x40>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800718e:	d00f      	beq.n	80071b0 <TIM_Base_SetConfig+0x40>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a3d      	ldr	r2, [pc, #244]	@ (8007288 <TIM_Base_SetConfig+0x118>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d00b      	beq.n	80071b0 <TIM_Base_SetConfig+0x40>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a3c      	ldr	r2, [pc, #240]	@ (800728c <TIM_Base_SetConfig+0x11c>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d007      	beq.n	80071b0 <TIM_Base_SetConfig+0x40>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a3b      	ldr	r2, [pc, #236]	@ (8007290 <TIM_Base_SetConfig+0x120>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d003      	beq.n	80071b0 <TIM_Base_SetConfig+0x40>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a3a      	ldr	r2, [pc, #232]	@ (8007294 <TIM_Base_SetConfig+0x124>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d108      	bne.n	80071c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	4313      	orrs	r3, r2
 80071c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a2f      	ldr	r2, [pc, #188]	@ (8007284 <TIM_Base_SetConfig+0x114>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d01f      	beq.n	800720a <TIM_Base_SetConfig+0x9a>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071d0:	d01b      	beq.n	800720a <TIM_Base_SetConfig+0x9a>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a2c      	ldr	r2, [pc, #176]	@ (8007288 <TIM_Base_SetConfig+0x118>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d017      	beq.n	800720a <TIM_Base_SetConfig+0x9a>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a2b      	ldr	r2, [pc, #172]	@ (800728c <TIM_Base_SetConfig+0x11c>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d013      	beq.n	800720a <TIM_Base_SetConfig+0x9a>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a2a      	ldr	r2, [pc, #168]	@ (8007290 <TIM_Base_SetConfig+0x120>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d00f      	beq.n	800720a <TIM_Base_SetConfig+0x9a>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a29      	ldr	r2, [pc, #164]	@ (8007294 <TIM_Base_SetConfig+0x124>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d00b      	beq.n	800720a <TIM_Base_SetConfig+0x9a>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a28      	ldr	r2, [pc, #160]	@ (8007298 <TIM_Base_SetConfig+0x128>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d007      	beq.n	800720a <TIM_Base_SetConfig+0x9a>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a27      	ldr	r2, [pc, #156]	@ (800729c <TIM_Base_SetConfig+0x12c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d003      	beq.n	800720a <TIM_Base_SetConfig+0x9a>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a26      	ldr	r2, [pc, #152]	@ (80072a0 <TIM_Base_SetConfig+0x130>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d108      	bne.n	800721c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	4313      	orrs	r3, r2
 800721a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	4313      	orrs	r3, r2
 8007228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	689a      	ldr	r2, [r3, #8]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a10      	ldr	r2, [pc, #64]	@ (8007284 <TIM_Base_SetConfig+0x114>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d00f      	beq.n	8007268 <TIM_Base_SetConfig+0xf8>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a12      	ldr	r2, [pc, #72]	@ (8007294 <TIM_Base_SetConfig+0x124>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00b      	beq.n	8007268 <TIM_Base_SetConfig+0xf8>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a11      	ldr	r2, [pc, #68]	@ (8007298 <TIM_Base_SetConfig+0x128>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d007      	beq.n	8007268 <TIM_Base_SetConfig+0xf8>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a10      	ldr	r2, [pc, #64]	@ (800729c <TIM_Base_SetConfig+0x12c>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d003      	beq.n	8007268 <TIM_Base_SetConfig+0xf8>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a0f      	ldr	r2, [pc, #60]	@ (80072a0 <TIM_Base_SetConfig+0x130>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d103      	bne.n	8007270 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	691a      	ldr	r2, [r3, #16]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	615a      	str	r2, [r3, #20]
}
 8007276:	bf00      	nop
 8007278:	3714      	adds	r7, #20
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	40012c00 	.word	0x40012c00
 8007288:	40000400 	.word	0x40000400
 800728c:	40000800 	.word	0x40000800
 8007290:	40000c00 	.word	0x40000c00
 8007294:	40013400 	.word	0x40013400
 8007298:	40014000 	.word	0x40014000
 800729c:	40014400 	.word	0x40014400
 80072a0:	40014800 	.word	0x40014800

080072a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e040      	b.n	8007374 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d106      	bne.n	8007308 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7fc fbbe 	bl	8003a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2224      	movs	r2, #36	@ 0x24
 800730c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0201 	bic.w	r2, r2, #1
 800731c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007322:	2b00      	cmp	r3, #0
 8007324:	d002      	beq.n	800732c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 fe70 	bl	800800c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fbb5 	bl	8007a9c <UART_SetConfig>
 8007332:	4603      	mov	r3, r0
 8007334:	2b01      	cmp	r3, #1
 8007336:	d101      	bne.n	800733c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e01b      	b.n	8007374 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800734a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689a      	ldr	r2, [r3, #8]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800735a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f042 0201 	orr.w	r2, r2, #1
 800736a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 feef 	bl	8008150 <UART_CheckIdleState>
 8007372:	4603      	mov	r3, r0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b08a      	sub	sp, #40	@ 0x28
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	4613      	mov	r3, r2
 8007388:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800738e:	2b20      	cmp	r3, #32
 8007390:	d165      	bne.n	800745e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <HAL_UART_Transmit_DMA+0x22>
 8007398:	88fb      	ldrh	r3, [r7, #6]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e05e      	b.n	8007460 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	88fa      	ldrh	r2, [r7, #6]
 80073ac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	88fa      	ldrh	r2, [r7, #6]
 80073b4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2221      	movs	r2, #33	@ 0x21
 80073c4:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d027      	beq.n	800741e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073d2:	4a25      	ldr	r2, [pc, #148]	@ (8007468 <HAL_UART_Transmit_DMA+0xec>)
 80073d4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073da:	4a24      	ldr	r2, [pc, #144]	@ (800746c <HAL_UART_Transmit_DMA+0xf0>)
 80073dc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073e2:	4a23      	ldr	r2, [pc, #140]	@ (8007470 <HAL_UART_Transmit_DMA+0xf4>)
 80073e4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ea:	2200      	movs	r2, #0
 80073ec:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073f6:	4619      	mov	r1, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3328      	adds	r3, #40	@ 0x28
 80073fe:	461a      	mov	r2, r3
 8007400:	88fb      	ldrh	r3, [r7, #6]
 8007402:	f7fd f9bb 	bl	800477c <HAL_DMA_Start_IT>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d008      	beq.n	800741e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2210      	movs	r2, #16
 8007410:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2220      	movs	r2, #32
 8007418:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e020      	b.n	8007460 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2240      	movs	r2, #64	@ 0x40
 8007424:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3308      	adds	r3, #8
 800742c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	e853 3f00 	ldrex	r3, [r3]
 8007434:	613b      	str	r3, [r7, #16]
   return(result);
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800743c:	627b      	str	r3, [r7, #36]	@ 0x24
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	3308      	adds	r3, #8
 8007444:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007446:	623a      	str	r2, [r7, #32]
 8007448:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744a:	69f9      	ldr	r1, [r7, #28]
 800744c:	6a3a      	ldr	r2, [r7, #32]
 800744e:	e841 2300 	strex	r3, r2, [r1]
 8007452:	61bb      	str	r3, [r7, #24]
   return(result);
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1e5      	bne.n	8007426 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	e000      	b.n	8007460 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800745e:	2302      	movs	r3, #2
  }
}
 8007460:	4618      	mov	r0, r3
 8007462:	3728      	adds	r7, #40	@ 0x28
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	08008483 	.word	0x08008483
 800746c:	0800851d 	.word	0x0800851d
 8007470:	08008539 	.word	0x08008539

08007474 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b0ba      	sub	sp, #232	@ 0xe8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800749a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800749e:	f640 030f 	movw	r3, #2063	@ 0x80f
 80074a2:	4013      	ands	r3, r2
 80074a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80074a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d115      	bne.n	80074dc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80074b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074b4:	f003 0320 	and.w	r3, r3, #32
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00f      	beq.n	80074dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80074bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074c0:	f003 0320 	and.w	r3, r3, #32
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d009      	beq.n	80074dc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f000 82ae 	beq.w	8007a2e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	4798      	blx	r3
      }
      return;
 80074da:	e2a8      	b.n	8007a2e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80074dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 8117 	beq.w	8007714 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80074e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d106      	bne.n	8007500 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80074f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80074f6:	4b85      	ldr	r3, [pc, #532]	@ (800770c <HAL_UART_IRQHandler+0x298>)
 80074f8:	4013      	ands	r3, r2
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f000 810a 	beq.w	8007714 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007504:	f003 0301 	and.w	r3, r3, #1
 8007508:	2b00      	cmp	r3, #0
 800750a:	d011      	beq.n	8007530 <HAL_UART_IRQHandler+0xbc>
 800750c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00b      	beq.n	8007530 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2201      	movs	r2, #1
 800751e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007526:	f043 0201 	orr.w	r2, r3, #1
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007534:	f003 0302 	and.w	r3, r3, #2
 8007538:	2b00      	cmp	r3, #0
 800753a:	d011      	beq.n	8007560 <HAL_UART_IRQHandler+0xec>
 800753c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007540:	f003 0301 	and.w	r3, r3, #1
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00b      	beq.n	8007560 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2202      	movs	r2, #2
 800754e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007556:	f043 0204 	orr.w	r2, r3, #4
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007564:	f003 0304 	and.w	r3, r3, #4
 8007568:	2b00      	cmp	r3, #0
 800756a:	d011      	beq.n	8007590 <HAL_UART_IRQHandler+0x11c>
 800756c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007570:	f003 0301 	and.w	r3, r3, #1
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00b      	beq.n	8007590 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2204      	movs	r2, #4
 800757e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007586:	f043 0202 	orr.w	r2, r3, #2
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007594:	f003 0308 	and.w	r3, r3, #8
 8007598:	2b00      	cmp	r3, #0
 800759a:	d017      	beq.n	80075cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800759c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075a0:	f003 0320 	and.w	r3, r3, #32
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d105      	bne.n	80075b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80075a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00b      	beq.n	80075cc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2208      	movs	r2, #8
 80075ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075c2:	f043 0208 	orr.w	r2, r3, #8
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80075cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d012      	beq.n	80075fe <HAL_UART_IRQHandler+0x18a>
 80075d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00c      	beq.n	80075fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80075ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075f4:	f043 0220 	orr.w	r2, r3, #32
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 8214 	beq.w	8007a32 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800760a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800760e:	f003 0320 	and.w	r3, r3, #32
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00d      	beq.n	8007632 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800761a:	f003 0320 	and.w	r3, r3, #32
 800761e:	2b00      	cmp	r3, #0
 8007620:	d007      	beq.n	8007632 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007638:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007646:	2b40      	cmp	r3, #64	@ 0x40
 8007648:	d005      	beq.n	8007656 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800764a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800764e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007652:	2b00      	cmp	r3, #0
 8007654:	d04f      	beq.n	80076f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 feaf 	bl	80083ba <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007666:	2b40      	cmp	r3, #64	@ 0x40
 8007668:	d141      	bne.n	80076ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3308      	adds	r3, #8
 8007670:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007674:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007678:	e853 3f00 	ldrex	r3, [r3]
 800767c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007680:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007684:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007688:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	3308      	adds	r3, #8
 8007692:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007696:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800769a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80076a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80076a6:	e841 2300 	strex	r3, r2, [r1]
 80076aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80076ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1d9      	bne.n	800766a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d013      	beq.n	80076e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076c2:	4a13      	ldr	r2, [pc, #76]	@ (8007710 <HAL_UART_IRQHandler+0x29c>)
 80076c4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7fd f8f4 	bl	80048b8 <HAL_DMA_Abort_IT>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d017      	beq.n	8007706 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80076e0:	4610      	mov	r0, r2
 80076e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076e4:	e00f      	b.n	8007706 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f9c2 	bl	8007a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ec:	e00b      	b.n	8007706 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f9be 	bl	8007a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076f4:	e007      	b.n	8007706 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f9ba 	bl	8007a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007704:	e195      	b.n	8007a32 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007706:	bf00      	nop
    return;
 8007708:	e193      	b.n	8007a32 <HAL_UART_IRQHandler+0x5be>
 800770a:	bf00      	nop
 800770c:	04000120 	.word	0x04000120
 8007710:	080085b7 	.word	0x080085b7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007718:	2b01      	cmp	r3, #1
 800771a:	f040 814e 	bne.w	80079ba <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800771e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007722:	f003 0310 	and.w	r3, r3, #16
 8007726:	2b00      	cmp	r3, #0
 8007728:	f000 8147 	beq.w	80079ba <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800772c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007730:	f003 0310 	and.w	r3, r3, #16
 8007734:	2b00      	cmp	r3, #0
 8007736:	f000 8140 	beq.w	80079ba <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2210      	movs	r2, #16
 8007740:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800774c:	2b40      	cmp	r3, #64	@ 0x40
 800774e:	f040 80b8 	bne.w	80078c2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800775e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007762:	2b00      	cmp	r3, #0
 8007764:	f000 8167 	beq.w	8007a36 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800776e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007772:	429a      	cmp	r2, r3
 8007774:	f080 815f 	bcs.w	8007a36 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800777e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0320 	and.w	r3, r3, #32
 800778e:	2b00      	cmp	r3, #0
 8007790:	f040 8086 	bne.w	80078a0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80077a0:	e853 3f00 	ldrex	r3, [r3]
 80077a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80077a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80077ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	461a      	mov	r2, r3
 80077ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80077be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80077c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80077ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80077ce:	e841 2300 	strex	r3, r2, [r1]
 80077d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80077d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1da      	bne.n	8007794 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	3308      	adds	r3, #8
 80077e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077e8:	e853 3f00 	ldrex	r3, [r3]
 80077ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80077ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077f0:	f023 0301 	bic.w	r3, r3, #1
 80077f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3308      	adds	r3, #8
 80077fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007802:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007806:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007808:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800780a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800780e:	e841 2300 	strex	r3, r2, [r1]
 8007812:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007814:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1e1      	bne.n	80077de <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3308      	adds	r3, #8
 8007820:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007822:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800782a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800782c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007830:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	3308      	adds	r3, #8
 800783a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800783e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007840:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007842:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007844:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007846:	e841 2300 	strex	r3, r2, [r1]
 800784a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800784c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1e3      	bne.n	800781a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2220      	movs	r2, #32
 8007856:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007868:	e853 3f00 	ldrex	r3, [r3]
 800786c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800786e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007870:	f023 0310 	bic.w	r3, r3, #16
 8007874:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	461a      	mov	r2, r3
 800787e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007882:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007884:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007886:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007888:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800788a:	e841 2300 	strex	r3, r2, [r1]
 800788e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007890:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1e4      	bne.n	8007860 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800789a:	4618      	mov	r0, r3
 800789c:	f7fc ffce 	bl	800483c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2202      	movs	r2, #2
 80078a4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	4619      	mov	r1, r3
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f8e2 	bl	8007a84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078c0:	e0b9      	b.n	8007a36 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80078dc:	b29b      	uxth	r3, r3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f000 80ab 	beq.w	8007a3a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80078e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f000 80a6 	beq.w	8007a3a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f6:	e853 3f00 	ldrex	r3, [r3]
 80078fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007902:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	461a      	mov	r2, r3
 800790c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007910:	647b      	str	r3, [r7, #68]	@ 0x44
 8007912:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007914:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007916:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007918:	e841 2300 	strex	r3, r2, [r1]
 800791c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800791e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1e4      	bne.n	80078ee <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	3308      	adds	r3, #8
 800792a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792e:	e853 3f00 	ldrex	r3, [r3]
 8007932:	623b      	str	r3, [r7, #32]
   return(result);
 8007934:	6a3b      	ldr	r3, [r7, #32]
 8007936:	f023 0301 	bic.w	r3, r3, #1
 800793a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	3308      	adds	r3, #8
 8007944:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007948:	633a      	str	r2, [r7, #48]	@ 0x30
 800794a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800794e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007950:	e841 2300 	strex	r3, r2, [r1]
 8007954:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1e3      	bne.n	8007924 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2220      	movs	r2, #32
 8007960:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	e853 3f00 	ldrex	r3, [r3]
 800797c:	60fb      	str	r3, [r7, #12]
   return(result);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f023 0310 	bic.w	r3, r3, #16
 8007984:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	461a      	mov	r2, r3
 800798e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007992:	61fb      	str	r3, [r7, #28]
 8007994:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007996:	69b9      	ldr	r1, [r7, #24]
 8007998:	69fa      	ldr	r2, [r7, #28]
 800799a:	e841 2300 	strex	r3, r2, [r1]
 800799e:	617b      	str	r3, [r7, #20]
   return(result);
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1e4      	bne.n	8007970 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2202      	movs	r2, #2
 80079aa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80079b0:	4619      	mov	r1, r3
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f866 	bl	8007a84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079b8:	e03f      	b.n	8007a3a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80079ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00e      	beq.n	80079e4 <HAL_UART_IRQHandler+0x570>
 80079c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d008      	beq.n	80079e4 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80079da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 fe2a 	bl	8008636 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079e2:	e02d      	b.n	8007a40 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80079e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00e      	beq.n	8007a0e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80079f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d008      	beq.n	8007a0e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d01c      	beq.n	8007a3e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	4798      	blx	r3
    }
    return;
 8007a0c:	e017      	b.n	8007a3e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d012      	beq.n	8007a40 <HAL_UART_IRQHandler+0x5cc>
 8007a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00c      	beq.n	8007a40 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fddb 	bl	80085e2 <UART_EndTransmit_IT>
    return;
 8007a2c:	e008      	b.n	8007a40 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007a2e:	bf00      	nop
 8007a30:	e006      	b.n	8007a40 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007a32:	bf00      	nop
 8007a34:	e004      	b.n	8007a40 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007a36:	bf00      	nop
 8007a38:	e002      	b.n	8007a40 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007a3a:	bf00      	nop
 8007a3c:	e000      	b.n	8007a40 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007a3e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007a40:	37e8      	adds	r7, #232	@ 0xe8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop

08007a48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007aa0:	b08a      	sub	sp, #40	@ 0x28
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	689a      	ldr	r2, [r3, #8]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	431a      	orrs	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	695b      	ldr	r3, [r3, #20]
 8007aba:	431a      	orrs	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	69db      	ldr	r3, [r3, #28]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	4ba4      	ldr	r3, [pc, #656]	@ (8007d5c <UART_SetConfig+0x2c0>)
 8007acc:	4013      	ands	r3, r2
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	6812      	ldr	r2, [r2, #0]
 8007ad2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007ad4:	430b      	orrs	r3, r1
 8007ad6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	68da      	ldr	r2, [r3, #12]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a99      	ldr	r2, [pc, #612]	@ (8007d60 <UART_SetConfig+0x2c4>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d004      	beq.n	8007b08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b04:	4313      	orrs	r3, r2
 8007b06:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b18:	430a      	orrs	r2, r1
 8007b1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a90      	ldr	r2, [pc, #576]	@ (8007d64 <UART_SetConfig+0x2c8>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d126      	bne.n	8007b74 <UART_SetConfig+0xd8>
 8007b26:	4b90      	ldr	r3, [pc, #576]	@ (8007d68 <UART_SetConfig+0x2cc>)
 8007b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b2c:	f003 0303 	and.w	r3, r3, #3
 8007b30:	2b03      	cmp	r3, #3
 8007b32:	d81b      	bhi.n	8007b6c <UART_SetConfig+0xd0>
 8007b34:	a201      	add	r2, pc, #4	@ (adr r2, 8007b3c <UART_SetConfig+0xa0>)
 8007b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3a:	bf00      	nop
 8007b3c:	08007b4d 	.word	0x08007b4d
 8007b40:	08007b5d 	.word	0x08007b5d
 8007b44:	08007b55 	.word	0x08007b55
 8007b48:	08007b65 	.word	0x08007b65
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b52:	e116      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007b54:	2302      	movs	r3, #2
 8007b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b5a:	e112      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007b5c:	2304      	movs	r3, #4
 8007b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b62:	e10e      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007b64:	2308      	movs	r3, #8
 8007b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b6a:	e10a      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007b6c:	2310      	movs	r3, #16
 8007b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b72:	e106      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a7c      	ldr	r2, [pc, #496]	@ (8007d6c <UART_SetConfig+0x2d0>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d138      	bne.n	8007bf0 <UART_SetConfig+0x154>
 8007b7e:	4b7a      	ldr	r3, [pc, #488]	@ (8007d68 <UART_SetConfig+0x2cc>)
 8007b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b84:	f003 030c 	and.w	r3, r3, #12
 8007b88:	2b0c      	cmp	r3, #12
 8007b8a:	d82d      	bhi.n	8007be8 <UART_SetConfig+0x14c>
 8007b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8007b94 <UART_SetConfig+0xf8>)
 8007b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b92:	bf00      	nop
 8007b94:	08007bc9 	.word	0x08007bc9
 8007b98:	08007be9 	.word	0x08007be9
 8007b9c:	08007be9 	.word	0x08007be9
 8007ba0:	08007be9 	.word	0x08007be9
 8007ba4:	08007bd9 	.word	0x08007bd9
 8007ba8:	08007be9 	.word	0x08007be9
 8007bac:	08007be9 	.word	0x08007be9
 8007bb0:	08007be9 	.word	0x08007be9
 8007bb4:	08007bd1 	.word	0x08007bd1
 8007bb8:	08007be9 	.word	0x08007be9
 8007bbc:	08007be9 	.word	0x08007be9
 8007bc0:	08007be9 	.word	0x08007be9
 8007bc4:	08007be1 	.word	0x08007be1
 8007bc8:	2300      	movs	r3, #0
 8007bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bce:	e0d8      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bd6:	e0d4      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007bd8:	2304      	movs	r3, #4
 8007bda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bde:	e0d0      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007be0:	2308      	movs	r3, #8
 8007be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007be6:	e0cc      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007be8:	2310      	movs	r3, #16
 8007bea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bee:	e0c8      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a5e      	ldr	r2, [pc, #376]	@ (8007d70 <UART_SetConfig+0x2d4>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d125      	bne.n	8007c46 <UART_SetConfig+0x1aa>
 8007bfa:	4b5b      	ldr	r3, [pc, #364]	@ (8007d68 <UART_SetConfig+0x2cc>)
 8007bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c00:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007c04:	2b30      	cmp	r3, #48	@ 0x30
 8007c06:	d016      	beq.n	8007c36 <UART_SetConfig+0x19a>
 8007c08:	2b30      	cmp	r3, #48	@ 0x30
 8007c0a:	d818      	bhi.n	8007c3e <UART_SetConfig+0x1a2>
 8007c0c:	2b20      	cmp	r3, #32
 8007c0e:	d00a      	beq.n	8007c26 <UART_SetConfig+0x18a>
 8007c10:	2b20      	cmp	r3, #32
 8007c12:	d814      	bhi.n	8007c3e <UART_SetConfig+0x1a2>
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <UART_SetConfig+0x182>
 8007c18:	2b10      	cmp	r3, #16
 8007c1a:	d008      	beq.n	8007c2e <UART_SetConfig+0x192>
 8007c1c:	e00f      	b.n	8007c3e <UART_SetConfig+0x1a2>
 8007c1e:	2300      	movs	r3, #0
 8007c20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c24:	e0ad      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007c26:	2302      	movs	r3, #2
 8007c28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c2c:	e0a9      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007c2e:	2304      	movs	r3, #4
 8007c30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c34:	e0a5      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007c36:	2308      	movs	r3, #8
 8007c38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c3c:	e0a1      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007c3e:	2310      	movs	r3, #16
 8007c40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c44:	e09d      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a4a      	ldr	r2, [pc, #296]	@ (8007d74 <UART_SetConfig+0x2d8>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d125      	bne.n	8007c9c <UART_SetConfig+0x200>
 8007c50:	4b45      	ldr	r3, [pc, #276]	@ (8007d68 <UART_SetConfig+0x2cc>)
 8007c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c56:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007c5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c5c:	d016      	beq.n	8007c8c <UART_SetConfig+0x1f0>
 8007c5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c60:	d818      	bhi.n	8007c94 <UART_SetConfig+0x1f8>
 8007c62:	2b80      	cmp	r3, #128	@ 0x80
 8007c64:	d00a      	beq.n	8007c7c <UART_SetConfig+0x1e0>
 8007c66:	2b80      	cmp	r3, #128	@ 0x80
 8007c68:	d814      	bhi.n	8007c94 <UART_SetConfig+0x1f8>
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d002      	beq.n	8007c74 <UART_SetConfig+0x1d8>
 8007c6e:	2b40      	cmp	r3, #64	@ 0x40
 8007c70:	d008      	beq.n	8007c84 <UART_SetConfig+0x1e8>
 8007c72:	e00f      	b.n	8007c94 <UART_SetConfig+0x1f8>
 8007c74:	2300      	movs	r3, #0
 8007c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c7a:	e082      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c82:	e07e      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007c84:	2304      	movs	r3, #4
 8007c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c8a:	e07a      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007c8c:	2308      	movs	r3, #8
 8007c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c92:	e076      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007c94:	2310      	movs	r3, #16
 8007c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c9a:	e072      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a35      	ldr	r2, [pc, #212]	@ (8007d78 <UART_SetConfig+0x2dc>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d12a      	bne.n	8007cfc <UART_SetConfig+0x260>
 8007ca6:	4b30      	ldr	r3, [pc, #192]	@ (8007d68 <UART_SetConfig+0x2cc>)
 8007ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007cb4:	d01a      	beq.n	8007cec <UART_SetConfig+0x250>
 8007cb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007cba:	d81b      	bhi.n	8007cf4 <UART_SetConfig+0x258>
 8007cbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cc0:	d00c      	beq.n	8007cdc <UART_SetConfig+0x240>
 8007cc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cc6:	d815      	bhi.n	8007cf4 <UART_SetConfig+0x258>
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d003      	beq.n	8007cd4 <UART_SetConfig+0x238>
 8007ccc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cd0:	d008      	beq.n	8007ce4 <UART_SetConfig+0x248>
 8007cd2:	e00f      	b.n	8007cf4 <UART_SetConfig+0x258>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cda:	e052      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007cdc:	2302      	movs	r3, #2
 8007cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ce2:	e04e      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007ce4:	2304      	movs	r3, #4
 8007ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cea:	e04a      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007cec:	2308      	movs	r3, #8
 8007cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cf2:	e046      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007cf4:	2310      	movs	r3, #16
 8007cf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cfa:	e042      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a17      	ldr	r2, [pc, #92]	@ (8007d60 <UART_SetConfig+0x2c4>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d13a      	bne.n	8007d7c <UART_SetConfig+0x2e0>
 8007d06:	4b18      	ldr	r3, [pc, #96]	@ (8007d68 <UART_SetConfig+0x2cc>)
 8007d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007d10:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d14:	d01a      	beq.n	8007d4c <UART_SetConfig+0x2b0>
 8007d16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d1a:	d81b      	bhi.n	8007d54 <UART_SetConfig+0x2b8>
 8007d1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d20:	d00c      	beq.n	8007d3c <UART_SetConfig+0x2a0>
 8007d22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d26:	d815      	bhi.n	8007d54 <UART_SetConfig+0x2b8>
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d003      	beq.n	8007d34 <UART_SetConfig+0x298>
 8007d2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d30:	d008      	beq.n	8007d44 <UART_SetConfig+0x2a8>
 8007d32:	e00f      	b.n	8007d54 <UART_SetConfig+0x2b8>
 8007d34:	2300      	movs	r3, #0
 8007d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d3a:	e022      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d42:	e01e      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007d44:	2304      	movs	r3, #4
 8007d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d4a:	e01a      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007d4c:	2308      	movs	r3, #8
 8007d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d52:	e016      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007d54:	2310      	movs	r3, #16
 8007d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d5a:	e012      	b.n	8007d82 <UART_SetConfig+0x2e6>
 8007d5c:	efff69f3 	.word	0xefff69f3
 8007d60:	40008000 	.word	0x40008000
 8007d64:	40013800 	.word	0x40013800
 8007d68:	40021000 	.word	0x40021000
 8007d6c:	40004400 	.word	0x40004400
 8007d70:	40004800 	.word	0x40004800
 8007d74:	40004c00 	.word	0x40004c00
 8007d78:	40005000 	.word	0x40005000
 8007d7c:	2310      	movs	r3, #16
 8007d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a9f      	ldr	r2, [pc, #636]	@ (8008004 <UART_SetConfig+0x568>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d17a      	bne.n	8007e82 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007d90:	2b08      	cmp	r3, #8
 8007d92:	d824      	bhi.n	8007dde <UART_SetConfig+0x342>
 8007d94:	a201      	add	r2, pc, #4	@ (adr r2, 8007d9c <UART_SetConfig+0x300>)
 8007d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9a:	bf00      	nop
 8007d9c:	08007dc1 	.word	0x08007dc1
 8007da0:	08007ddf 	.word	0x08007ddf
 8007da4:	08007dc9 	.word	0x08007dc9
 8007da8:	08007ddf 	.word	0x08007ddf
 8007dac:	08007dcf 	.word	0x08007dcf
 8007db0:	08007ddf 	.word	0x08007ddf
 8007db4:	08007ddf 	.word	0x08007ddf
 8007db8:	08007ddf 	.word	0x08007ddf
 8007dbc:	08007dd7 	.word	0x08007dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dc0:	f7fe f9ae 	bl	8006120 <HAL_RCC_GetPCLK1Freq>
 8007dc4:	61f8      	str	r0, [r7, #28]
        break;
 8007dc6:	e010      	b.n	8007dea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dc8:	4b8f      	ldr	r3, [pc, #572]	@ (8008008 <UART_SetConfig+0x56c>)
 8007dca:	61fb      	str	r3, [r7, #28]
        break;
 8007dcc:	e00d      	b.n	8007dea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dce:	f7fe f90f 	bl	8005ff0 <HAL_RCC_GetSysClockFreq>
 8007dd2:	61f8      	str	r0, [r7, #28]
        break;
 8007dd4:	e009      	b.n	8007dea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dda:	61fb      	str	r3, [r7, #28]
        break;
 8007ddc:	e005      	b.n	8007dea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007dde:	2300      	movs	r3, #0
 8007de0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007de8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f000 80fb 	beq.w	8007fe8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	685a      	ldr	r2, [r3, #4]
 8007df6:	4613      	mov	r3, r2
 8007df8:	005b      	lsls	r3, r3, #1
 8007dfa:	4413      	add	r3, r2
 8007dfc:	69fa      	ldr	r2, [r7, #28]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d305      	bcc.n	8007e0e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e08:	69fa      	ldr	r2, [r7, #28]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d903      	bls.n	8007e16 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007e14:	e0e8      	b.n	8007fe8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	461c      	mov	r4, r3
 8007e1c:	4615      	mov	r5, r2
 8007e1e:	f04f 0200 	mov.w	r2, #0
 8007e22:	f04f 0300 	mov.w	r3, #0
 8007e26:	022b      	lsls	r3, r5, #8
 8007e28:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007e2c:	0222      	lsls	r2, r4, #8
 8007e2e:	68f9      	ldr	r1, [r7, #12]
 8007e30:	6849      	ldr	r1, [r1, #4]
 8007e32:	0849      	lsrs	r1, r1, #1
 8007e34:	2000      	movs	r0, #0
 8007e36:	4688      	mov	r8, r1
 8007e38:	4681      	mov	r9, r0
 8007e3a:	eb12 0a08 	adds.w	sl, r2, r8
 8007e3e:	eb43 0b09 	adc.w	fp, r3, r9
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	603b      	str	r3, [r7, #0]
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e50:	4650      	mov	r0, sl
 8007e52:	4659      	mov	r1, fp
 8007e54:	f7f8 f9bc 	bl	80001d0 <__aeabi_uldivmod>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e66:	d308      	bcc.n	8007e7a <UART_SetConfig+0x3de>
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e6e:	d204      	bcs.n	8007e7a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	69ba      	ldr	r2, [r7, #24]
 8007e76:	60da      	str	r2, [r3, #12]
 8007e78:	e0b6      	b.n	8007fe8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007e80:	e0b2      	b.n	8007fe8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	69db      	ldr	r3, [r3, #28]
 8007e86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e8a:	d15e      	bne.n	8007f4a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007e8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007e90:	2b08      	cmp	r3, #8
 8007e92:	d828      	bhi.n	8007ee6 <UART_SetConfig+0x44a>
 8007e94:	a201      	add	r2, pc, #4	@ (adr r2, 8007e9c <UART_SetConfig+0x400>)
 8007e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9a:	bf00      	nop
 8007e9c:	08007ec1 	.word	0x08007ec1
 8007ea0:	08007ec9 	.word	0x08007ec9
 8007ea4:	08007ed1 	.word	0x08007ed1
 8007ea8:	08007ee7 	.word	0x08007ee7
 8007eac:	08007ed7 	.word	0x08007ed7
 8007eb0:	08007ee7 	.word	0x08007ee7
 8007eb4:	08007ee7 	.word	0x08007ee7
 8007eb8:	08007ee7 	.word	0x08007ee7
 8007ebc:	08007edf 	.word	0x08007edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ec0:	f7fe f92e 	bl	8006120 <HAL_RCC_GetPCLK1Freq>
 8007ec4:	61f8      	str	r0, [r7, #28]
        break;
 8007ec6:	e014      	b.n	8007ef2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ec8:	f7fe f940 	bl	800614c <HAL_RCC_GetPCLK2Freq>
 8007ecc:	61f8      	str	r0, [r7, #28]
        break;
 8007ece:	e010      	b.n	8007ef2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ed0:	4b4d      	ldr	r3, [pc, #308]	@ (8008008 <UART_SetConfig+0x56c>)
 8007ed2:	61fb      	str	r3, [r7, #28]
        break;
 8007ed4:	e00d      	b.n	8007ef2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ed6:	f7fe f88b 	bl	8005ff0 <HAL_RCC_GetSysClockFreq>
 8007eda:	61f8      	str	r0, [r7, #28]
        break;
 8007edc:	e009      	b.n	8007ef2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ede:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ee2:	61fb      	str	r3, [r7, #28]
        break;
 8007ee4:	e005      	b.n	8007ef2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007ef0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d077      	beq.n	8007fe8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	005a      	lsls	r2, r3, #1
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	085b      	lsrs	r3, r3, #1
 8007f02:	441a      	add	r2, r3
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f0c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	2b0f      	cmp	r3, #15
 8007f12:	d916      	bls.n	8007f42 <UART_SetConfig+0x4a6>
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f1a:	d212      	bcs.n	8007f42 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	f023 030f 	bic.w	r3, r3, #15
 8007f24:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	085b      	lsrs	r3, r3, #1
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	f003 0307 	and.w	r3, r3, #7
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	8afb      	ldrh	r3, [r7, #22]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	8afa      	ldrh	r2, [r7, #22]
 8007f3e:	60da      	str	r2, [r3, #12]
 8007f40:	e052      	b.n	8007fe8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007f48:	e04e      	b.n	8007fe8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f4a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007f4e:	2b08      	cmp	r3, #8
 8007f50:	d827      	bhi.n	8007fa2 <UART_SetConfig+0x506>
 8007f52:	a201      	add	r2, pc, #4	@ (adr r2, 8007f58 <UART_SetConfig+0x4bc>)
 8007f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f58:	08007f7d 	.word	0x08007f7d
 8007f5c:	08007f85 	.word	0x08007f85
 8007f60:	08007f8d 	.word	0x08007f8d
 8007f64:	08007fa3 	.word	0x08007fa3
 8007f68:	08007f93 	.word	0x08007f93
 8007f6c:	08007fa3 	.word	0x08007fa3
 8007f70:	08007fa3 	.word	0x08007fa3
 8007f74:	08007fa3 	.word	0x08007fa3
 8007f78:	08007f9b 	.word	0x08007f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f7c:	f7fe f8d0 	bl	8006120 <HAL_RCC_GetPCLK1Freq>
 8007f80:	61f8      	str	r0, [r7, #28]
        break;
 8007f82:	e014      	b.n	8007fae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f84:	f7fe f8e2 	bl	800614c <HAL_RCC_GetPCLK2Freq>
 8007f88:	61f8      	str	r0, [r7, #28]
        break;
 8007f8a:	e010      	b.n	8007fae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8008008 <UART_SetConfig+0x56c>)
 8007f8e:	61fb      	str	r3, [r7, #28]
        break;
 8007f90:	e00d      	b.n	8007fae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f92:	f7fe f82d 	bl	8005ff0 <HAL_RCC_GetSysClockFreq>
 8007f96:	61f8      	str	r0, [r7, #28]
        break;
 8007f98:	e009      	b.n	8007fae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f9e:	61fb      	str	r3, [r7, #28]
        break;
 8007fa0:	e005      	b.n	8007fae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007fac:	bf00      	nop
    }

    if (pclk != 0U)
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d019      	beq.n	8007fe8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	085a      	lsrs	r2, r3, #1
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	441a      	add	r2, r3
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fc6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	2b0f      	cmp	r3, #15
 8007fcc:	d909      	bls.n	8007fe2 <UART_SetConfig+0x546>
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fd4:	d205      	bcs.n	8007fe2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	60da      	str	r2, [r3, #12]
 8007fe0:	e002      	b.n	8007fe8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007ff4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3728      	adds	r7, #40	@ 0x28
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008002:	bf00      	nop
 8008004:	40008000 	.word	0x40008000
 8008008:	00f42400 	.word	0x00f42400

0800800c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008018:	f003 0308 	and.w	r3, r3, #8
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00a      	beq.n	8008036 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	430a      	orrs	r2, r1
 8008034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800803a:	f003 0301 	and.w	r3, r3, #1
 800803e:	2b00      	cmp	r3, #0
 8008040:	d00a      	beq.n	8008058 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	430a      	orrs	r2, r1
 8008056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800805c:	f003 0302 	and.w	r3, r3, #2
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00a      	beq.n	800807a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	430a      	orrs	r2, r1
 8008078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800807e:	f003 0304 	and.w	r3, r3, #4
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00a      	beq.n	800809c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	430a      	orrs	r2, r1
 800809a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a0:	f003 0310 	and.w	r3, r3, #16
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00a      	beq.n	80080be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	430a      	orrs	r2, r1
 80080bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c2:	f003 0320 	and.w	r3, r3, #32
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00a      	beq.n	80080e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	430a      	orrs	r2, r1
 80080de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d01a      	beq.n	8008122 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	430a      	orrs	r2, r1
 8008100:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008106:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800810a:	d10a      	bne.n	8008122 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	430a      	orrs	r2, r1
 8008120:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00a      	beq.n	8008144 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	430a      	orrs	r2, r1
 8008142:	605a      	str	r2, [r3, #4]
  }
}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b098      	sub	sp, #96	@ 0x60
 8008154:	af02      	add	r7, sp, #8
 8008156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008160:	f7fc f836 	bl	80041d0 <HAL_GetTick>
 8008164:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0308 	and.w	r3, r3, #8
 8008170:	2b08      	cmp	r3, #8
 8008172:	d12e      	bne.n	80081d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008174:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800817c:	2200      	movs	r2, #0
 800817e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f88c 	bl	80082a0 <UART_WaitOnFlagUntilTimeout>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d021      	beq.n	80081d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008196:	e853 3f00 	ldrex	r3, [r3]
 800819a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800819c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800819e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	461a      	mov	r2, r3
 80081aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80081ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081b4:	e841 2300 	strex	r3, r2, [r1]
 80081b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80081ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d1e6      	bne.n	800818e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2220      	movs	r2, #32
 80081c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e062      	b.n	8008298 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0304 	and.w	r3, r3, #4
 80081dc:	2b04      	cmp	r3, #4
 80081de:	d149      	bne.n	8008274 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081e8:	2200      	movs	r2, #0
 80081ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f856 	bl	80082a0 <UART_WaitOnFlagUntilTimeout>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d03c      	beq.n	8008274 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008202:	e853 3f00 	ldrex	r3, [r3]
 8008206:	623b      	str	r3, [r7, #32]
   return(result);
 8008208:	6a3b      	ldr	r3, [r7, #32]
 800820a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800820e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	461a      	mov	r2, r3
 8008216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008218:	633b      	str	r3, [r7, #48]	@ 0x30
 800821a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800821e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008220:	e841 2300 	strex	r3, r2, [r1]
 8008224:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1e6      	bne.n	80081fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	3308      	adds	r3, #8
 8008232:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	e853 3f00 	ldrex	r3, [r3]
 800823a:	60fb      	str	r3, [r7, #12]
   return(result);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f023 0301 	bic.w	r3, r3, #1
 8008242:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	3308      	adds	r3, #8
 800824a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800824c:	61fa      	str	r2, [r7, #28]
 800824e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008250:	69b9      	ldr	r1, [r7, #24]
 8008252:	69fa      	ldr	r2, [r7, #28]
 8008254:	e841 2300 	strex	r3, r2, [r1]
 8008258:	617b      	str	r3, [r7, #20]
   return(result);
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1e5      	bne.n	800822c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2220      	movs	r2, #32
 8008264:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008270:	2303      	movs	r3, #3
 8008272:	e011      	b.n	8008298 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2220      	movs	r2, #32
 8008278:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2220      	movs	r2, #32
 800827e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3758      	adds	r7, #88	@ 0x58
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	603b      	str	r3, [r7, #0]
 80082ac:	4613      	mov	r3, r2
 80082ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082b0:	e049      	b.n	8008346 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b8:	d045      	beq.n	8008346 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ba:	f7fb ff89 	bl	80041d0 <HAL_GetTick>
 80082be:	4602      	mov	r2, r0
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	69ba      	ldr	r2, [r7, #24]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d302      	bcc.n	80082d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d101      	bne.n	80082d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80082d0:	2303      	movs	r3, #3
 80082d2:	e048      	b.n	8008366 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 0304 	and.w	r3, r3, #4
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d031      	beq.n	8008346 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	69db      	ldr	r3, [r3, #28]
 80082e8:	f003 0308 	and.w	r3, r3, #8
 80082ec:	2b08      	cmp	r3, #8
 80082ee:	d110      	bne.n	8008312 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2208      	movs	r2, #8
 80082f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f000 f85e 	bl	80083ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2208      	movs	r2, #8
 8008302:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e029      	b.n	8008366 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	69db      	ldr	r3, [r3, #28]
 8008318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800831c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008320:	d111      	bne.n	8008346 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800832a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f000 f844 	bl	80083ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2220      	movs	r2, #32
 8008336:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008342:	2303      	movs	r3, #3
 8008344:	e00f      	b.n	8008366 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	69da      	ldr	r2, [r3, #28]
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	4013      	ands	r3, r2
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	429a      	cmp	r2, r3
 8008354:	bf0c      	ite	eq
 8008356:	2301      	moveq	r3, #1
 8008358:	2300      	movne	r3, #0
 800835a:	b2db      	uxtb	r3, r3
 800835c:	461a      	mov	r2, r3
 800835e:	79fb      	ldrb	r3, [r7, #7]
 8008360:	429a      	cmp	r2, r3
 8008362:	d0a6      	beq.n	80082b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800836e:	b480      	push	{r7}
 8008370:	b089      	sub	sp, #36	@ 0x24
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	e853 3f00 	ldrex	r3, [r3]
 8008382:	60bb      	str	r3, [r7, #8]
   return(result);
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800838a:	61fb      	str	r3, [r7, #28]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	461a      	mov	r2, r3
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	61bb      	str	r3, [r7, #24]
 8008396:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008398:	6979      	ldr	r1, [r7, #20]
 800839a:	69ba      	ldr	r2, [r7, #24]
 800839c:	e841 2300 	strex	r3, r2, [r1]
 80083a0:	613b      	str	r3, [r7, #16]
   return(result);
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1e6      	bne.n	8008376 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2220      	movs	r2, #32
 80083ac:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80083ae:	bf00      	nop
 80083b0:	3724      	adds	r7, #36	@ 0x24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b095      	sub	sp, #84	@ 0x54
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ca:	e853 3f00 	ldrex	r3, [r3]
 80083ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80083d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	461a      	mov	r2, r3
 80083de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80083e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80083e8:	e841 2300 	strex	r3, r2, [r1]
 80083ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1e6      	bne.n	80083c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	3308      	adds	r3, #8
 80083fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fc:	6a3b      	ldr	r3, [r7, #32]
 80083fe:	e853 3f00 	ldrex	r3, [r3]
 8008402:	61fb      	str	r3, [r7, #28]
   return(result);
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	f023 0301 	bic.w	r3, r3, #1
 800840a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	3308      	adds	r3, #8
 8008412:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008414:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008416:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008418:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800841a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800841c:	e841 2300 	strex	r3, r2, [r1]
 8008420:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008424:	2b00      	cmp	r3, #0
 8008426:	d1e5      	bne.n	80083f4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800842c:	2b01      	cmp	r3, #1
 800842e:	d118      	bne.n	8008462 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	e853 3f00 	ldrex	r3, [r3]
 800843c:	60bb      	str	r3, [r7, #8]
   return(result);
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	f023 0310 	bic.w	r3, r3, #16
 8008444:	647b      	str	r3, [r7, #68]	@ 0x44
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	461a      	mov	r2, r3
 800844c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800844e:	61bb      	str	r3, [r7, #24]
 8008450:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008452:	6979      	ldr	r1, [r7, #20]
 8008454:	69ba      	ldr	r2, [r7, #24]
 8008456:	e841 2300 	strex	r3, r2, [r1]
 800845a:	613b      	str	r3, [r7, #16]
   return(result);
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1e6      	bne.n	8008430 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2220      	movs	r2, #32
 8008466:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008476:	bf00      	nop
 8008478:	3754      	adds	r7, #84	@ 0x54
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b090      	sub	sp, #64	@ 0x40
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800848e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 0320 	and.w	r3, r3, #32
 800849a:	2b00      	cmp	r3, #0
 800849c:	d137      	bne.n	800850e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800849e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084a0:	2200      	movs	r2, #0
 80084a2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	3308      	adds	r3, #8
 80084ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b0:	e853 3f00 	ldrex	r3, [r3]
 80084b4:	623b      	str	r3, [r7, #32]
   return(result);
 80084b6:	6a3b      	ldr	r3, [r7, #32]
 80084b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80084be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	3308      	adds	r3, #8
 80084c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80084c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80084c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084ce:	e841 2300 	strex	r3, r2, [r1]
 80084d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1e5      	bne.n	80084a6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	e853 3f00 	ldrex	r3, [r3]
 80084e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80084f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	461a      	mov	r2, r3
 80084f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084f8:	61fb      	str	r3, [r7, #28]
 80084fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fc:	69b9      	ldr	r1, [r7, #24]
 80084fe:	69fa      	ldr	r2, [r7, #28]
 8008500:	e841 2300 	strex	r3, r2, [r1]
 8008504:	617b      	str	r3, [r7, #20]
   return(result);
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1e6      	bne.n	80084da <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800850c:	e002      	b.n	8008514 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800850e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008510:	f7ff fa9a 	bl	8007a48 <HAL_UART_TxCpltCallback>
}
 8008514:	bf00      	nop
 8008516:	3740      	adds	r7, #64	@ 0x40
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008528:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f7ff fa96 	bl	8007a5c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008530:	bf00      	nop
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008544:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800854a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008552:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800855e:	2b80      	cmp	r3, #128	@ 0x80
 8008560:	d109      	bne.n	8008576 <UART_DMAError+0x3e>
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	2b21      	cmp	r3, #33	@ 0x21
 8008566:	d106      	bne.n	8008576 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	2200      	movs	r2, #0
 800856c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8008570:	6978      	ldr	r0, [r7, #20]
 8008572:	f7ff fefc 	bl	800836e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008580:	2b40      	cmp	r3, #64	@ 0x40
 8008582:	d109      	bne.n	8008598 <UART_DMAError+0x60>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2b22      	cmp	r3, #34	@ 0x22
 8008588:	d106      	bne.n	8008598 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	2200      	movs	r2, #0
 800858e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8008592:	6978      	ldr	r0, [r7, #20]
 8008594:	f7ff ff11 	bl	80083ba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800859e:	f043 0210 	orr.w	r2, r3, #16
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085a8:	6978      	ldr	r0, [r7, #20]
 80085aa:	f7ff fa61 	bl	8007a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085ae:	bf00      	nop
 80085b0:	3718      	adds	r7, #24
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b084      	sub	sp, #16
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f7ff fa4b 	bl	8007a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085da:	bf00      	nop
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b088      	sub	sp, #32
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	e853 3f00 	ldrex	r3, [r3]
 80085f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085fe:	61fb      	str	r3, [r7, #28]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	461a      	mov	r2, r3
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	61bb      	str	r3, [r7, #24]
 800860a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860c:	6979      	ldr	r1, [r7, #20]
 800860e:	69ba      	ldr	r2, [r7, #24]
 8008610:	e841 2300 	strex	r3, r2, [r1]
 8008614:	613b      	str	r3, [r7, #16]
   return(result);
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e6      	bne.n	80085ea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2220      	movs	r2, #32
 8008620:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f7ff fa0d 	bl	8007a48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800862e:	bf00      	nop
 8008630:	3720      	adds	r7, #32
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008636:	b480      	push	{r7}
 8008638:	b083      	sub	sp, #12
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800863e:	bf00      	nop
 8008640:	370c      	adds	r7, #12
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr

0800864a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800864a:	b084      	sub	sp, #16
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	f107 001c 	add.w	r0, r7, #28
 8008658:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fa65 	bl	8008b38 <USB_CoreReset>
 800866e:	4603      	mov	r3, r0
 8008670:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008674:	2b00      	cmp	r3, #0
 8008676:	d106      	bne.n	8008686 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800867c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	639a      	str	r2, [r3, #56]	@ 0x38
 8008684:	e005      	b.n	8008692 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800868a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8008692:	7bfb      	ldrb	r3, [r7, #15]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800869e:	b004      	add	sp, #16
 80086a0:	4770      	bx	lr

080086a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086a2:	b480      	push	{r7}
 80086a4:	b083      	sub	sp, #12
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	f023 0201 	bic.w	r2, r3, #1
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	460b      	mov	r3, r1
 80086ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80086d0:	2300      	movs	r3, #0
 80086d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80086e0:	78fb      	ldrb	r3, [r7, #3]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d115      	bne.n	8008712 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80086f2:	2001      	movs	r0, #1
 80086f4:	f7fb fd78 	bl	80041e8 <HAL_Delay>
      ms++;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	3301      	adds	r3, #1
 80086fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fa0c 	bl	8008b1c <USB_GetMode>
 8008704:	4603      	mov	r3, r0
 8008706:	2b01      	cmp	r3, #1
 8008708:	d01e      	beq.n	8008748 <USB_SetCurrentMode+0x84>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2b31      	cmp	r3, #49	@ 0x31
 800870e:	d9f0      	bls.n	80086f2 <USB_SetCurrentMode+0x2e>
 8008710:	e01a      	b.n	8008748 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008712:	78fb      	ldrb	r3, [r7, #3]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d115      	bne.n	8008744 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008724:	2001      	movs	r0, #1
 8008726:	f7fb fd5f 	bl	80041e8 <HAL_Delay>
      ms++;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	3301      	adds	r3, #1
 800872e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f9f3 	bl	8008b1c <USB_GetMode>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d005      	beq.n	8008748 <USB_SetCurrentMode+0x84>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2b31      	cmp	r3, #49	@ 0x31
 8008740:	d9f0      	bls.n	8008724 <USB_SetCurrentMode+0x60>
 8008742:	e001      	b.n	8008748 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	e005      	b.n	8008754 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2b32      	cmp	r3, #50	@ 0x32
 800874c:	d101      	bne.n	8008752 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e000      	b.n	8008754 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800875c:	b084      	sub	sp, #16
 800875e:	b580      	push	{r7, lr}
 8008760:	b086      	sub	sp, #24
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800876a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008776:	2300      	movs	r3, #0
 8008778:	613b      	str	r3, [r7, #16]
 800877a:	e009      	b.n	8008790 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	3340      	adds	r3, #64	@ 0x40
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4413      	add	r3, r2
 8008786:	2200      	movs	r2, #0
 8008788:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	3301      	adds	r3, #1
 800878e:	613b      	str	r3, [r7, #16]
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	2b0e      	cmp	r3, #14
 8008794:	d9f2      	bls.n	800877c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008796:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008798:	2b00      	cmp	r3, #0
 800879a:	d11c      	bne.n	80087d6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087aa:	f043 0302 	orr.w	r3, r3, #2
 80087ae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	601a      	str	r2, [r3, #0]
 80087d4:	e005      	b.n	80087e2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087da:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80087e8:	461a      	mov	r2, r3
 80087ea:	2300      	movs	r3, #0
 80087ec:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80087ee:	2103      	movs	r1, #3
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 f959 	bl	8008aa8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80087f6:	2110      	movs	r1, #16
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f8f1 	bl	80089e0 <USB_FlushTxFifo>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f91d 	bl	8008a48 <USB_FlushRxFifo>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d001      	beq.n	8008818 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800881e:	461a      	mov	r2, r3
 8008820:	2300      	movs	r3, #0
 8008822:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800882a:	461a      	mov	r2, r3
 800882c:	2300      	movs	r3, #0
 800882e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008836:	461a      	mov	r2, r3
 8008838:	2300      	movs	r3, #0
 800883a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800883c:	2300      	movs	r3, #0
 800883e:	613b      	str	r3, [r7, #16]
 8008840:	e043      	b.n	80088ca <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	015a      	lsls	r2, r3, #5
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	4413      	add	r3, r2
 800884a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008854:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008858:	d118      	bne.n	800888c <USB_DevInit+0x130>
    {
      if (i == 0U)
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10a      	bne.n	8008876 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	015a      	lsls	r2, r3, #5
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	4413      	add	r3, r2
 8008868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800886c:	461a      	mov	r2, r3
 800886e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008872:	6013      	str	r3, [r2, #0]
 8008874:	e013      	b.n	800889e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	015a      	lsls	r2, r3, #5
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	4413      	add	r3, r2
 800887e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008882:	461a      	mov	r2, r3
 8008884:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008888:	6013      	str	r3, [r2, #0]
 800888a:	e008      	b.n	800889e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	015a      	lsls	r2, r3, #5
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4413      	add	r3, r2
 8008894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008898:	461a      	mov	r2, r3
 800889a:	2300      	movs	r3, #0
 800889c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	015a      	lsls	r2, r3, #5
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	4413      	add	r3, r2
 80088a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088aa:	461a      	mov	r2, r3
 80088ac:	2300      	movs	r3, #0
 80088ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	015a      	lsls	r2, r3, #5
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	4413      	add	r3, r2
 80088b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088bc:	461a      	mov	r2, r3
 80088be:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80088c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	3301      	adds	r3, #1
 80088c8:	613b      	str	r3, [r7, #16]
 80088ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088cc:	693a      	ldr	r2, [r7, #16]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d3b7      	bcc.n	8008842 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088d2:	2300      	movs	r3, #0
 80088d4:	613b      	str	r3, [r7, #16]
 80088d6:	e043      	b.n	8008960 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	015a      	lsls	r2, r3, #5
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4413      	add	r3, r2
 80088e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088ee:	d118      	bne.n	8008922 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d10a      	bne.n	800890c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	015a      	lsls	r2, r3, #5
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	4413      	add	r3, r2
 80088fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008902:	461a      	mov	r2, r3
 8008904:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008908:	6013      	str	r3, [r2, #0]
 800890a:	e013      	b.n	8008934 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	015a      	lsls	r2, r3, #5
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	4413      	add	r3, r2
 8008914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008918:	461a      	mov	r2, r3
 800891a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800891e:	6013      	str	r3, [r2, #0]
 8008920:	e008      	b.n	8008934 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	015a      	lsls	r2, r3, #5
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	4413      	add	r3, r2
 800892a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800892e:	461a      	mov	r2, r3
 8008930:	2300      	movs	r3, #0
 8008932:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	015a      	lsls	r2, r3, #5
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	4413      	add	r3, r2
 800893c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008940:	461a      	mov	r2, r3
 8008942:	2300      	movs	r3, #0
 8008944:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	015a      	lsls	r2, r3, #5
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	4413      	add	r3, r2
 800894e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008952:	461a      	mov	r2, r3
 8008954:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008958:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	3301      	adds	r3, #1
 800895e:	613b      	str	r3, [r7, #16]
 8008960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008962:	693a      	ldr	r2, [r7, #16]
 8008964:	429a      	cmp	r2, r3
 8008966:	d3b7      	bcc.n	80088d8 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008976:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800897a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008988:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	f043 0210 	orr.w	r2, r3, #16
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	699a      	ldr	r2, [r3, #24]
 800899a:	4b10      	ldr	r3, [pc, #64]	@ (80089dc <USB_DevInit+0x280>)
 800899c:	4313      	orrs	r3, r2
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80089a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d005      	beq.n	80089b4 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	699b      	ldr	r3, [r3, #24]
 80089ac:	f043 0208 	orr.w	r2, r3, #8
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80089b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d107      	bne.n	80089ca <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	699b      	ldr	r3, [r3, #24]
 80089be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80089c2:	f043 0304 	orr.w	r3, r3, #4
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80089ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3718      	adds	r7, #24
 80089d0:	46bd      	mov	sp, r7
 80089d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089d6:	b004      	add	sp, #16
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	803c3800 	.word	0x803c3800

080089e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80089ea:	2300      	movs	r3, #0
 80089ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	3301      	adds	r3, #1
 80089f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	4a13      	ldr	r2, [pc, #76]	@ (8008a44 <USB_FlushTxFifo+0x64>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d901      	bls.n	8008a00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e01b      	b.n	8008a38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	691b      	ldr	r3, [r3, #16]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	daf2      	bge.n	80089ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	019b      	lsls	r3, r3, #6
 8008a10:	f043 0220 	orr.w	r2, r3, #32
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	4a08      	ldr	r2, [pc, #32]	@ (8008a44 <USB_FlushTxFifo+0x64>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d901      	bls.n	8008a2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008a26:	2303      	movs	r3, #3
 8008a28:	e006      	b.n	8008a38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	f003 0320 	and.w	r3, r3, #32
 8008a32:	2b20      	cmp	r3, #32
 8008a34:	d0f0      	beq.n	8008a18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr
 8008a44:	00030d40 	.word	0x00030d40

08008a48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a50:	2300      	movs	r3, #0
 8008a52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	3301      	adds	r3, #1
 8008a58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	4a11      	ldr	r2, [pc, #68]	@ (8008aa4 <USB_FlushRxFifo+0x5c>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d901      	bls.n	8008a66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e018      	b.n	8008a98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	daf2      	bge.n	8008a54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2210      	movs	r2, #16
 8008a76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	4a08      	ldr	r2, [pc, #32]	@ (8008aa4 <USB_FlushRxFifo+0x5c>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d901      	bls.n	8008a8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008a86:	2303      	movs	r3, #3
 8008a88:	e006      	b.n	8008a98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	691b      	ldr	r3, [r3, #16]
 8008a8e:	f003 0310 	and.w	r3, r3, #16
 8008a92:	2b10      	cmp	r3, #16
 8008a94:	d0f0      	beq.n	8008a78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3714      	adds	r7, #20
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr
 8008aa4:	00030d40 	.word	0x00030d40

08008aa8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	78fb      	ldrb	r3, [r7, #3]
 8008ac2:	68f9      	ldr	r1, [r7, #12]
 8008ac4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3714      	adds	r7, #20
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr

08008ada <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008ada:	b480      	push	{r7}
 8008adc:	b085      	sub	sp, #20
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008af4:	f023 0303 	bic.w	r3, r3, #3
 8008af8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b08:	f043 0302 	orr.w	r3, r3, #2
 8008b0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	f003 0301 	and.w	r3, r3, #1
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b40:	2300      	movs	r3, #0
 8008b42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	3301      	adds	r3, #1
 8008b48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	4a13      	ldr	r2, [pc, #76]	@ (8008b9c <USB_CoreReset+0x64>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d901      	bls.n	8008b56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008b52:	2303      	movs	r3, #3
 8008b54:	e01b      	b.n	8008b8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	daf2      	bge.n	8008b44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	f043 0201 	orr.w	r2, r3, #1
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	3301      	adds	r3, #1
 8008b72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	4a09      	ldr	r2, [pc, #36]	@ (8008b9c <USB_CoreReset+0x64>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d901      	bls.n	8008b80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	e006      	b.n	8008b8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	f003 0301 	and.w	r3, r3, #1
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d0f0      	beq.n	8008b6e <USB_CoreReset+0x36>

  return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3714      	adds	r7, #20
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	00030d40 	.word	0x00030d40

08008ba0 <__NVIC_SetPriority>:
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	6039      	str	r1, [r7, #0]
 8008baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	db0a      	blt.n	8008bca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	b2da      	uxtb	r2, r3
 8008bb8:	490c      	ldr	r1, [pc, #48]	@ (8008bec <__NVIC_SetPriority+0x4c>)
 8008bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bbe:	0112      	lsls	r2, r2, #4
 8008bc0:	b2d2      	uxtb	r2, r2
 8008bc2:	440b      	add	r3, r1
 8008bc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008bc8:	e00a      	b.n	8008be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	b2da      	uxtb	r2, r3
 8008bce:	4908      	ldr	r1, [pc, #32]	@ (8008bf0 <__NVIC_SetPriority+0x50>)
 8008bd0:	79fb      	ldrb	r3, [r7, #7]
 8008bd2:	f003 030f 	and.w	r3, r3, #15
 8008bd6:	3b04      	subs	r3, #4
 8008bd8:	0112      	lsls	r2, r2, #4
 8008bda:	b2d2      	uxtb	r2, r2
 8008bdc:	440b      	add	r3, r1
 8008bde:	761a      	strb	r2, [r3, #24]
}
 8008be0:	bf00      	nop
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr
 8008bec:	e000e100 	.word	0xe000e100
 8008bf0:	e000ed00 	.word	0xe000ed00

08008bf4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008bf8:	4b05      	ldr	r3, [pc, #20]	@ (8008c10 <SysTick_Handler+0x1c>)
 8008bfa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008bfc:	f002 f89e 	bl	800ad3c <xTaskGetSchedulerState>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d001      	beq.n	8008c0a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008c06:	f002 ff4f 	bl	800baa8 <xPortSysTickHandler>
  }
}
 8008c0a:	bf00      	nop
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	e000e010 	.word	0xe000e010

08008c14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008c14:	b580      	push	{r7, lr}
 8008c16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008c18:	2100      	movs	r1, #0
 8008c1a:	f06f 0004 	mvn.w	r0, #4
 8008c1e:	f7ff ffbf 	bl	8008ba0 <__NVIC_SetPriority>
#endif
}
 8008c22:	bf00      	nop
 8008c24:	bd80      	pop	{r7, pc}
	...

08008c28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c2e:	f3ef 8305 	mrs	r3, IPSR
 8008c32:	603b      	str	r3, [r7, #0]
  return(result);
 8008c34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d003      	beq.n	8008c42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008c3a:	f06f 0305 	mvn.w	r3, #5
 8008c3e:	607b      	str	r3, [r7, #4]
 8008c40:	e00c      	b.n	8008c5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008c42:	4b0a      	ldr	r3, [pc, #40]	@ (8008c6c <osKernelInitialize+0x44>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d105      	bne.n	8008c56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008c4a:	4b08      	ldr	r3, [pc, #32]	@ (8008c6c <osKernelInitialize+0x44>)
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	607b      	str	r3, [r7, #4]
 8008c54:	e002      	b.n	8008c5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008c56:	f04f 33ff 	mov.w	r3, #4294967295
 8008c5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008c5c:	687b      	ldr	r3, [r7, #4]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	370c      	adds	r7, #12
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	20002fcc 	.word	0x20002fcc

08008c70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c76:	f3ef 8305 	mrs	r3, IPSR
 8008c7a:	603b      	str	r3, [r7, #0]
  return(result);
 8008c7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d003      	beq.n	8008c8a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008c82:	f06f 0305 	mvn.w	r3, #5
 8008c86:	607b      	str	r3, [r7, #4]
 8008c88:	e010      	b.n	8008cac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8008cb8 <osKernelStart+0x48>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d109      	bne.n	8008ca6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008c92:	f7ff ffbf 	bl	8008c14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008c96:	4b08      	ldr	r3, [pc, #32]	@ (8008cb8 <osKernelStart+0x48>)
 8008c98:	2202      	movs	r2, #2
 8008c9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008c9c:	f001 fb76 	bl	800a38c <vTaskStartScheduler>
      stat = osOK;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	607b      	str	r3, [r7, #4]
 8008ca4:	e002      	b.n	8008cac <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8008caa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008cac:	687b      	ldr	r3, [r7, #4]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	20002fcc 	.word	0x20002fcc

08008cbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b08e      	sub	sp, #56	@ 0x38
 8008cc0:	af04      	add	r7, sp, #16
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ccc:	f3ef 8305 	mrs	r3, IPSR
 8008cd0:	617b      	str	r3, [r7, #20]
  return(result);
 8008cd2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d17e      	bne.n	8008dd6 <osThreadNew+0x11a>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d07b      	beq.n	8008dd6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008cde:	2380      	movs	r3, #128	@ 0x80
 8008ce0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008ce2:	2318      	movs	r3, #24
 8008ce4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008cea:	f04f 33ff 	mov.w	r3, #4294967295
 8008cee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d045      	beq.n	8008d82 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d002      	beq.n	8008d04 <osThreadNew+0x48>
        name = attr->name;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	699b      	ldr	r3, [r3, #24]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d002      	beq.n	8008d12 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d008      	beq.n	8008d2a <osThreadNew+0x6e>
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	2b38      	cmp	r3, #56	@ 0x38
 8008d1c:	d805      	bhi.n	8008d2a <osThreadNew+0x6e>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	f003 0301 	and.w	r3, r3, #1
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d001      	beq.n	8008d2e <osThreadNew+0x72>
        return (NULL);
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	e054      	b.n	8008dd8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	695b      	ldr	r3, [r3, #20]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d003      	beq.n	8008d3e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	695b      	ldr	r3, [r3, #20]
 8008d3a:	089b      	lsrs	r3, r3, #2
 8008d3c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00e      	beq.n	8008d64 <osThreadNew+0xa8>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	2ba7      	cmp	r3, #167	@ 0xa7
 8008d4c:	d90a      	bls.n	8008d64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d006      	beq.n	8008d64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d002      	beq.n	8008d64 <osThreadNew+0xa8>
        mem = 1;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	61bb      	str	r3, [r7, #24]
 8008d62:	e010      	b.n	8008d86 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10c      	bne.n	8008d86 <osThreadNew+0xca>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d108      	bne.n	8008d86 <osThreadNew+0xca>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d104      	bne.n	8008d86 <osThreadNew+0xca>
          mem = 0;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	61bb      	str	r3, [r7, #24]
 8008d80:	e001      	b.n	8008d86 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008d82:	2300      	movs	r3, #0
 8008d84:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d110      	bne.n	8008dae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d94:	9202      	str	r2, [sp, #8]
 8008d96:	9301      	str	r3, [sp, #4]
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	6a3a      	ldr	r2, [r7, #32]
 8008da0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f001 f85c 	bl	8009e60 <xTaskCreateStatic>
 8008da8:	4603      	mov	r3, r0
 8008daa:	613b      	str	r3, [r7, #16]
 8008dac:	e013      	b.n	8008dd6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d110      	bne.n	8008dd6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008db4:	6a3b      	ldr	r3, [r7, #32]
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	f107 0310 	add.w	r3, r7, #16
 8008dbc:	9301      	str	r3, [sp, #4]
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f001 f8aa 	bl	8009f20 <xTaskCreate>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d001      	beq.n	8008dd6 <osThreadNew+0x11a>
            hTask = NULL;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008dd6:	693b      	ldr	r3, [r7, #16]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3728      	adds	r7, #40	@ 0x28
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008de8:	f3ef 8305 	mrs	r3, IPSR
 8008dec:	60bb      	str	r3, [r7, #8]
  return(result);
 8008dee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d003      	beq.n	8008dfc <osDelay+0x1c>
    stat = osErrorISR;
 8008df4:	f06f 0305 	mvn.w	r3, #5
 8008df8:	60fb      	str	r3, [r7, #12]
 8008dfa:	e007      	b.n	8008e0c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d002      	beq.n	8008e0c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f001 fa86 	bl	800a318 <vTaskDelay>
    }
  }

  return (stat);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b086      	sub	sp, #24
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e1e:	f3ef 8305 	mrs	r3, IPSR
 8008e22:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e24:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d003      	beq.n	8008e32 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8008e2a:	f06f 0305 	mvn.w	r3, #5
 8008e2e:	617b      	str	r3, [r7, #20]
 8008e30:	e019      	b.n	8008e66 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8008e32:	2300      	movs	r3, #0
 8008e34:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8008e36:	f001 fbd5 	bl	800a5e4 <xTaskGetTickCount>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d009      	beq.n	8008e60 <osDelayUntil+0x4a>
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	db06      	blt.n	8008e60 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8008e52:	f107 0308 	add.w	r3, r7, #8
 8008e56:	6939      	ldr	r1, [r7, #16]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f001 f9d9 	bl	800a210 <vTaskDelayUntil>
 8008e5e:	e002      	b.n	8008e66 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8008e60:	f06f 0303 	mvn.w	r3, #3
 8008e64:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008e66:	697b      	ldr	r3, [r7, #20]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3718      	adds	r7, #24
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008e70:	b480      	push	{r7}
 8008e72:	b085      	sub	sp, #20
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	4a07      	ldr	r2, [pc, #28]	@ (8008e9c <vApplicationGetIdleTaskMemory+0x2c>)
 8008e80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	4a06      	ldr	r2, [pc, #24]	@ (8008ea0 <vApplicationGetIdleTaskMemory+0x30>)
 8008e86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2280      	movs	r2, #128	@ 0x80
 8008e8c:	601a      	str	r2, [r3, #0]
}
 8008e8e:	bf00      	nop
 8008e90:	3714      	adds	r7, #20
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	20002fd0 	.word	0x20002fd0
 8008ea0:	20003078 	.word	0x20003078

08008ea4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	4a07      	ldr	r2, [pc, #28]	@ (8008ed0 <vApplicationGetTimerTaskMemory+0x2c>)
 8008eb4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	4a06      	ldr	r2, [pc, #24]	@ (8008ed4 <vApplicationGetTimerTaskMemory+0x30>)
 8008eba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ec2:	601a      	str	r2, [r3, #0]
}
 8008ec4:	bf00      	nop
 8008ec6:	3714      	adds	r7, #20
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr
 8008ed0:	20003278 	.word	0x20003278
 8008ed4:	20003320 	.word	0x20003320

08008ed8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f103 0208 	add.w	r2, r3, #8
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f04f 32ff 	mov.w	r2, #4294967295
 8008ef0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f103 0208 	add.w	r2, r3, #8
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f103 0208 	add.w	r2, r3, #8
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008f0c:	bf00      	nop
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f26:	bf00      	nop
 8008f28:	370c      	adds	r7, #12
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr

08008f32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f32:	b480      	push	{r7}
 8008f34:	b085      	sub	sp, #20
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
 8008f3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	689a      	ldr	r2, [r3, #8]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	683a      	ldr	r2, [r7, #0]
 8008f56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	1c5a      	adds	r2, r3, #1
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	601a      	str	r2, [r3, #0]
}
 8008f6e:	bf00      	nop
 8008f70:	3714      	adds	r7, #20
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f7a:	b480      	push	{r7}
 8008f7c:	b085      	sub	sp, #20
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f90:	d103      	bne.n	8008f9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	60fb      	str	r3, [r7, #12]
 8008f98:	e00c      	b.n	8008fb4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	3308      	adds	r3, #8
 8008f9e:	60fb      	str	r3, [r7, #12]
 8008fa0:	e002      	b.n	8008fa8 <vListInsert+0x2e>
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	60fb      	str	r3, [r7, #12]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d2f6      	bcs.n	8008fa2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	685a      	ldr	r2, [r3, #4]
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	683a      	ldr	r2, [r7, #0]
 8008fc2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	683a      	ldr	r2, [r7, #0]
 8008fce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	1c5a      	adds	r2, r3, #1
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	601a      	str	r2, [r3, #0]
}
 8008fe0:	bf00      	nop
 8008fe2:	3714      	adds	r7, #20
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	6892      	ldr	r2, [r2, #8]
 8009002:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	6852      	ldr	r2, [r2, #4]
 800900c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	429a      	cmp	r2, r3
 8009016:	d103      	bne.n	8009020 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	689a      	ldr	r2, [r3, #8]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	1e5a      	subs	r2, r3, #1
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10b      	bne.n	800906c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009066:	bf00      	nop
 8009068:	bf00      	nop
 800906a:	e7fd      	b.n	8009068 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800906c:	f002 fc86 	bl	800b97c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009078:	68f9      	ldr	r1, [r7, #12]
 800907a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800907c:	fb01 f303 	mul.w	r3, r1, r3
 8009080:	441a      	add	r2, r3
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800909c:	3b01      	subs	r3, #1
 800909e:	68f9      	ldr	r1, [r7, #12]
 80090a0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80090a2:	fb01 f303 	mul.w	r3, r1, r3
 80090a6:	441a      	add	r2, r3
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	22ff      	movs	r2, #255	@ 0xff
 80090b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	22ff      	movs	r2, #255	@ 0xff
 80090b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d114      	bne.n	80090ec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d01a      	beq.n	8009100 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	3310      	adds	r3, #16
 80090ce:	4618      	mov	r0, r3
 80090d0:	f001 fc30 	bl	800a934 <xTaskRemoveFromEventList>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d012      	beq.n	8009100 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80090da:	4b0d      	ldr	r3, [pc, #52]	@ (8009110 <xQueueGenericReset+0xd0>)
 80090dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090e0:	601a      	str	r2, [r3, #0]
 80090e2:	f3bf 8f4f 	dsb	sy
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	e009      	b.n	8009100 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	3310      	adds	r3, #16
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7ff fef1 	bl	8008ed8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	3324      	adds	r3, #36	@ 0x24
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7ff feec 	bl	8008ed8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009100:	f002 fc6e 	bl	800b9e0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009104:	2301      	movs	r3, #1
}
 8009106:	4618      	mov	r0, r3
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	e000ed04 	.word	0xe000ed04

08009114 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009114:	b580      	push	{r7, lr}
 8009116:	b08e      	sub	sp, #56	@ 0x38
 8009118:	af02      	add	r7, sp, #8
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
 8009120:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d10b      	bne.n	8009140 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800913a:	bf00      	nop
 800913c:	bf00      	nop
 800913e:	e7fd      	b.n	800913c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d10b      	bne.n	800915e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800914a:	f383 8811 	msr	BASEPRI, r3
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f3bf 8f4f 	dsb	sy
 8009156:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009158:	bf00      	nop
 800915a:	bf00      	nop
 800915c:	e7fd      	b.n	800915a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d002      	beq.n	800916a <xQueueGenericCreateStatic+0x56>
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d001      	beq.n	800916e <xQueueGenericCreateStatic+0x5a>
 800916a:	2301      	movs	r3, #1
 800916c:	e000      	b.n	8009170 <xQueueGenericCreateStatic+0x5c>
 800916e:	2300      	movs	r3, #0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10b      	bne.n	800918c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009178:	f383 8811 	msr	BASEPRI, r3
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	623b      	str	r3, [r7, #32]
}
 8009186:	bf00      	nop
 8009188:	bf00      	nop
 800918a:	e7fd      	b.n	8009188 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d102      	bne.n	8009198 <xQueueGenericCreateStatic+0x84>
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d101      	bne.n	800919c <xQueueGenericCreateStatic+0x88>
 8009198:	2301      	movs	r3, #1
 800919a:	e000      	b.n	800919e <xQueueGenericCreateStatic+0x8a>
 800919c:	2300      	movs	r3, #0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d10b      	bne.n	80091ba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80091a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a6:	f383 8811 	msr	BASEPRI, r3
 80091aa:	f3bf 8f6f 	isb	sy
 80091ae:	f3bf 8f4f 	dsb	sy
 80091b2:	61fb      	str	r3, [r7, #28]
}
 80091b4:	bf00      	nop
 80091b6:	bf00      	nop
 80091b8:	e7fd      	b.n	80091b6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80091ba:	2350      	movs	r3, #80	@ 0x50
 80091bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	2b50      	cmp	r3, #80	@ 0x50
 80091c2:	d00b      	beq.n	80091dc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80091c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c8:	f383 8811 	msr	BASEPRI, r3
 80091cc:	f3bf 8f6f 	isb	sy
 80091d0:	f3bf 8f4f 	dsb	sy
 80091d4:	61bb      	str	r3, [r7, #24]
}
 80091d6:	bf00      	nop
 80091d8:	bf00      	nop
 80091da:	e7fd      	b.n	80091d8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80091dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80091e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00e      	beq.n	8009206 <xQueueGenericCreateStatic+0xf2>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80091e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80091f0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80091f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091f6:	9300      	str	r3, [sp, #0]
 80091f8:	4613      	mov	r3, r2
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	68b9      	ldr	r1, [r7, #8]
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f000 f82e 	bl	8009260 <prvInitialiseNewQueue>
 8009204:	e027      	b.n	8009256 <xQueueGenericCreateStatic+0x142>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8009206:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800920a:	2b04      	cmp	r3, #4
 800920c:	d823      	bhi.n	8009256 <xQueueGenericCreateStatic+0x142>
 800920e:	a201      	add	r2, pc, #4	@ (adr r2, 8009214 <xQueueGenericCreateStatic+0x100>)
 8009210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009214:	08009229 	.word	0x08009229
 8009218:	08009241 	.word	0x08009241
 800921c:	08009257 	.word	0x08009257
 8009220:	08009235 	.word	0x08009235
 8009224:	0800924d 	.word	0x0800924d
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	2100      	movs	r1, #0
 800922c:	2041      	movs	r0, #65	@ 0x41
 800922e:	f7f7 feb7 	bl	8000fa0 <xTraceEventCreate2>
 8009232:	e010      	b.n	8009256 <xQueueGenericCreateStatic+0x142>
 8009234:	2200      	movs	r2, #0
 8009236:	2100      	movs	r1, #0
 8009238:	2042      	movs	r0, #66	@ 0x42
 800923a:	f7f7 feb1 	bl	8000fa0 <xTraceEventCreate2>
 800923e:	e00a      	b.n	8009256 <xQueueGenericCreateStatic+0x142>
 8009240:	2200      	movs	r2, #0
 8009242:	2100      	movs	r1, #0
 8009244:	2043      	movs	r0, #67	@ 0x43
 8009246:	f7f7 feab 	bl	8000fa0 <xTraceEventCreate2>
 800924a:	e004      	b.n	8009256 <xQueueGenericCreateStatic+0x142>
 800924c:	2200      	movs	r2, #0
 800924e:	2100      	movs	r1, #0
 8009250:	2047      	movs	r0, #71	@ 0x47
 8009252:	f7f7 fea5 	bl	8000fa0 <xTraceEventCreate2>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009258:	4618      	mov	r0, r3
 800925a:	3730      	adds	r7, #48	@ 0x30
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
 800926c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d103      	bne.n	800927c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009274:	69bb      	ldr	r3, [r7, #24]
 8009276:	69ba      	ldr	r2, [r7, #24]
 8009278:	601a      	str	r2, [r3, #0]
 800927a:	e002      	b.n	8009282 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	68ba      	ldr	r2, [r7, #8]
 800928c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800928e:	2101      	movs	r1, #1
 8009290:	69b8      	ldr	r0, [r7, #24]
 8009292:	f7ff fed5 	bl	8009040 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	78fa      	ldrb	r2, [r7, #3]
 800929a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80092a4:	2b04      	cmp	r3, #4
 80092a6:	d828      	bhi.n	80092fa <prvInitialiseNewQueue+0x9a>
 80092a8:	a201      	add	r2, pc, #4	@ (adr r2, 80092b0 <prvInitialiseNewQueue+0x50>)
 80092aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ae:	bf00      	nop
 80092b0:	080092c5 	.word	0x080092c5
 80092b4:	080092e1 	.word	0x080092e1
 80092b8:	080092fb 	.word	0x080092fb
 80092bc:	080092d3 	.word	0x080092d3
 80092c0:	080092ef 	.word	0x080092ef
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	4a0f      	ldr	r2, [pc, #60]	@ (8009304 <prvInitialiseNewQueue+0xa4>)
 80092c8:	69b9      	ldr	r1, [r7, #24]
 80092ca:	2011      	movs	r0, #17
 80092cc:	f7f8 fd56 	bl	8001d7c <xTraceObjectRegisterWithoutHandle>
 80092d0:	e013      	b.n	80092fa <prvInitialiseNewQueue+0x9a>
 80092d2:	2300      	movs	r3, #0
 80092d4:	4a0b      	ldr	r2, [pc, #44]	@ (8009304 <prvInitialiseNewQueue+0xa4>)
 80092d6:	69b9      	ldr	r1, [r7, #24]
 80092d8:	2012      	movs	r0, #18
 80092da:	f7f8 fd4f 	bl	8001d7c <xTraceObjectRegisterWithoutHandle>
 80092de:	e00c      	b.n	80092fa <prvInitialiseNewQueue+0x9a>
 80092e0:	2300      	movs	r3, #0
 80092e2:	4a08      	ldr	r2, [pc, #32]	@ (8009304 <prvInitialiseNewQueue+0xa4>)
 80092e4:	69b9      	ldr	r1, [r7, #24]
 80092e6:	2013      	movs	r0, #19
 80092e8:	f7f8 fd48 	bl	8001d7c <xTraceObjectRegisterWithoutHandle>
 80092ec:	e005      	b.n	80092fa <prvInitialiseNewQueue+0x9a>
 80092ee:	2300      	movs	r3, #0
 80092f0:	4a04      	ldr	r2, [pc, #16]	@ (8009304 <prvInitialiseNewQueue+0xa4>)
 80092f2:	69b9      	ldr	r1, [r7, #24]
 80092f4:	2017      	movs	r0, #23
 80092f6:	f7f8 fd41 	bl	8001d7c <xTraceObjectRegisterWithoutHandle>
}
 80092fa:	bf00      	nop
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	0800c43c 	.word	0x0800c43c

08009308 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b08e      	sub	sp, #56	@ 0x38
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
 8009314:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009316:	2300      	movs	r3, #0
 8009318:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800931e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009320:	2b00      	cmp	r3, #0
 8009322:	d10b      	bne.n	800933c <xQueueGenericSend+0x34>
	__asm volatile
 8009324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009328:	f383 8811 	msr	BASEPRI, r3
 800932c:	f3bf 8f6f 	isb	sy
 8009330:	f3bf 8f4f 	dsb	sy
 8009334:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009336:	bf00      	nop
 8009338:	bf00      	nop
 800933a:	e7fd      	b.n	8009338 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d103      	bne.n	800934a <xQueueGenericSend+0x42>
 8009342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009346:	2b00      	cmp	r3, #0
 8009348:	d101      	bne.n	800934e <xQueueGenericSend+0x46>
 800934a:	2301      	movs	r3, #1
 800934c:	e000      	b.n	8009350 <xQueueGenericSend+0x48>
 800934e:	2300      	movs	r3, #0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10b      	bne.n	800936c <xQueueGenericSend+0x64>
	__asm volatile
 8009354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009358:	f383 8811 	msr	BASEPRI, r3
 800935c:	f3bf 8f6f 	isb	sy
 8009360:	f3bf 8f4f 	dsb	sy
 8009364:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009366:	bf00      	nop
 8009368:	bf00      	nop
 800936a:	e7fd      	b.n	8009368 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	2b02      	cmp	r3, #2
 8009370:	d103      	bne.n	800937a <xQueueGenericSend+0x72>
 8009372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009376:	2b01      	cmp	r3, #1
 8009378:	d101      	bne.n	800937e <xQueueGenericSend+0x76>
 800937a:	2301      	movs	r3, #1
 800937c:	e000      	b.n	8009380 <xQueueGenericSend+0x78>
 800937e:	2300      	movs	r3, #0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d10b      	bne.n	800939c <xQueueGenericSend+0x94>
	__asm volatile
 8009384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009388:	f383 8811 	msr	BASEPRI, r3
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f3bf 8f4f 	dsb	sy
 8009394:	623b      	str	r3, [r7, #32]
}
 8009396:	bf00      	nop
 8009398:	bf00      	nop
 800939a:	e7fd      	b.n	8009398 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800939c:	f001 fcce 	bl	800ad3c <xTaskGetSchedulerState>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d102      	bne.n	80093ac <xQueueGenericSend+0xa4>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d101      	bne.n	80093b0 <xQueueGenericSend+0xa8>
 80093ac:	2301      	movs	r3, #1
 80093ae:	e000      	b.n	80093b2 <xQueueGenericSend+0xaa>
 80093b0:	2300      	movs	r3, #0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10b      	bne.n	80093ce <xQueueGenericSend+0xc6>
	__asm volatile
 80093b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ba:	f383 8811 	msr	BASEPRI, r3
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	61fb      	str	r3, [r7, #28]
}
 80093c8:	bf00      	nop
 80093ca:	bf00      	nop
 80093cc:	e7fd      	b.n	80093ca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80093ce:	f002 fad5 	bl	800b97c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80093d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093da:	429a      	cmp	r2, r3
 80093dc:	d302      	bcc.n	80093e4 <xQueueGenericSend+0xdc>
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	2b02      	cmp	r3, #2
 80093e2:	d15d      	bne.n	80094a0 <xQueueGenericSend+0x198>
			{
				traceQUEUE_SEND( pxQueue );
 80093e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80093ea:	2b04      	cmp	r3, #4
 80093ec:	d82e      	bhi.n	800944c <xQueueGenericSend+0x144>
 80093ee:	a201      	add	r2, pc, #4	@ (adr r2, 80093f4 <xQueueGenericSend+0xec>)
 80093f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f4:	08009409 	.word	0x08009409
 80093f8:	08009437 	.word	0x08009437
 80093fc:	08009425 	.word	0x08009425
 8009400:	08009425 	.word	0x08009425
 8009404:	08009443 	.word	0x08009443
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d101      	bne.n	8009412 <xQueueGenericSend+0x10a>
 800940e:	2050      	movs	r0, #80	@ 0x50
 8009410:	e000      	b.n	8009414 <xQueueGenericSend+0x10c>
 8009412:	20c0      	movs	r0, #192	@ 0xc0
 8009414:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800941a:	3301      	adds	r3, #1
 800941c:	461a      	mov	r2, r3
 800941e:	f7f7 fdbf 	bl	8000fa0 <xTraceEventCreate2>
 8009422:	e013      	b.n	800944c <xQueueGenericSend+0x144>
 8009424:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800942a:	3301      	adds	r3, #1
 800942c:	461a      	mov	r2, r3
 800942e:	2051      	movs	r0, #81	@ 0x51
 8009430:	f7f7 fdb6 	bl	8000fa0 <xTraceEventCreate2>
 8009434:	e00a      	b.n	800944c <xQueueGenericSend+0x144>
 8009436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009438:	4619      	mov	r1, r3
 800943a:	2052      	movs	r0, #82	@ 0x52
 800943c:	f7f7 fd30 	bl	8000ea0 <xTraceEventCreate1>
 8009440:	e004      	b.n	800944c <xQueueGenericSend+0x144>
 8009442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009444:	4619      	mov	r1, r3
 8009446:	20c5      	movs	r0, #197	@ 0xc5
 8009448:	f7f7 fd2a 	bl	8000ea0 <xTraceEventCreate1>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800944c:	683a      	ldr	r2, [r7, #0]
 800944e:	68b9      	ldr	r1, [r7, #8]
 8009450:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009452:	f000 fb95 	bl	8009b80 <prvCopyDataToQueue>
 8009456:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800945a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800945c:	2b00      	cmp	r3, #0
 800945e:	d010      	beq.n	8009482 <xQueueGenericSend+0x17a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009462:	3324      	adds	r3, #36	@ 0x24
 8009464:	4618      	mov	r0, r3
 8009466:	f001 fa65 	bl	800a934 <xTaskRemoveFromEventList>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d013      	beq.n	8009498 <xQueueGenericSend+0x190>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009470:	4b82      	ldr	r3, [pc, #520]	@ (800967c <xQueueGenericSend+0x374>)
 8009472:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009476:	601a      	str	r2, [r3, #0]
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	f3bf 8f6f 	isb	sy
 8009480:	e00a      	b.n	8009498 <xQueueGenericSend+0x190>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009484:	2b00      	cmp	r3, #0
 8009486:	d007      	beq.n	8009498 <xQueueGenericSend+0x190>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009488:	4b7c      	ldr	r3, [pc, #496]	@ (800967c <xQueueGenericSend+0x374>)
 800948a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800948e:	601a      	str	r2, [r3, #0]
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009498:	f002 faa2 	bl	800b9e0 <vPortExitCritical>
				return pdPASS;
 800949c:	2301      	movs	r3, #1
 800949e:	e0e8      	b.n	8009672 <xQueueGenericSend+0x36a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d130      	bne.n	8009508 <xQueueGenericSend+0x200>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80094a6:	f002 fa9b 	bl	800b9e0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 80094aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ac:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80094b0:	2b04      	cmp	r3, #4
 80094b2:	d827      	bhi.n	8009504 <xQueueGenericSend+0x1fc>
 80094b4:	a201      	add	r2, pc, #4	@ (adr r2, 80094bc <xQueueGenericSend+0x1b4>)
 80094b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ba:	bf00      	nop
 80094bc:	080094d1 	.word	0x080094d1
 80094c0:	080094fb 	.word	0x080094fb
 80094c4:	080094eb 	.word	0x080094eb
 80094c8:	080094eb 	.word	0x080094eb
 80094cc:	080094fb 	.word	0x080094fb
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d101      	bne.n	80094da <xQueueGenericSend+0x1d2>
 80094d6:	2053      	movs	r0, #83	@ 0x53
 80094d8:	e000      	b.n	80094dc <xQueueGenericSend+0x1d4>
 80094da:	20c1      	movs	r0, #193	@ 0xc1
 80094dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80094de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094e2:	461a      	mov	r2, r3
 80094e4:	f7f7 fd5c 	bl	8000fa0 <xTraceEventCreate2>
 80094e8:	e00c      	b.n	8009504 <xQueueGenericSend+0x1fc>
 80094ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80094ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094f0:	461a      	mov	r2, r3
 80094f2:	2054      	movs	r0, #84	@ 0x54
 80094f4:	f7f7 fd54 	bl	8000fa0 <xTraceEventCreate2>
 80094f8:	e004      	b.n	8009504 <xQueueGenericSend+0x1fc>
 80094fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fc:	4619      	mov	r1, r3
 80094fe:	2055      	movs	r0, #85	@ 0x55
 8009500:	f7f7 fcce 	bl	8000ea0 <xTraceEventCreate1>
					return errQUEUE_FULL;
 8009504:	2300      	movs	r3, #0
 8009506:	e0b4      	b.n	8009672 <xQueueGenericSend+0x36a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800950a:	2b00      	cmp	r3, #0
 800950c:	d106      	bne.n	800951c <xQueueGenericSend+0x214>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800950e:	f107 0314 	add.w	r3, r7, #20
 8009512:	4618      	mov	r0, r3
 8009514:	f001 fa78 	bl	800aa08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009518:	2301      	movs	r3, #1
 800951a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800951c:	f002 fa60 	bl	800b9e0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009520:	f000 ffae 	bl	800a480 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009524:	f002 fa2a 	bl	800b97c <vPortEnterCritical>
 8009528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800952a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800952e:	b25b      	sxtb	r3, r3
 8009530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009534:	d103      	bne.n	800953e <xQueueGenericSend+0x236>
 8009536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009538:	2200      	movs	r2, #0
 800953a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800953e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009540:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009544:	b25b      	sxtb	r3, r3
 8009546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800954a:	d103      	bne.n	8009554 <xQueueGenericSend+0x24c>
 800954c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954e:	2200      	movs	r2, #0
 8009550:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009554:	f002 fa44 	bl	800b9e0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009558:	1d3a      	adds	r2, r7, #4
 800955a:	f107 0314 	add.w	r3, r7, #20
 800955e:	4611      	mov	r1, r2
 8009560:	4618      	mov	r0, r3
 8009562:	f001 fa67 	bl	800aa34 <xTaskCheckForTimeOut>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d150      	bne.n	800960e <xQueueGenericSend+0x306>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800956c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800956e:	f000 fbff 	bl	8009d70 <prvIsQueueFull>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d044      	beq.n	8009602 <xQueueGenericSend+0x2fa>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8009578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800957e:	2b04      	cmp	r3, #4
 8009580:	d826      	bhi.n	80095d0 <xQueueGenericSend+0x2c8>
 8009582:	a201      	add	r2, pc, #4	@ (adr r2, 8009588 <xQueueGenericSend+0x280>)
 8009584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009588:	0800959d 	.word	0x0800959d
 800958c:	080095c7 	.word	0x080095c7
 8009590:	080095b7 	.word	0x080095b7
 8009594:	080095b7 	.word	0x080095b7
 8009598:	080095c7 	.word	0x080095c7
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d101      	bne.n	80095a6 <xQueueGenericSend+0x29e>
 80095a2:	2056      	movs	r0, #86	@ 0x56
 80095a4:	e000      	b.n	80095a8 <xQueueGenericSend+0x2a0>
 80095a6:	20c2      	movs	r0, #194	@ 0xc2
 80095a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80095aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095ae:	461a      	mov	r2, r3
 80095b0:	f7f7 fcf6 	bl	8000fa0 <xTraceEventCreate2>
 80095b4:	e00c      	b.n	80095d0 <xQueueGenericSend+0x2c8>
 80095b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80095b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095bc:	461a      	mov	r2, r3
 80095be:	2057      	movs	r0, #87	@ 0x57
 80095c0:	f7f7 fcee 	bl	8000fa0 <xTraceEventCreate2>
 80095c4:	e004      	b.n	80095d0 <xQueueGenericSend+0x2c8>
 80095c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c8:	4619      	mov	r1, r3
 80095ca:	2058      	movs	r0, #88	@ 0x58
 80095cc:	f7f7 fc68 	bl	8000ea0 <xTraceEventCreate1>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80095d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d2:	3310      	adds	r3, #16
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	4611      	mov	r1, r2
 80095d8:	4618      	mov	r0, r3
 80095da:	f001 f94f 	bl	800a87c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80095de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80095e0:	f000 fb5e 	bl	8009ca0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80095e4:	f000 ff5a 	bl	800a49c <xTaskResumeAll>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f47f aeef 	bne.w	80093ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80095f0:	4b22      	ldr	r3, [pc, #136]	@ (800967c <xQueueGenericSend+0x374>)
 80095f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095f6:	601a      	str	r2, [r3, #0]
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	e6e5      	b.n	80093ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009602:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009604:	f000 fb4c 	bl	8009ca0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009608:	f000 ff48 	bl	800a49c <xTaskResumeAll>
 800960c:	e6df      	b.n	80093ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800960e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009610:	f000 fb46 	bl	8009ca0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009614:	f000 ff42 	bl	800a49c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8009618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800961a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800961e:	2b04      	cmp	r3, #4
 8009620:	d826      	bhi.n	8009670 <xQueueGenericSend+0x368>
 8009622:	a201      	add	r2, pc, #4	@ (adr r2, 8009628 <xQueueGenericSend+0x320>)
 8009624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009628:	0800963d 	.word	0x0800963d
 800962c:	08009667 	.word	0x08009667
 8009630:	08009657 	.word	0x08009657
 8009634:	08009657 	.word	0x08009657
 8009638:	08009667 	.word	0x08009667
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d101      	bne.n	8009646 <xQueueGenericSend+0x33e>
 8009642:	2053      	movs	r0, #83	@ 0x53
 8009644:	e000      	b.n	8009648 <xQueueGenericSend+0x340>
 8009646:	20c1      	movs	r0, #193	@ 0xc1
 8009648:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800964a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800964e:	461a      	mov	r2, r3
 8009650:	f7f7 fca6 	bl	8000fa0 <xTraceEventCreate2>
 8009654:	e00c      	b.n	8009670 <xQueueGenericSend+0x368>
 8009656:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800965a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800965c:	461a      	mov	r2, r3
 800965e:	2054      	movs	r0, #84	@ 0x54
 8009660:	f7f7 fc9e 	bl	8000fa0 <xTraceEventCreate2>
 8009664:	e004      	b.n	8009670 <xQueueGenericSend+0x368>
 8009666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009668:	4619      	mov	r1, r3
 800966a:	2055      	movs	r0, #85	@ 0x55
 800966c:	f7f7 fc18 	bl	8000ea0 <xTraceEventCreate1>
			return errQUEUE_FULL;
 8009670:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009672:	4618      	mov	r0, r3
 8009674:	3738      	adds	r7, #56	@ 0x38
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	e000ed04 	.word	0xe000ed04

08009680 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b090      	sub	sp, #64	@ 0x40
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
 800968c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009694:	2b00      	cmp	r3, #0
 8009696:	d10b      	bne.n	80096b0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800969c:	f383 8811 	msr	BASEPRI, r3
 80096a0:	f3bf 8f6f 	isb	sy
 80096a4:	f3bf 8f4f 	dsb	sy
 80096a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80096aa:	bf00      	nop
 80096ac:	bf00      	nop
 80096ae:	e7fd      	b.n	80096ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d103      	bne.n	80096be <xQueueGenericSendFromISR+0x3e>
 80096b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d101      	bne.n	80096c2 <xQueueGenericSendFromISR+0x42>
 80096be:	2301      	movs	r3, #1
 80096c0:	e000      	b.n	80096c4 <xQueueGenericSendFromISR+0x44>
 80096c2:	2300      	movs	r3, #0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d10b      	bne.n	80096e0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80096c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096cc:	f383 8811 	msr	BASEPRI, r3
 80096d0:	f3bf 8f6f 	isb	sy
 80096d4:	f3bf 8f4f 	dsb	sy
 80096d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80096da:	bf00      	nop
 80096dc:	bf00      	nop
 80096de:	e7fd      	b.n	80096dc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d103      	bne.n	80096ee <xQueueGenericSendFromISR+0x6e>
 80096e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d101      	bne.n	80096f2 <xQueueGenericSendFromISR+0x72>
 80096ee:	2301      	movs	r3, #1
 80096f0:	e000      	b.n	80096f4 <xQueueGenericSendFromISR+0x74>
 80096f2:	2300      	movs	r3, #0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d10b      	bne.n	8009710 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80096f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096fc:	f383 8811 	msr	BASEPRI, r3
 8009700:	f3bf 8f6f 	isb	sy
 8009704:	f3bf 8f4f 	dsb	sy
 8009708:	623b      	str	r3, [r7, #32]
}
 800970a:	bf00      	nop
 800970c:	bf00      	nop
 800970e:	e7fd      	b.n	800970c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009710:	f002 fa1a 	bl	800bb48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009714:	f3ef 8211 	mrs	r2, BASEPRI
 8009718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800971c:	f383 8811 	msr	BASEPRI, r3
 8009720:	f3bf 8f6f 	isb	sy
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	61fa      	str	r2, [r7, #28]
 800972a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800972c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800972e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009732:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009738:	429a      	cmp	r2, r3
 800973a:	d302      	bcc.n	8009742 <xQueueGenericSendFromISR+0xc2>
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	2b02      	cmp	r3, #2
 8009740:	d150      	bne.n	80097e4 <xQueueGenericSendFromISR+0x164>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009744:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009748:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800974c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800974e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009750:	62fb      	str	r3, [r7, #44]	@ 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8009752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009754:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009758:	2b00      	cmp	r3, #0
 800975a:	d005      	beq.n	8009768 <xQueueGenericSendFromISR+0xe8>
 800975c:	2b00      	cmp	r3, #0
 800975e:	db19      	blt.n	8009794 <xQueueGenericSendFromISR+0x114>
 8009760:	3b02      	subs	r3, #2
 8009762:	2b01      	cmp	r3, #1
 8009764:	d816      	bhi.n	8009794 <xQueueGenericSendFromISR+0x114>
 8009766:	e00d      	b.n	8009784 <xQueueGenericSendFromISR+0x104>
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d101      	bne.n	8009772 <xQueueGenericSendFromISR+0xf2>
 800976e:	2059      	movs	r0, #89	@ 0x59
 8009770:	e000      	b.n	8009774 <xQueueGenericSendFromISR+0xf4>
 8009772:	20c3      	movs	r0, #195	@ 0xc3
 8009774:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800977a:	3301      	adds	r3, #1
 800977c:	461a      	mov	r2, r3
 800977e:	f7f7 fc0f 	bl	8000fa0 <xTraceEventCreate2>
 8009782:	e007      	b.n	8009794 <xQueueGenericSendFromISR+0x114>
 8009784:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800978a:	3301      	adds	r3, #1
 800978c:	461a      	mov	r2, r3
 800978e:	205a      	movs	r0, #90	@ 0x5a
 8009790:	f7f7 fc06 	bl	8000fa0 <xTraceEventCreate2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009794:	683a      	ldr	r2, [r7, #0]
 8009796:	68b9      	ldr	r1, [r7, #8]
 8009798:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800979a:	f000 f9f1 	bl	8009b80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800979e:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80097a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a6:	d112      	bne.n	80097ce <xQueueGenericSendFromISR+0x14e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d016      	beq.n	80097de <xQueueGenericSendFromISR+0x15e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b2:	3324      	adds	r3, #36	@ 0x24
 80097b4:	4618      	mov	r0, r3
 80097b6:	f001 f8bd 	bl	800a934 <xTaskRemoveFromEventList>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00e      	beq.n	80097de <xQueueGenericSendFromISR+0x15e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00b      	beq.n	80097de <xQueueGenericSendFromISR+0x15e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2201      	movs	r2, #1
 80097ca:	601a      	str	r2, [r3, #0]
 80097cc:	e007      	b.n	80097de <xQueueGenericSendFromISR+0x15e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80097d2:	3301      	adds	r3, #1
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	b25a      	sxtb	r2, r3
 80097d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80097de:	2301      	movs	r3, #1
 80097e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80097e2:	e020      	b.n	8009826 <xQueueGenericSendFromISR+0x1a6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80097e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097e6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d005      	beq.n	80097fa <xQueueGenericSendFromISR+0x17a>
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	db17      	blt.n	8009822 <xQueueGenericSendFromISR+0x1a2>
 80097f2:	3b02      	subs	r3, #2
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d814      	bhi.n	8009822 <xQueueGenericSendFromISR+0x1a2>
 80097f8:	e00c      	b.n	8009814 <xQueueGenericSendFromISR+0x194>
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d101      	bne.n	8009804 <xQueueGenericSendFromISR+0x184>
 8009800:	205c      	movs	r0, #92	@ 0x5c
 8009802:	e000      	b.n	8009806 <xQueueGenericSendFromISR+0x186>
 8009804:	20c4      	movs	r0, #196	@ 0xc4
 8009806:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800980a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800980c:	461a      	mov	r2, r3
 800980e:	f7f7 fbc7 	bl	8000fa0 <xTraceEventCreate2>
 8009812:	e006      	b.n	8009822 <xQueueGenericSendFromISR+0x1a2>
 8009814:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800981a:	461a      	mov	r2, r3
 800981c:	205d      	movs	r0, #93	@ 0x5d
 800981e:	f7f7 fbbf 	bl	8000fa0 <xTraceEventCreate2>
			xReturn = errQUEUE_FULL;
 8009822:	2300      	movs	r3, #0
 8009824:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009828:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009830:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009834:	4618      	mov	r0, r3
 8009836:	3740      	adds	r7, #64	@ 0x40
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b08c      	sub	sp, #48	@ 0x30
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009848:	2300      	movs	r3, #0
 800984a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009852:	2b00      	cmp	r3, #0
 8009854:	d10b      	bne.n	800986e <xQueueReceive+0x32>
	__asm volatile
 8009856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800985a:	f383 8811 	msr	BASEPRI, r3
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	623b      	str	r3, [r7, #32]
}
 8009868:	bf00      	nop
 800986a:	bf00      	nop
 800986c:	e7fd      	b.n	800986a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d103      	bne.n	800987c <xQueueReceive+0x40>
 8009874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009878:	2b00      	cmp	r3, #0
 800987a:	d101      	bne.n	8009880 <xQueueReceive+0x44>
 800987c:	2301      	movs	r3, #1
 800987e:	e000      	b.n	8009882 <xQueueReceive+0x46>
 8009880:	2300      	movs	r3, #0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d10b      	bne.n	800989e <xQueueReceive+0x62>
	__asm volatile
 8009886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800988a:	f383 8811 	msr	BASEPRI, r3
 800988e:	f3bf 8f6f 	isb	sy
 8009892:	f3bf 8f4f 	dsb	sy
 8009896:	61fb      	str	r3, [r7, #28]
}
 8009898:	bf00      	nop
 800989a:	bf00      	nop
 800989c:	e7fd      	b.n	800989a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800989e:	f001 fa4d 	bl	800ad3c <xTaskGetSchedulerState>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d102      	bne.n	80098ae <xQueueReceive+0x72>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d101      	bne.n	80098b2 <xQueueReceive+0x76>
 80098ae:	2301      	movs	r3, #1
 80098b0:	e000      	b.n	80098b4 <xQueueReceive+0x78>
 80098b2:	2300      	movs	r3, #0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d10b      	bne.n	80098d0 <xQueueReceive+0x94>
	__asm volatile
 80098b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098bc:	f383 8811 	msr	BASEPRI, r3
 80098c0:	f3bf 8f6f 	isb	sy
 80098c4:	f3bf 8f4f 	dsb	sy
 80098c8:	61bb      	str	r3, [r7, #24]
}
 80098ca:	bf00      	nop
 80098cc:	bf00      	nop
 80098ce:	e7fd      	b.n	80098cc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80098d0:	f002 f854 	bl	800b97c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098d8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d050      	beq.n	8009982 <xQueueReceive+0x146>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80098e0:	68b9      	ldr	r1, [r7, #8]
 80098e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098e4:	f000 f9b6 	bl	8009c54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 80098e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ea:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80098ee:	2b04      	cmp	r3, #4
 80098f0:	d82b      	bhi.n	800994a <xQueueReceive+0x10e>
 80098f2:	a201      	add	r2, pc, #4	@ (adr r2, 80098f8 <xQueueReceive+0xbc>)
 80098f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f8:	0800990d 	.word	0x0800990d
 80098fc:	08009931 	.word	0x08009931
 8009900:	0800991f 	.word	0x0800991f
 8009904:	0800991f 	.word	0x0800991f
 8009908:	0800993f 	.word	0x0800993f
 800990c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009914:	3b01      	subs	r3, #1
 8009916:	2060      	movs	r0, #96	@ 0x60
 8009918:	f7f7 fbc6 	bl	80010a8 <xTraceEventCreate3>
 800991c:	e015      	b.n	800994a <xQueueReceive+0x10e>
 800991e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009926:	3b01      	subs	r3, #1
 8009928:	2061      	movs	r0, #97	@ 0x61
 800992a:	f7f7 fbbd 	bl	80010a8 <xTraceEventCreate3>
 800992e:	e00c      	b.n	800994a <xQueueReceive+0x10e>
 8009930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	4619      	mov	r1, r3
 8009936:	2062      	movs	r0, #98	@ 0x62
 8009938:	f7f7 fb32 	bl	8000fa0 <xTraceEventCreate2>
 800993c:	e005      	b.n	800994a <xQueueReceive+0x10e>
 800993e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	4619      	mov	r1, r3
 8009944:	20c7      	movs	r0, #199	@ 0xc7
 8009946:	f7f7 fb2b 	bl	8000fa0 <xTraceEventCreate2>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800994a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800994c:	1e5a      	subs	r2, r3, #1
 800994e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009950:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009954:	691b      	ldr	r3, [r3, #16]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00f      	beq.n	800997a <xQueueReceive+0x13e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800995a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800995c:	3310      	adds	r3, #16
 800995e:	4618      	mov	r0, r3
 8009960:	f000 ffe8 	bl	800a934 <xTaskRemoveFromEventList>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d007      	beq.n	800997a <xQueueReceive+0x13e>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800996a:	4b84      	ldr	r3, [pc, #528]	@ (8009b7c <xQueueReceive+0x340>)
 800996c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009970:	601a      	str	r2, [r3, #0]
 8009972:	f3bf 8f4f 	dsb	sy
 8009976:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800997a:	f002 f831 	bl	800b9e0 <vPortExitCritical>
				return pdPASS;
 800997e:	2301      	movs	r3, #1
 8009980:	e0f8      	b.n	8009b74 <xQueueReceive+0x338>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d132      	bne.n	80099ee <xQueueReceive+0x1b2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009988:	f002 f82a 	bl	800b9e0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800998c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009992:	2b04      	cmp	r3, #4
 8009994:	d829      	bhi.n	80099ea <xQueueReceive+0x1ae>
 8009996:	a201      	add	r2, pc, #4	@ (adr r2, 800999c <xQueueReceive+0x160>)
 8009998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800999c:	080099b1 	.word	0x080099b1
 80099a0:	080099d1 	.word	0x080099d1
 80099a4:	080099c1 	.word	0x080099c1
 80099a8:	080099c1 	.word	0x080099c1
 80099ac:	080099df 	.word	0x080099df
 80099b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099b8:	2063      	movs	r0, #99	@ 0x63
 80099ba:	f7f7 fb75 	bl	80010a8 <xTraceEventCreate3>
 80099be:	e014      	b.n	80099ea <xQueueReceive+0x1ae>
 80099c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c8:	2064      	movs	r0, #100	@ 0x64
 80099ca:	f7f7 fb6d 	bl	80010a8 <xTraceEventCreate3>
 80099ce:	e00c      	b.n	80099ea <xQueueReceive+0x1ae>
 80099d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	4619      	mov	r1, r3
 80099d6:	2065      	movs	r0, #101	@ 0x65
 80099d8:	f7f7 fae2 	bl	8000fa0 <xTraceEventCreate2>
 80099dc:	e005      	b.n	80099ea <xQueueReceive+0x1ae>
 80099de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	4619      	mov	r1, r3
 80099e4:	20c8      	movs	r0, #200	@ 0xc8
 80099e6:	f7f7 fadb 	bl	8000fa0 <xTraceEventCreate2>
					return errQUEUE_EMPTY;
 80099ea:	2300      	movs	r3, #0
 80099ec:	e0c2      	b.n	8009b74 <xQueueReceive+0x338>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d106      	bne.n	8009a02 <xQueueReceive+0x1c6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099f4:	f107 0310 	add.w	r3, r7, #16
 80099f8:	4618      	mov	r0, r3
 80099fa:	f001 f805 	bl	800aa08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099fe:	2301      	movs	r3, #1
 8009a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a02:	f001 ffed 	bl	800b9e0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a06:	f000 fd3b 	bl	800a480 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a0a:	f001 ffb7 	bl	800b97c <vPortEnterCritical>
 8009a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a14:	b25b      	sxtb	r3, r3
 8009a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a1a:	d103      	bne.n	8009a24 <xQueueReceive+0x1e8>
 8009a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a2a:	b25b      	sxtb	r3, r3
 8009a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a30:	d103      	bne.n	8009a3a <xQueueReceive+0x1fe>
 8009a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a34:	2200      	movs	r2, #0
 8009a36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a3a:	f001 ffd1 	bl	800b9e0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a3e:	1d3a      	adds	r2, r7, #4
 8009a40:	f107 0310 	add.w	r3, r7, #16
 8009a44:	4611      	mov	r1, r2
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 fff4 	bl	800aa34 <xTaskCheckForTimeOut>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d154      	bne.n	8009afc <xQueueReceive+0x2c0>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a54:	f000 f976 	bl	8009d44 <prvIsQueueEmpty>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d048      	beq.n	8009af0 <xQueueReceive+0x2b4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8009a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a60:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009a64:	2b04      	cmp	r3, #4
 8009a66:	d82a      	bhi.n	8009abe <xQueueReceive+0x282>
 8009a68:	a201      	add	r2, pc, #4	@ (adr r2, 8009a70 <xQueueReceive+0x234>)
 8009a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a6e:	bf00      	nop
 8009a70:	08009a85 	.word	0x08009a85
 8009a74:	08009aa5 	.word	0x08009aa5
 8009a78:	08009a95 	.word	0x08009a95
 8009a7c:	08009a95 	.word	0x08009a95
 8009a80:	08009ab3 	.word	0x08009ab3
 8009a84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a8c:	2066      	movs	r0, #102	@ 0x66
 8009a8e:	f7f7 fb0b 	bl	80010a8 <xTraceEventCreate3>
 8009a92:	e014      	b.n	8009abe <xQueueReceive+0x282>
 8009a94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a9c:	2067      	movs	r0, #103	@ 0x67
 8009a9e:	f7f7 fb03 	bl	80010a8 <xTraceEventCreate3>
 8009aa2:	e00c      	b.n	8009abe <xQueueReceive+0x282>
 8009aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	2068      	movs	r0, #104	@ 0x68
 8009aac:	f7f7 fa78 	bl	8000fa0 <xTraceEventCreate2>
 8009ab0:	e005      	b.n	8009abe <xQueueReceive+0x282>
 8009ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	20f6      	movs	r0, #246	@ 0xf6
 8009aba:	f7f7 fa71 	bl	8000fa0 <xTraceEventCreate2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac0:	3324      	adds	r3, #36	@ 0x24
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	4611      	mov	r1, r2
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f000 fed8 	bl	800a87c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009acc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ace:	f000 f8e7 	bl	8009ca0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009ad2:	f000 fce3 	bl	800a49c <xTaskResumeAll>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f47f aef9 	bne.w	80098d0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009ade:	4b27      	ldr	r3, [pc, #156]	@ (8009b7c <xQueueReceive+0x340>)
 8009ae0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ae4:	601a      	str	r2, [r3, #0]
 8009ae6:	f3bf 8f4f 	dsb	sy
 8009aea:	f3bf 8f6f 	isb	sy
 8009aee:	e6ef      	b.n	80098d0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009af0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009af2:	f000 f8d5 	bl	8009ca0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009af6:	f000 fcd1 	bl	800a49c <xTaskResumeAll>
 8009afa:	e6e9      	b.n	80098d0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009afc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009afe:	f000 f8cf 	bl	8009ca0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b02:	f000 fccb 	bl	800a49c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b08:	f000 f91c 	bl	8009d44 <prvIsQueueEmpty>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f43f aede 	beq.w	80098d0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b16:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009b1a:	2b04      	cmp	r3, #4
 8009b1c:	d829      	bhi.n	8009b72 <xQueueReceive+0x336>
 8009b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b24 <xQueueReceive+0x2e8>)
 8009b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b24:	08009b39 	.word	0x08009b39
 8009b28:	08009b59 	.word	0x08009b59
 8009b2c:	08009b49 	.word	0x08009b49
 8009b30:	08009b49 	.word	0x08009b49
 8009b34:	08009b67 	.word	0x08009b67
 8009b38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b40:	2063      	movs	r0, #99	@ 0x63
 8009b42:	f7f7 fab1 	bl	80010a8 <xTraceEventCreate3>
 8009b46:	e014      	b.n	8009b72 <xQueueReceive+0x336>
 8009b48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b50:	2064      	movs	r0, #100	@ 0x64
 8009b52:	f7f7 faa9 	bl	80010a8 <xTraceEventCreate3>
 8009b56:	e00c      	b.n	8009b72 <xQueueReceive+0x336>
 8009b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	2065      	movs	r0, #101	@ 0x65
 8009b60:	f7f7 fa1e 	bl	8000fa0 <xTraceEventCreate2>
 8009b64:	e005      	b.n	8009b72 <xQueueReceive+0x336>
 8009b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	20c8      	movs	r0, #200	@ 0xc8
 8009b6e:	f7f7 fa17 	bl	8000fa0 <xTraceEventCreate2>
				return errQUEUE_EMPTY;
 8009b72:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3730      	adds	r7, #48	@ 0x30
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	e000ed04 	.word	0xe000ed04

08009b80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b086      	sub	sp, #24
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d10d      	bne.n	8009bba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d14d      	bne.n	8009c42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	4618      	mov	r0, r3
 8009bac:	f001 f8e4 	bl	800ad78 <xTaskPriorityDisinherit>
 8009bb0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	609a      	str	r2, [r3, #8]
 8009bb8:	e043      	b.n	8009c42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d119      	bne.n	8009bf4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6858      	ldr	r0, [r3, #4]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bc8:	461a      	mov	r2, r3
 8009bca:	68b9      	ldr	r1, [r7, #8]
 8009bcc:	f002 fa9e 	bl	800c10c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	685a      	ldr	r2, [r3, #4]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bd8:	441a      	add	r2, r3
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	685a      	ldr	r2, [r3, #4]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d32b      	bcc.n	8009c42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	605a      	str	r2, [r3, #4]
 8009bf2:	e026      	b.n	8009c42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	68d8      	ldr	r0, [r3, #12]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	68b9      	ldr	r1, [r7, #8]
 8009c00:	f002 fa84 	bl	800c10c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	68da      	ldr	r2, [r3, #12]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c0c:	425b      	negs	r3, r3
 8009c0e:	441a      	add	r2, r3
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	68da      	ldr	r2, [r3, #12]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d207      	bcs.n	8009c30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	689a      	ldr	r2, [r3, #8]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c28:	425b      	negs	r3, r3
 8009c2a:	441a      	add	r2, r3
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	d105      	bne.n	8009c42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d002      	beq.n	8009c42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	1c5a      	adds	r2, r3, #1
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009c4a:	697b      	ldr	r3, [r7, #20]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3718      	adds	r7, #24
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d018      	beq.n	8009c98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	68da      	ldr	r2, [r3, #12]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c6e:	441a      	add	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	68da      	ldr	r2, [r3, #12]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d303      	bcc.n	8009c88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	68d9      	ldr	r1, [r3, #12]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c90:	461a      	mov	r2, r3
 8009c92:	6838      	ldr	r0, [r7, #0]
 8009c94:	f002 fa3a 	bl	800c10c <memcpy>
	}
}
 8009c98:	bf00      	nop
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009ca8:	f001 fe68 	bl	800b97c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009cb2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009cb4:	e011      	b.n	8009cda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d012      	beq.n	8009ce4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	3324      	adds	r3, #36	@ 0x24
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f000 fe36 	bl	800a934 <xTaskRemoveFromEventList>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d001      	beq.n	8009cd2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009cce:	f000 ff15 	bl	800aafc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009cd2:	7bfb      	ldrb	r3, [r7, #15]
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	dce9      	bgt.n	8009cb6 <prvUnlockQueue+0x16>
 8009ce2:	e000      	b.n	8009ce6 <prvUnlockQueue+0x46>
					break;
 8009ce4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	22ff      	movs	r2, #255	@ 0xff
 8009cea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009cee:	f001 fe77 	bl	800b9e0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009cf2:	f001 fe43 	bl	800b97c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009cfc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009cfe:	e011      	b.n	8009d24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	691b      	ldr	r3, [r3, #16]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d012      	beq.n	8009d2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	3310      	adds	r3, #16
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f000 fe11 	bl	800a934 <xTaskRemoveFromEventList>
 8009d12:	4603      	mov	r3, r0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d001      	beq.n	8009d1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009d18:	f000 fef0 	bl	800aafc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009d1c:	7bbb      	ldrb	r3, [r7, #14]
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	dce9      	bgt.n	8009d00 <prvUnlockQueue+0x60>
 8009d2c:	e000      	b.n	8009d30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009d2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	22ff      	movs	r2, #255	@ 0xff
 8009d34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009d38:	f001 fe52 	bl	800b9e0 <vPortExitCritical>
}
 8009d3c:	bf00      	nop
 8009d3e:	3710      	adds	r7, #16
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d4c:	f001 fe16 	bl	800b97c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d102      	bne.n	8009d5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	60fb      	str	r3, [r7, #12]
 8009d5c:	e001      	b.n	8009d62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d62:	f001 fe3d 	bl	800b9e0 <vPortExitCritical>

	return xReturn;
 8009d66:	68fb      	ldr	r3, [r7, #12]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3710      	adds	r7, #16
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d78:	f001 fe00 	bl	800b97c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d102      	bne.n	8009d8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	60fb      	str	r3, [r7, #12]
 8009d8c:	e001      	b.n	8009d92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d92:	f001 fe25 	bl	800b9e0 <vPortExitCritical>

	return xReturn;
 8009d96:	68fb      	ldr	r3, [r7, #12]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009daa:	2300      	movs	r3, #0
 8009dac:	60fb      	str	r3, [r7, #12]
 8009dae:	e018      	b.n	8009de2 <vQueueAddToRegistry+0x42>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009db0:	4a10      	ldr	r2, [pc, #64]	@ (8009df4 <vQueueAddToRegistry+0x54>)
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d10f      	bne.n	8009ddc <vQueueAddToRegistry+0x3c>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009dbc:	490d      	ldr	r1, [pc, #52]	@ (8009df4 <vQueueAddToRegistry+0x54>)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	683a      	ldr	r2, [r7, #0]
 8009dc2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009dc6:	4a0b      	ldr	r2, [pc, #44]	@ (8009df4 <vQueueAddToRegistry+0x54>)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	00db      	lsls	r3, r3, #3
 8009dcc:	4413      	add	r3, r2
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8009dd2:	6839      	ldr	r1, [r7, #0]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f7f8 f81a 	bl	8001e0e <xTraceObjectSetNameWithoutHandle>
				break;
 8009dda:	e006      	b.n	8009dea <vQueueAddToRegistry+0x4a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	3301      	adds	r3, #1
 8009de0:	60fb      	str	r3, [r7, #12]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2b07      	cmp	r3, #7
 8009de6:	d9e3      	bls.n	8009db0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009de8:	bf00      	nop
 8009dea:	bf00      	nop
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	20003720 	.word	0x20003720

08009df8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b086      	sub	sp, #24
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009e08:	f001 fdb8 	bl	800b97c <vPortEnterCritical>
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e12:	b25b      	sxtb	r3, r3
 8009e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e18:	d103      	bne.n	8009e22 <vQueueWaitForMessageRestricted+0x2a>
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009e28:	b25b      	sxtb	r3, r3
 8009e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e2e:	d103      	bne.n	8009e38 <vQueueWaitForMessageRestricted+0x40>
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e38:	f001 fdd2 	bl	800b9e0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d106      	bne.n	8009e52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	3324      	adds	r3, #36	@ 0x24
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	68b9      	ldr	r1, [r7, #8]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f000 fd3b 	bl	800a8c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009e52:	6978      	ldr	r0, [r7, #20]
 8009e54:	f7ff ff24 	bl	8009ca0 <prvUnlockQueue>
	}
 8009e58:	bf00      	nop
 8009e5a:	3718      	adds	r7, #24
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b08e      	sub	sp, #56	@ 0x38
 8009e64:	af04      	add	r7, sp, #16
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
 8009e6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d10b      	bne.n	8009e8c <xTaskCreateStatic+0x2c>
	__asm volatile
 8009e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e78:	f383 8811 	msr	BASEPRI, r3
 8009e7c:	f3bf 8f6f 	isb	sy
 8009e80:	f3bf 8f4f 	dsb	sy
 8009e84:	623b      	str	r3, [r7, #32]
}
 8009e86:	bf00      	nop
 8009e88:	bf00      	nop
 8009e8a:	e7fd      	b.n	8009e88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d10b      	bne.n	8009eaa <xTaskCreateStatic+0x4a>
	__asm volatile
 8009e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e96:	f383 8811 	msr	BASEPRI, r3
 8009e9a:	f3bf 8f6f 	isb	sy
 8009e9e:	f3bf 8f4f 	dsb	sy
 8009ea2:	61fb      	str	r3, [r7, #28]
}
 8009ea4:	bf00      	nop
 8009ea6:	bf00      	nop
 8009ea8:	e7fd      	b.n	8009ea6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009eaa:	23a8      	movs	r3, #168	@ 0xa8
 8009eac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	2ba8      	cmp	r3, #168	@ 0xa8
 8009eb2:	d00b      	beq.n	8009ecc <xTaskCreateStatic+0x6c>
	__asm volatile
 8009eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eb8:	f383 8811 	msr	BASEPRI, r3
 8009ebc:	f3bf 8f6f 	isb	sy
 8009ec0:	f3bf 8f4f 	dsb	sy
 8009ec4:	61bb      	str	r3, [r7, #24]
}
 8009ec6:	bf00      	nop
 8009ec8:	bf00      	nop
 8009eca:	e7fd      	b.n	8009ec8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009ecc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d01e      	beq.n	8009f12 <xTaskCreateStatic+0xb2>
 8009ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d01b      	beq.n	8009f12 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009edc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ee2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee6:	2202      	movs	r2, #2
 8009ee8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009eec:	2300      	movs	r3, #0
 8009eee:	9303      	str	r3, [sp, #12]
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef2:	9302      	str	r3, [sp, #8]
 8009ef4:	f107 0314 	add.w	r3, r7, #20
 8009ef8:	9301      	str	r3, [sp, #4]
 8009efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009efc:	9300      	str	r3, [sp, #0]
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	68b9      	ldr	r1, [r7, #8]
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f000 f851 	bl	8009fac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009f0c:	f000 f8f6 	bl	800a0fc <prvAddNewTaskToReadyList>
 8009f10:	e001      	b.n	8009f16 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009f12:	2300      	movs	r3, #0
 8009f14:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f16:	697b      	ldr	r3, [r7, #20]
	}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3728      	adds	r7, #40	@ 0x28
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b08c      	sub	sp, #48	@ 0x30
 8009f24:	af04      	add	r7, sp, #16
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	603b      	str	r3, [r7, #0]
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009f30:	88fb      	ldrh	r3, [r7, #6]
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	4618      	mov	r0, r3
 8009f36:	f001 fe49 	bl	800bbcc <pvPortMalloc>
 8009f3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00e      	beq.n	8009f60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009f42:	20a8      	movs	r0, #168	@ 0xa8
 8009f44:	f001 fe42 	bl	800bbcc <pvPortMalloc>
 8009f48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009f4a:	69fb      	ldr	r3, [r7, #28]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d003      	beq.n	8009f58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009f50:	69fb      	ldr	r3, [r7, #28]
 8009f52:	697a      	ldr	r2, [r7, #20]
 8009f54:	631a      	str	r2, [r3, #48]	@ 0x30
 8009f56:	e005      	b.n	8009f64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009f58:	6978      	ldr	r0, [r7, #20]
 8009f5a:	f001 ff1d 	bl	800bd98 <vPortFree>
 8009f5e:	e001      	b.n	8009f64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009f60:	2300      	movs	r3, #0
 8009f62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d017      	beq.n	8009f9a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009f72:	88fa      	ldrh	r2, [r7, #6]
 8009f74:	2300      	movs	r3, #0
 8009f76:	9303      	str	r3, [sp, #12]
 8009f78:	69fb      	ldr	r3, [r7, #28]
 8009f7a:	9302      	str	r3, [sp, #8]
 8009f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f7e:	9301      	str	r3, [sp, #4]
 8009f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	68b9      	ldr	r1, [r7, #8]
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f000 f80f 	bl	8009fac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f8e:	69f8      	ldr	r0, [r7, #28]
 8009f90:	f000 f8b4 	bl	800a0fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009f94:	2301      	movs	r3, #1
 8009f96:	61bb      	str	r3, [r7, #24]
 8009f98:	e002      	b.n	8009fa0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009fa0:	69bb      	ldr	r3, [r7, #24]
	}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3720      	adds	r7, #32
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
	...

08009fac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b088      	sub	sp, #32
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	607a      	str	r2, [r7, #4]
 8009fb8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fbc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	21a5      	movs	r1, #165	@ 0xa5
 8009fc6:	f002 f81d 	bl	800c004 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	4413      	add	r3, r2
 8009fda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	f023 0307 	bic.w	r3, r3, #7
 8009fe2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	f003 0307 	and.w	r3, r3, #7
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00b      	beq.n	800a006 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	617b      	str	r3, [r7, #20]
}
 800a000:	bf00      	nop
 800a002:	bf00      	nop
 800a004:	e7fd      	b.n	800a002 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d01f      	beq.n	800a04c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a00c:	2300      	movs	r3, #0
 800a00e:	61fb      	str	r3, [r7, #28]
 800a010:	e012      	b.n	800a038 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a012:	68ba      	ldr	r2, [r7, #8]
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	4413      	add	r3, r2
 800a018:	7819      	ldrb	r1, [r3, #0]
 800a01a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	4413      	add	r3, r2
 800a020:	3334      	adds	r3, #52	@ 0x34
 800a022:	460a      	mov	r2, r1
 800a024:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	4413      	add	r3, r2
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d006      	beq.n	800a040 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	3301      	adds	r3, #1
 800a036:	61fb      	str	r3, [r7, #28]
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	2b0f      	cmp	r3, #15
 800a03c:	d9e9      	bls.n	800a012 <prvInitialiseNewTask+0x66>
 800a03e:	e000      	b.n	800a042 <prvInitialiseNewTask+0x96>
			{
				break;
 800a040:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a044:	2200      	movs	r2, #0
 800a046:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a04a:	e003      	b.n	800a054 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a04e:	2200      	movs	r2, #0
 800a050:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a056:	2b37      	cmp	r3, #55	@ 0x37
 800a058:	d901      	bls.n	800a05e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a05a:	2337      	movs	r3, #55	@ 0x37
 800a05c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a060:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a062:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a066:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a068:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a06c:	2200      	movs	r2, #0
 800a06e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a072:	3304      	adds	r3, #4
 800a074:	4618      	mov	r0, r3
 800a076:	f7fe ff4f 	bl	8008f18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a07c:	3318      	adds	r3, #24
 800a07e:	4618      	mov	r0, r3
 800a080:	f7fe ff4a 	bl	8008f18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a088:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a08c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a092:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a096:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a098:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09c:	2200      	movs	r2, #0
 800a09e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ac:	3354      	adds	r3, #84	@ 0x54
 800a0ae:	224c      	movs	r2, #76	@ 0x4c
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f001 ffa6 	bl	800c004 <memset>
 800a0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ba:	4a0d      	ldr	r2, [pc, #52]	@ (800a0f0 <prvInitialiseNewTask+0x144>)
 800a0bc:	659a      	str	r2, [r3, #88]	@ 0x58
 800a0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c0:	4a0c      	ldr	r2, [pc, #48]	@ (800a0f4 <prvInitialiseNewTask+0x148>)
 800a0c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c6:	4a0c      	ldr	r2, [pc, #48]	@ (800a0f8 <prvInitialiseNewTask+0x14c>)
 800a0c8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a0ca:	683a      	ldr	r2, [r7, #0]
 800a0cc:	68f9      	ldr	r1, [r7, #12]
 800a0ce:	69b8      	ldr	r0, [r7, #24]
 800a0d0:	f001 fb14 	bl	800b6fc <pxPortInitialiseStack>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a0da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d002      	beq.n	800a0e6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0e6:	bf00      	nop
 800a0e8:	3720      	adds	r7, #32
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	2000496c 	.word	0x2000496c
 800a0f4:	200049d4 	.word	0x200049d4
 800a0f8:	20004a3c 	.word	0x20004a3c

0800a0fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a104:	f001 fc3a 	bl	800b97c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a108:	4b3a      	ldr	r3, [pc, #232]	@ (800a1f4 <prvAddNewTaskToReadyList+0xf8>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	3301      	adds	r3, #1
 800a10e:	4a39      	ldr	r2, [pc, #228]	@ (800a1f4 <prvAddNewTaskToReadyList+0xf8>)
 800a110:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a112:	4b39      	ldr	r3, [pc, #228]	@ (800a1f8 <prvAddNewTaskToReadyList+0xfc>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d109      	bne.n	800a12e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a11a:	4a37      	ldr	r2, [pc, #220]	@ (800a1f8 <prvAddNewTaskToReadyList+0xfc>)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a120:	4b34      	ldr	r3, [pc, #208]	@ (800a1f4 <prvAddNewTaskToReadyList+0xf8>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d110      	bne.n	800a14a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a128:	f000 fd0c 	bl	800ab44 <prvInitialiseTaskLists>
 800a12c:	e00d      	b.n	800a14a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a12e:	4b33      	ldr	r3, [pc, #204]	@ (800a1fc <prvAddNewTaskToReadyList+0x100>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d109      	bne.n	800a14a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a136:	4b30      	ldr	r3, [pc, #192]	@ (800a1f8 <prvAddNewTaskToReadyList+0xfc>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a140:	429a      	cmp	r2, r3
 800a142:	d802      	bhi.n	800a14a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a144:	4a2c      	ldr	r2, [pc, #176]	@ (800a1f8 <prvAddNewTaskToReadyList+0xfc>)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a14a:	4b2d      	ldr	r3, [pc, #180]	@ (800a200 <prvAddNewTaskToReadyList+0x104>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	3301      	adds	r3, #1
 800a150:	4a2b      	ldr	r2, [pc, #172]	@ (800a200 <prvAddNewTaskToReadyList+0x104>)
 800a152:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a154:	4b2a      	ldr	r3, [pc, #168]	@ (800a200 <prvAddNewTaskToReadyList+0x104>)
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d011      	beq.n	800a186 <prvAddNewTaskToReadyList+0x8a>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d00e      	beq.n	800a186 <prvAddNewTaskToReadyList+0x8a>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a172:	6879      	ldr	r1, [r7, #4]
 800a174:	2010      	movs	r0, #16
 800a176:	f7f7 fe01 	bl	8001d7c <xTraceObjectRegisterWithoutHandle>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d102      	bne.n	800a186 <prvAddNewTaskToReadyList+0x8a>
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f7f8 f917 	bl	80023b4 <xTraceStackMonitorAdd>

		prvAddTaskToReadyList( pxNewTCB );
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4619      	mov	r1, r3
 800a18a:	2030      	movs	r0, #48	@ 0x30
 800a18c:	f7f6 fe88 	bl	8000ea0 <xTraceEventCreate1>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a194:	4b1b      	ldr	r3, [pc, #108]	@ (800a204 <prvAddNewTaskToReadyList+0x108>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d903      	bls.n	800a1a4 <prvAddNewTaskToReadyList+0xa8>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1a0:	4a18      	ldr	r2, [pc, #96]	@ (800a204 <prvAddNewTaskToReadyList+0x108>)
 800a1a2:	6013      	str	r3, [r2, #0]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	4413      	add	r3, r2
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	4a15      	ldr	r2, [pc, #84]	@ (800a208 <prvAddNewTaskToReadyList+0x10c>)
 800a1b2:	441a      	add	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	3304      	adds	r3, #4
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	4610      	mov	r0, r2
 800a1bc:	f7fe feb9 	bl	8008f32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a1c0:	f001 fc0e 	bl	800b9e0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a1c4:	4b0d      	ldr	r3, [pc, #52]	@ (800a1fc <prvAddNewTaskToReadyList+0x100>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00e      	beq.n	800a1ea <prvAddNewTaskToReadyList+0xee>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a1cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a1f8 <prvAddNewTaskToReadyList+0xfc>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d207      	bcs.n	800a1ea <prvAddNewTaskToReadyList+0xee>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a1da:	4b0c      	ldr	r3, [pc, #48]	@ (800a20c <prvAddNewTaskToReadyList+0x110>)
 800a1dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1e0:	601a      	str	r2, [r3, #0]
 800a1e2:	f3bf 8f4f 	dsb	sy
 800a1e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1ea:	bf00      	nop
 800a1ec:	3708      	adds	r7, #8
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	20003c34 	.word	0x20003c34
 800a1f8:	20003760 	.word	0x20003760
 800a1fc:	20003c40 	.word	0x20003c40
 800a200:	20003c50 	.word	0x20003c50
 800a204:	20003c3c 	.word	0x20003c3c
 800a208:	20003764 	.word	0x20003764
 800a20c:	e000ed04 	.word	0xe000ed04

0800a210 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a210:	b580      	push	{r7, lr}
 800a212:	b08a      	sub	sp, #40	@ 0x28
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a21a:	2300      	movs	r3, #0
 800a21c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10b      	bne.n	800a23c <vTaskDelayUntil+0x2c>
	__asm volatile
 800a224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a228:	f383 8811 	msr	BASEPRI, r3
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	617b      	str	r3, [r7, #20]
}
 800a236:	bf00      	nop
 800a238:	bf00      	nop
 800a23a:	e7fd      	b.n	800a238 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d10b      	bne.n	800a25a <vTaskDelayUntil+0x4a>
	__asm volatile
 800a242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a246:	f383 8811 	msr	BASEPRI, r3
 800a24a:	f3bf 8f6f 	isb	sy
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	613b      	str	r3, [r7, #16]
}
 800a254:	bf00      	nop
 800a256:	bf00      	nop
 800a258:	e7fd      	b.n	800a256 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800a25a:	4b2c      	ldr	r3, [pc, #176]	@ (800a30c <vTaskDelayUntil+0xfc>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00b      	beq.n	800a27a <vTaskDelayUntil+0x6a>
	__asm volatile
 800a262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a266:	f383 8811 	msr	BASEPRI, r3
 800a26a:	f3bf 8f6f 	isb	sy
 800a26e:	f3bf 8f4f 	dsb	sy
 800a272:	60fb      	str	r3, [r7, #12]
}
 800a274:	bf00      	nop
 800a276:	bf00      	nop
 800a278:	e7fd      	b.n	800a276 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800a27a:	f000 f901 	bl	800a480 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a27e:	4b24      	ldr	r3, [pc, #144]	@ (800a310 <vTaskDelayUntil+0x100>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	683a      	ldr	r2, [r7, #0]
 800a28a:	4413      	add	r3, r2
 800a28c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	6a3a      	ldr	r2, [r7, #32]
 800a294:	429a      	cmp	r2, r3
 800a296:	d20b      	bcs.n	800a2b0 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	69fa      	ldr	r2, [r7, #28]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d211      	bcs.n	800a2c6 <vTaskDelayUntil+0xb6>
 800a2a2:	69fa      	ldr	r2, [r7, #28]
 800a2a4:	6a3b      	ldr	r3, [r7, #32]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d90d      	bls.n	800a2c6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2ae:	e00a      	b.n	800a2c6 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	69fa      	ldr	r2, [r7, #28]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d303      	bcc.n	800a2c2 <vTaskDelayUntil+0xb2>
 800a2ba:	69fa      	ldr	r2, [r7, #28]
 800a2bc:	6a3b      	ldr	r3, [r7, #32]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d901      	bls.n	800a2c6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	69fa      	ldr	r2, [r7, #28]
 800a2ca:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00a      	beq.n	800a2e8 <vTaskDelayUntil+0xd8>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 800a2d2:	69f9      	ldr	r1, [r7, #28]
 800a2d4:	2079      	movs	r0, #121	@ 0x79
 800a2d6:	f7f6 fde3 	bl	8000ea0 <xTraceEventCreate1>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a2da:	69fa      	ldr	r2, [r7, #28]
 800a2dc:	6a3b      	ldr	r3, [r7, #32]
 800a2de:	1ad3      	subs	r3, r2, r3
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f000 fdc4 	bl	800ae70 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a2e8:	f000 f8d8 	bl	800a49c <xTaskResumeAll>
 800a2ec:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a2ee:	69bb      	ldr	r3, [r7, #24]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d107      	bne.n	800a304 <vTaskDelayUntil+0xf4>
		{
			portYIELD_WITHIN_API();
 800a2f4:	4b07      	ldr	r3, [pc, #28]	@ (800a314 <vTaskDelayUntil+0x104>)
 800a2f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2fa:	601a      	str	r2, [r3, #0]
 800a2fc:	f3bf 8f4f 	dsb	sy
 800a300:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a304:	bf00      	nop
 800a306:	3728      	adds	r7, #40	@ 0x28
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	20003c5c 	.word	0x20003c5c
 800a310:	20003c38 	.word	0x20003c38
 800a314:	e000ed04 	.word	0xe000ed04

0800a318 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a320:	2300      	movs	r3, #0
 800a322:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d01c      	beq.n	800a364 <vTaskDelay+0x4c>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a32a:	4b16      	ldr	r3, [pc, #88]	@ (800a384 <vTaskDelay+0x6c>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d00b      	beq.n	800a34a <vTaskDelay+0x32>
	__asm volatile
 800a332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	60bb      	str	r3, [r7, #8]
}
 800a344:	bf00      	nop
 800a346:	bf00      	nop
 800a348:	e7fd      	b.n	800a346 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a34a:	f000 f899 	bl	800a480 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800a34e:	6879      	ldr	r1, [r7, #4]
 800a350:	207a      	movs	r0, #122	@ 0x7a
 800a352:	f7f6 fda5 	bl	8000ea0 <xTraceEventCreate1>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a356:	2100      	movs	r1, #0
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 fd89 	bl	800ae70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a35e:	f000 f89d 	bl	800a49c <xTaskResumeAll>
 800a362:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d107      	bne.n	800a37a <vTaskDelay+0x62>
		{
			portYIELD_WITHIN_API();
 800a36a:	4b07      	ldr	r3, [pc, #28]	@ (800a388 <vTaskDelay+0x70>)
 800a36c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a370:	601a      	str	r2, [r3, #0]
 800a372:	f3bf 8f4f 	dsb	sy
 800a376:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a37a:	bf00      	nop
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	20003c5c 	.word	0x20003c5c
 800a388:	e000ed04 	.word	0xe000ed04

0800a38c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b08a      	sub	sp, #40	@ 0x28
 800a390:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a392:	2300      	movs	r3, #0
 800a394:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a396:	2300      	movs	r3, #0
 800a398:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a39a:	463a      	mov	r2, r7
 800a39c:	1d39      	adds	r1, r7, #4
 800a39e:	f107 0308 	add.w	r3, r7, #8
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7fe fd64 	bl	8008e70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a3a8:	6839      	ldr	r1, [r7, #0]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	68ba      	ldr	r2, [r7, #8]
 800a3ae:	9202      	str	r2, [sp, #8]
 800a3b0:	9301      	str	r3, [sp, #4]
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	9300      	str	r3, [sp, #0]
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	460a      	mov	r2, r1
 800a3ba:	4929      	ldr	r1, [pc, #164]	@ (800a460 <vTaskStartScheduler+0xd4>)
 800a3bc:	4829      	ldr	r0, [pc, #164]	@ (800a464 <vTaskStartScheduler+0xd8>)
 800a3be:	f7ff fd4f 	bl	8009e60 <xTaskCreateStatic>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	4a28      	ldr	r2, [pc, #160]	@ (800a468 <vTaskStartScheduler+0xdc>)
 800a3c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a3c8:	4b27      	ldr	r3, [pc, #156]	@ (800a468 <vTaskStartScheduler+0xdc>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d002      	beq.n	800a3d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	617b      	str	r3, [r7, #20]
 800a3d4:	e001      	b.n	800a3da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d102      	bne.n	800a3e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a3e0:	f000 fd9a 	bl	800af18 <xTimerCreateTimerTask>
 800a3e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d124      	bne.n	800a436 <vTaskStartScheduler+0xaa>
	__asm volatile
 800a3ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f0:	f383 8811 	msr	BASEPRI, r3
 800a3f4:	f3bf 8f6f 	isb	sy
 800a3f8:	f3bf 8f4f 	dsb	sy
 800a3fc:	613b      	str	r3, [r7, #16]
}
 800a3fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a400:	4b1a      	ldr	r3, [pc, #104]	@ (800a46c <vTaskStartScheduler+0xe0>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	3354      	adds	r3, #84	@ 0x54
 800a406:	4a1a      	ldr	r2, [pc, #104]	@ (800a470 <vTaskStartScheduler+0xe4>)
 800a408:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a40a:	4b1a      	ldr	r3, [pc, #104]	@ (800a474 <vTaskStartScheduler+0xe8>)
 800a40c:	f04f 32ff 	mov.w	r2, #4294967295
 800a410:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a412:	4b19      	ldr	r3, [pc, #100]	@ (800a478 <vTaskStartScheduler+0xec>)
 800a414:	2201      	movs	r2, #1
 800a416:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a418:	4b18      	ldr	r3, [pc, #96]	@ (800a47c <vTaskStartScheduler+0xf0>)
 800a41a:	2200      	movs	r2, #0
 800a41c:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 800a41e:	4b13      	ldr	r3, [pc, #76]	@ (800a46c <vTaskStartScheduler+0xe0>)
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	4b12      	ldr	r3, [pc, #72]	@ (800a46c <vTaskStartScheduler+0xe0>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a428:	4619      	mov	r1, r3
 800a42a:	4610      	mov	r0, r2
 800a42c:	f7f8 fcf0 	bl	8002e10 <xTraceTaskSwitch>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a430:	f001 f9ee 	bl	800b810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a434:	e00f      	b.n	800a456 <vTaskStartScheduler+0xca>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a43c:	d10b      	bne.n	800a456 <vTaskStartScheduler+0xca>
	__asm volatile
 800a43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a442:	f383 8811 	msr	BASEPRI, r3
 800a446:	f3bf 8f6f 	isb	sy
 800a44a:	f3bf 8f4f 	dsb	sy
 800a44e:	60fb      	str	r3, [r7, #12]
}
 800a450:	bf00      	nop
 800a452:	bf00      	nop
 800a454:	e7fd      	b.n	800a452 <vTaskStartScheduler+0xc6>
}
 800a456:	bf00      	nop
 800a458:	3718      	adds	r7, #24
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	0800c440 	.word	0x0800c440
 800a464:	0800ab15 	.word	0x0800ab15
 800a468:	20003c58 	.word	0x20003c58
 800a46c:	20003760 	.word	0x20003760
 800a470:	20000010 	.word	0x20000010
 800a474:	20003c54 	.word	0x20003c54
 800a478:	20003c40 	.word	0x20003c40
 800a47c:	20003c38 	.word	0x20003c38

0800a480 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a480:	b480      	push	{r7}
 800a482:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a484:	4b04      	ldr	r3, [pc, #16]	@ (800a498 <vTaskSuspendAll+0x18>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	3301      	adds	r3, #1
 800a48a:	4a03      	ldr	r2, [pc, #12]	@ (800a498 <vTaskSuspendAll+0x18>)
 800a48c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a48e:	bf00      	nop
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr
 800a498:	20003c5c 	.word	0x20003c5c

0800a49c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a4aa:	4b45      	ldr	r3, [pc, #276]	@ (800a5c0 <xTaskResumeAll+0x124>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d10b      	bne.n	800a4ca <xTaskResumeAll+0x2e>
	__asm volatile
 800a4b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b6:	f383 8811 	msr	BASEPRI, r3
 800a4ba:	f3bf 8f6f 	isb	sy
 800a4be:	f3bf 8f4f 	dsb	sy
 800a4c2:	603b      	str	r3, [r7, #0]
}
 800a4c4:	bf00      	nop
 800a4c6:	bf00      	nop
 800a4c8:	e7fd      	b.n	800a4c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a4ca:	f001 fa57 	bl	800b97c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a4ce:	4b3c      	ldr	r3, [pc, #240]	@ (800a5c0 <xTaskResumeAll+0x124>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	3b01      	subs	r3, #1
 800a4d4:	4a3a      	ldr	r2, [pc, #232]	@ (800a5c0 <xTaskResumeAll+0x124>)
 800a4d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4d8:	4b39      	ldr	r3, [pc, #228]	@ (800a5c0 <xTaskResumeAll+0x124>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d167      	bne.n	800a5b0 <xTaskResumeAll+0x114>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a4e0:	4b38      	ldr	r3, [pc, #224]	@ (800a5c4 <xTaskResumeAll+0x128>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d063      	beq.n	800a5b0 <xTaskResumeAll+0x114>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a4e8:	e034      	b.n	800a554 <xTaskResumeAll+0xb8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4ea:	4b37      	ldr	r3, [pc, #220]	@ (800a5c8 <xTaskResumeAll+0x12c>)
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	3318      	adds	r3, #24
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7fe fd78 	bl	8008fec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	3304      	adds	r3, #4
 800a500:	4618      	mov	r0, r3
 800a502:	f7fe fd73 	bl	8008fec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	4619      	mov	r1, r3
 800a50a:	2030      	movs	r0, #48	@ 0x30
 800a50c:	f7f6 fcc8 	bl	8000ea0 <xTraceEventCreate1>
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a514:	4b2d      	ldr	r3, [pc, #180]	@ (800a5cc <xTaskResumeAll+0x130>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d903      	bls.n	800a524 <xTaskResumeAll+0x88>
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a520:	4a2a      	ldr	r2, [pc, #168]	@ (800a5cc <xTaskResumeAll+0x130>)
 800a522:	6013      	str	r3, [r2, #0]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a528:	4613      	mov	r3, r2
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	4413      	add	r3, r2
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	4a27      	ldr	r2, [pc, #156]	@ (800a5d0 <xTaskResumeAll+0x134>)
 800a532:	441a      	add	r2, r3
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	3304      	adds	r3, #4
 800a538:	4619      	mov	r1, r3
 800a53a:	4610      	mov	r0, r2
 800a53c:	f7fe fcf9 	bl	8008f32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a544:	4b23      	ldr	r3, [pc, #140]	@ (800a5d4 <xTaskResumeAll+0x138>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d302      	bcc.n	800a554 <xTaskResumeAll+0xb8>
					{
						xYieldPending = pdTRUE;
 800a54e:	4b22      	ldr	r3, [pc, #136]	@ (800a5d8 <xTaskResumeAll+0x13c>)
 800a550:	2201      	movs	r2, #1
 800a552:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a554:	4b1c      	ldr	r3, [pc, #112]	@ (800a5c8 <xTaskResumeAll+0x12c>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d1c6      	bne.n	800a4ea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d001      	beq.n	800a566 <xTaskResumeAll+0xca>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a562:	f000 fbcb 	bl	800acfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a566:	4b1d      	ldr	r3, [pc, #116]	@ (800a5dc <xTaskResumeAll+0x140>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d010      	beq.n	800a594 <xTaskResumeAll+0xf8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a572:	f000 f847 	bl	800a604 <xTaskIncrementTick>
 800a576:	4603      	mov	r3, r0
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d002      	beq.n	800a582 <xTaskResumeAll+0xe6>
							{
								xYieldPending = pdTRUE;
 800a57c:	4b16      	ldr	r3, [pc, #88]	@ (800a5d8 <xTaskResumeAll+0x13c>)
 800a57e:	2201      	movs	r2, #1
 800a580:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	3b01      	subs	r3, #1
 800a586:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d1f1      	bne.n	800a572 <xTaskResumeAll+0xd6>

						xPendedTicks = 0;
 800a58e:	4b13      	ldr	r3, [pc, #76]	@ (800a5dc <xTaskResumeAll+0x140>)
 800a590:	2200      	movs	r2, #0
 800a592:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a594:	4b10      	ldr	r3, [pc, #64]	@ (800a5d8 <xTaskResumeAll+0x13c>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d009      	beq.n	800a5b0 <xTaskResumeAll+0x114>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a59c:	2301      	movs	r3, #1
 800a59e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a5a0:	4b0f      	ldr	r3, [pc, #60]	@ (800a5e0 <xTaskResumeAll+0x144>)
 800a5a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5a6:	601a      	str	r2, [r3, #0]
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a5b0:	f001 fa16 	bl	800b9e0 <vPortExitCritical>

	return xAlreadyYielded;
 800a5b4:	68bb      	ldr	r3, [r7, #8]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	20003c5c 	.word	0x20003c5c
 800a5c4:	20003c34 	.word	0x20003c34
 800a5c8:	20003bf4 	.word	0x20003bf4
 800a5cc:	20003c3c 	.word	0x20003c3c
 800a5d0:	20003764 	.word	0x20003764
 800a5d4:	20003760 	.word	0x20003760
 800a5d8:	20003c48 	.word	0x20003c48
 800a5dc:	20003c44 	.word	0x20003c44
 800a5e0:	e000ed04 	.word	0xe000ed04

0800a5e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a5ea:	4b05      	ldr	r3, [pc, #20]	@ (800a600 <xTaskGetTickCount+0x1c>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a5f0:	687b      	ldr	r3, [r7, #4]
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	370c      	adds	r7, #12
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	20003c38 	.word	0x20003c38

0800a604 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b086      	sub	sp, #24
 800a608:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a60a:	2300      	movs	r3, #0
 800a60c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 800a60e:	4b59      	ldr	r3, [pc, #356]	@ (800a774 <xTaskIncrementTick+0x170>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	2b01      	cmp	r3, #1
 800a614:	d003      	beq.n	800a61e <xTaskIncrementTick+0x1a>
 800a616:	4b58      	ldr	r3, [pc, #352]	@ (800a778 <xTaskIncrementTick+0x174>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d105      	bne.n	800a62a <xTaskIncrementTick+0x26>
 800a61e:	4b57      	ldr	r3, [pc, #348]	@ (800a77c <xTaskIncrementTick+0x178>)
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	4b57      	ldr	r3, [pc, #348]	@ (800a780 <xTaskIncrementTick+0x17c>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	3201      	adds	r2, #1
 800a628:	619a      	str	r2, [r3, #24]
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a62a:	4b52      	ldr	r3, [pc, #328]	@ (800a774 <xTaskIncrementTick+0x170>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	f040 8095 	bne.w	800a75e <xTaskIncrementTick+0x15a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a634:	4b51      	ldr	r3, [pc, #324]	@ (800a77c <xTaskIncrementTick+0x178>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	3301      	adds	r3, #1
 800a63a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a63c:	4a4f      	ldr	r2, [pc, #316]	@ (800a77c <xTaskIncrementTick+0x178>)
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d121      	bne.n	800a68c <xTaskIncrementTick+0x88>
		{
			taskSWITCH_DELAYED_LISTS();
 800a648:	4b4e      	ldr	r3, [pc, #312]	@ (800a784 <xTaskIncrementTick+0x180>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00b      	beq.n	800a66a <xTaskIncrementTick+0x66>
	__asm volatile
 800a652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a656:	f383 8811 	msr	BASEPRI, r3
 800a65a:	f3bf 8f6f 	isb	sy
 800a65e:	f3bf 8f4f 	dsb	sy
 800a662:	603b      	str	r3, [r7, #0]
}
 800a664:	bf00      	nop
 800a666:	bf00      	nop
 800a668:	e7fd      	b.n	800a666 <xTaskIncrementTick+0x62>
 800a66a:	4b46      	ldr	r3, [pc, #280]	@ (800a784 <xTaskIncrementTick+0x180>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	60fb      	str	r3, [r7, #12]
 800a670:	4b45      	ldr	r3, [pc, #276]	@ (800a788 <xTaskIncrementTick+0x184>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a43      	ldr	r2, [pc, #268]	@ (800a784 <xTaskIncrementTick+0x180>)
 800a676:	6013      	str	r3, [r2, #0]
 800a678:	4a43      	ldr	r2, [pc, #268]	@ (800a788 <xTaskIncrementTick+0x184>)
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	6013      	str	r3, [r2, #0]
 800a67e:	4b43      	ldr	r3, [pc, #268]	@ (800a78c <xTaskIncrementTick+0x188>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	3301      	adds	r3, #1
 800a684:	4a41      	ldr	r2, [pc, #260]	@ (800a78c <xTaskIncrementTick+0x188>)
 800a686:	6013      	str	r3, [r2, #0]
 800a688:	f000 fb38 	bl	800acfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a68c:	4b40      	ldr	r3, [pc, #256]	@ (800a790 <xTaskIncrementTick+0x18c>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	693a      	ldr	r2, [r7, #16]
 800a692:	429a      	cmp	r2, r3
 800a694:	d34e      	bcc.n	800a734 <xTaskIncrementTick+0x130>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a696:	4b3b      	ldr	r3, [pc, #236]	@ (800a784 <xTaskIncrementTick+0x180>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d104      	bne.n	800a6aa <xTaskIncrementTick+0xa6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6a0:	4b3b      	ldr	r3, [pc, #236]	@ (800a790 <xTaskIncrementTick+0x18c>)
 800a6a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a6a6:	601a      	str	r2, [r3, #0]
					break;
 800a6a8:	e044      	b.n	800a734 <xTaskIncrementTick+0x130>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6aa:	4b36      	ldr	r3, [pc, #216]	@ (800a784 <xTaskIncrementTick+0x180>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	68db      	ldr	r3, [r3, #12]
 800a6b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a6ba:	693a      	ldr	r2, [r7, #16]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d203      	bcs.n	800a6ca <xTaskIncrementTick+0xc6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a6c2:	4a33      	ldr	r2, [pc, #204]	@ (800a790 <xTaskIncrementTick+0x18c>)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a6c8:	e034      	b.n	800a734 <xTaskIncrementTick+0x130>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	3304      	adds	r3, #4
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fe fc8c 	bl	8008fec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d004      	beq.n	800a6e6 <xTaskIncrementTick+0xe2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	3318      	adds	r3, #24
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7fe fc83 	bl	8008fec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	2030      	movs	r0, #48	@ 0x30
 800a6ec:	f7f6 fbd8 	bl	8000ea0 <xTraceEventCreate1>
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6f4:	4b27      	ldr	r3, [pc, #156]	@ (800a794 <xTaskIncrementTick+0x190>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d903      	bls.n	800a704 <xTaskIncrementTick+0x100>
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a700:	4a24      	ldr	r2, [pc, #144]	@ (800a794 <xTaskIncrementTick+0x190>)
 800a702:	6013      	str	r3, [r2, #0]
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a708:	4613      	mov	r3, r2
 800a70a:	009b      	lsls	r3, r3, #2
 800a70c:	4413      	add	r3, r2
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	4a21      	ldr	r2, [pc, #132]	@ (800a798 <xTaskIncrementTick+0x194>)
 800a712:	441a      	add	r2, r3
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	3304      	adds	r3, #4
 800a718:	4619      	mov	r1, r3
 800a71a:	4610      	mov	r0, r2
 800a71c:	f7fe fc09 	bl	8008f32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a724:	4b1d      	ldr	r3, [pc, #116]	@ (800a79c <xTaskIncrementTick+0x198>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d3b3      	bcc.n	800a696 <xTaskIncrementTick+0x92>
						{
							xSwitchRequired = pdTRUE;
 800a72e:	2301      	movs	r3, #1
 800a730:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a732:	e7b0      	b.n	800a696 <xTaskIncrementTick+0x92>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a734:	4b19      	ldr	r3, [pc, #100]	@ (800a79c <xTaskIncrementTick+0x198>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a73a:	4917      	ldr	r1, [pc, #92]	@ (800a798 <xTaskIncrementTick+0x194>)
 800a73c:	4613      	mov	r3, r2
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	4413      	add	r3, r2
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	440b      	add	r3, r1
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d901      	bls.n	800a750 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 800a74c:	2301      	movs	r3, #1
 800a74e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a750:	4b13      	ldr	r3, [pc, #76]	@ (800a7a0 <xTaskIncrementTick+0x19c>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d007      	beq.n	800a768 <xTaskIncrementTick+0x164>
			{
				xSwitchRequired = pdTRUE;
 800a758:	2301      	movs	r3, #1
 800a75a:	617b      	str	r3, [r7, #20]
 800a75c:	e004      	b.n	800a768 <xTaskIncrementTick+0x164>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a75e:	4b06      	ldr	r3, [pc, #24]	@ (800a778 <xTaskIncrementTick+0x174>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	3301      	adds	r3, #1
 800a764:	4a04      	ldr	r2, [pc, #16]	@ (800a778 <xTaskIncrementTick+0x174>)
 800a766:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a768:	697b      	ldr	r3, [r7, #20]
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3718      	adds	r7, #24
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	20003c5c 	.word	0x20003c5c
 800a778:	20003c44 	.word	0x20003c44
 800a77c:	20003c38 	.word	0x20003c38
 800a780:	20001ef4 	.word	0x20001ef4
 800a784:	20003bec 	.word	0x20003bec
 800a788:	20003bf0 	.word	0x20003bf0
 800a78c:	20003c4c 	.word	0x20003c4c
 800a790:	20003c54 	.word	0x20003c54
 800a794:	20003c3c 	.word	0x20003c3c
 800a798:	20003764 	.word	0x20003764
 800a79c:	20003760 	.word	0x20003760
 800a7a0:	20003c48 	.word	0x20003c48

0800a7a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a7aa:	4b2e      	ldr	r3, [pc, #184]	@ (800a864 <vTaskSwitchContext+0xc0>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d003      	beq.n	800a7ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a7b2:	4b2d      	ldr	r3, [pc, #180]	@ (800a868 <vTaskSwitchContext+0xc4>)
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a7b8:	e050      	b.n	800a85c <vTaskSwitchContext+0xb8>
		xYieldPending = pdFALSE;
 800a7ba:	4b2b      	ldr	r3, [pc, #172]	@ (800a868 <vTaskSwitchContext+0xc4>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7c0:	4b2a      	ldr	r3, [pc, #168]	@ (800a86c <vTaskSwitchContext+0xc8>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	60fb      	str	r3, [r7, #12]
 800a7c6:	e011      	b.n	800a7ec <vTaskSwitchContext+0x48>
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d10b      	bne.n	800a7e6 <vTaskSwitchContext+0x42>
	__asm volatile
 800a7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	607b      	str	r3, [r7, #4]
}
 800a7e0:	bf00      	nop
 800a7e2:	bf00      	nop
 800a7e4:	e7fd      	b.n	800a7e2 <vTaskSwitchContext+0x3e>
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	60fb      	str	r3, [r7, #12]
 800a7ec:	4920      	ldr	r1, [pc, #128]	@ (800a870 <vTaskSwitchContext+0xcc>)
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	4613      	mov	r3, r2
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	4413      	add	r3, r2
 800a7f6:	009b      	lsls	r3, r3, #2
 800a7f8:	440b      	add	r3, r1
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d0e3      	beq.n	800a7c8 <vTaskSwitchContext+0x24>
 800a800:	68fa      	ldr	r2, [r7, #12]
 800a802:	4613      	mov	r3, r2
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	4413      	add	r3, r2
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	4a19      	ldr	r2, [pc, #100]	@ (800a870 <vTaskSwitchContext+0xcc>)
 800a80c:	4413      	add	r3, r2
 800a80e:	60bb      	str	r3, [r7, #8]
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	685a      	ldr	r2, [r3, #4]
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	605a      	str	r2, [r3, #4]
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	685a      	ldr	r2, [r3, #4]
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	3308      	adds	r3, #8
 800a822:	429a      	cmp	r2, r3
 800a824:	d104      	bne.n	800a830 <vTaskSwitchContext+0x8c>
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	685a      	ldr	r2, [r3, #4]
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	605a      	str	r2, [r3, #4]
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	4a0f      	ldr	r2, [pc, #60]	@ (800a874 <vTaskSwitchContext+0xd0>)
 800a838:	6013      	str	r3, [r2, #0]
 800a83a:	4a0c      	ldr	r2, [pc, #48]	@ (800a86c <vTaskSwitchContext+0xc8>)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800a840:	4b0c      	ldr	r3, [pc, #48]	@ (800a874 <vTaskSwitchContext+0xd0>)
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	4b0b      	ldr	r3, [pc, #44]	@ (800a874 <vTaskSwitchContext+0xd0>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a84a:	4619      	mov	r1, r3
 800a84c:	4610      	mov	r0, r2
 800a84e:	f7f8 fadf 	bl	8002e10 <xTraceTaskSwitch>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a852:	4b08      	ldr	r3, [pc, #32]	@ (800a874 <vTaskSwitchContext+0xd0>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	3354      	adds	r3, #84	@ 0x54
 800a858:	4a07      	ldr	r2, [pc, #28]	@ (800a878 <vTaskSwitchContext+0xd4>)
 800a85a:	6013      	str	r3, [r2, #0]
}
 800a85c:	bf00      	nop
 800a85e:	3710      	adds	r7, #16
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	20003c5c 	.word	0x20003c5c
 800a868:	20003c48 	.word	0x20003c48
 800a86c:	20003c3c 	.word	0x20003c3c
 800a870:	20003764 	.word	0x20003764
 800a874:	20003760 	.word	0x20003760
 800a878:	20000010 	.word	0x20000010

0800a87c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d10b      	bne.n	800a8a4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a88c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a890:	f383 8811 	msr	BASEPRI, r3
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	f3bf 8f4f 	dsb	sy
 800a89c:	60fb      	str	r3, [r7, #12]
}
 800a89e:	bf00      	nop
 800a8a0:	bf00      	nop
 800a8a2:	e7fd      	b.n	800a8a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a8a4:	4b07      	ldr	r3, [pc, #28]	@ (800a8c4 <vTaskPlaceOnEventList+0x48>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	3318      	adds	r3, #24
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f7fe fb64 	bl	8008f7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a8b2:	2101      	movs	r1, #1
 800a8b4:	6838      	ldr	r0, [r7, #0]
 800a8b6:	f000 fadb 	bl	800ae70 <prvAddCurrentTaskToDelayedList>
}
 800a8ba:	bf00      	nop
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	20003760 	.word	0x20003760

0800a8c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b086      	sub	sp, #24
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d10b      	bne.n	800a8f2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a8da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8de:	f383 8811 	msr	BASEPRI, r3
 800a8e2:	f3bf 8f6f 	isb	sy
 800a8e6:	f3bf 8f4f 	dsb	sy
 800a8ea:	617b      	str	r3, [r7, #20]
}
 800a8ec:	bf00      	nop
 800a8ee:	bf00      	nop
 800a8f0:	e7fd      	b.n	800a8ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a8f2:	4b0e      	ldr	r3, [pc, #56]	@ (800a92c <vTaskPlaceOnEventListRestricted+0x64>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	3318      	adds	r3, #24
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	68f8      	ldr	r0, [r7, #12]
 800a8fc:	f7fe fb19 	bl	8008f32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d002      	beq.n	800a90c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a906:	f04f 33ff 	mov.w	r3, #4294967295
 800a90a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800a90c:	4b08      	ldr	r3, [pc, #32]	@ (800a930 <vTaskPlaceOnEventListRestricted+0x68>)
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	4413      	add	r3, r2
 800a914:	4619      	mov	r1, r3
 800a916:	2079      	movs	r0, #121	@ 0x79
 800a918:	f7f6 fac2 	bl	8000ea0 <xTraceEventCreate1>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a91c:	6879      	ldr	r1, [r7, #4]
 800a91e:	68b8      	ldr	r0, [r7, #8]
 800a920:	f000 faa6 	bl	800ae70 <prvAddCurrentTaskToDelayedList>
	}
 800a924:	bf00      	nop
 800a926:	3718      	adds	r7, #24
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	20003760 	.word	0x20003760
 800a930:	20003c38 	.word	0x20003c38

0800a934 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b086      	sub	sp, #24
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d10b      	bne.n	800a962 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a94a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a94e:	f383 8811 	msr	BASEPRI, r3
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	60fb      	str	r3, [r7, #12]
}
 800a95c:	bf00      	nop
 800a95e:	bf00      	nop
 800a960:	e7fd      	b.n	800a95e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	3318      	adds	r3, #24
 800a966:	4618      	mov	r0, r3
 800a968:	f7fe fb40 	bl	8008fec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a96c:	4b20      	ldr	r3, [pc, #128]	@ (800a9f0 <xTaskRemoveFromEventList+0xbc>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d122      	bne.n	800a9ba <xTaskRemoveFromEventList+0x86>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	3304      	adds	r3, #4
 800a978:	4618      	mov	r0, r3
 800a97a:	f7fe fb37 	bl	8008fec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	4619      	mov	r1, r3
 800a982:	2030      	movs	r0, #48	@ 0x30
 800a984:	f7f6 fa8c 	bl	8000ea0 <xTraceEventCreate1>
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a98c:	4b19      	ldr	r3, [pc, #100]	@ (800a9f4 <xTaskRemoveFromEventList+0xc0>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	429a      	cmp	r2, r3
 800a992:	d903      	bls.n	800a99c <xTaskRemoveFromEventList+0x68>
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a998:	4a16      	ldr	r2, [pc, #88]	@ (800a9f4 <xTaskRemoveFromEventList+0xc0>)
 800a99a:	6013      	str	r3, [r2, #0]
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9a0:	4613      	mov	r3, r2
 800a9a2:	009b      	lsls	r3, r3, #2
 800a9a4:	4413      	add	r3, r2
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	4a13      	ldr	r2, [pc, #76]	@ (800a9f8 <xTaskRemoveFromEventList+0xc4>)
 800a9aa:	441a      	add	r2, r3
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	3304      	adds	r3, #4
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	4610      	mov	r0, r2
 800a9b4:	f7fe fabd 	bl	8008f32 <vListInsertEnd>
 800a9b8:	e005      	b.n	800a9c6 <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	3318      	adds	r3, #24
 800a9be:	4619      	mov	r1, r3
 800a9c0:	480e      	ldr	r0, [pc, #56]	@ (800a9fc <xTaskRemoveFromEventList+0xc8>)
 800a9c2:	f7fe fab6 	bl	8008f32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9ca:	4b0d      	ldr	r3, [pc, #52]	@ (800aa00 <xTaskRemoveFromEventList+0xcc>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d905      	bls.n	800a9e0 <xTaskRemoveFromEventList+0xac>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a9d8:	4b0a      	ldr	r3, [pc, #40]	@ (800aa04 <xTaskRemoveFromEventList+0xd0>)
 800a9da:	2201      	movs	r2, #1
 800a9dc:	601a      	str	r2, [r3, #0]
 800a9de:	e001      	b.n	800a9e4 <xTaskRemoveFromEventList+0xb0>
	}
	else
	{
		xReturn = pdFALSE;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a9e4:	697b      	ldr	r3, [r7, #20]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3718      	adds	r7, #24
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	20003c5c 	.word	0x20003c5c
 800a9f4:	20003c3c 	.word	0x20003c3c
 800a9f8:	20003764 	.word	0x20003764
 800a9fc:	20003bf4 	.word	0x20003bf4
 800aa00:	20003760 	.word	0x20003760
 800aa04:	20003c48 	.word	0x20003c48

0800aa08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aa10:	4b06      	ldr	r3, [pc, #24]	@ (800aa2c <vTaskInternalSetTimeOutState+0x24>)
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aa18:	4b05      	ldr	r3, [pc, #20]	@ (800aa30 <vTaskInternalSetTimeOutState+0x28>)
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	605a      	str	r2, [r3, #4]
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr
 800aa2c:	20003c4c 	.word	0x20003c4c
 800aa30:	20003c38 	.word	0x20003c38

0800aa34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b088      	sub	sp, #32
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d10b      	bne.n	800aa5c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800aa44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa48:	f383 8811 	msr	BASEPRI, r3
 800aa4c:	f3bf 8f6f 	isb	sy
 800aa50:	f3bf 8f4f 	dsb	sy
 800aa54:	613b      	str	r3, [r7, #16]
}
 800aa56:	bf00      	nop
 800aa58:	bf00      	nop
 800aa5a:	e7fd      	b.n	800aa58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d10b      	bne.n	800aa7a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800aa62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa66:	f383 8811 	msr	BASEPRI, r3
 800aa6a:	f3bf 8f6f 	isb	sy
 800aa6e:	f3bf 8f4f 	dsb	sy
 800aa72:	60fb      	str	r3, [r7, #12]
}
 800aa74:	bf00      	nop
 800aa76:	bf00      	nop
 800aa78:	e7fd      	b.n	800aa76 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800aa7a:	f000 ff7f 	bl	800b97c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aa7e:	4b1d      	ldr	r3, [pc, #116]	@ (800aaf4 <xTaskCheckForTimeOut+0xc0>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	69ba      	ldr	r2, [r7, #24]
 800aa8a:	1ad3      	subs	r3, r2, r3
 800aa8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa96:	d102      	bne.n	800aa9e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	61fb      	str	r3, [r7, #28]
 800aa9c:	e023      	b.n	800aae6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	4b15      	ldr	r3, [pc, #84]	@ (800aaf8 <xTaskCheckForTimeOut+0xc4>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d007      	beq.n	800aaba <xTaskCheckForTimeOut+0x86>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	69ba      	ldr	r2, [r7, #24]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d302      	bcc.n	800aaba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aab4:	2301      	movs	r3, #1
 800aab6:	61fb      	str	r3, [r7, #28]
 800aab8:	e015      	b.n	800aae6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	697a      	ldr	r2, [r7, #20]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d20b      	bcs.n	800aadc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	1ad2      	subs	r2, r2, r3
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f7ff ff99 	bl	800aa08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aad6:	2300      	movs	r3, #0
 800aad8:	61fb      	str	r3, [r7, #28]
 800aada:	e004      	b.n	800aae6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	2200      	movs	r2, #0
 800aae0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aae2:	2301      	movs	r3, #1
 800aae4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aae6:	f000 ff7b 	bl	800b9e0 <vPortExitCritical>

	return xReturn;
 800aaea:	69fb      	ldr	r3, [r7, #28]
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3720      	adds	r7, #32
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	20003c38 	.word	0x20003c38
 800aaf8:	20003c4c 	.word	0x20003c4c

0800aafc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aafc:	b480      	push	{r7}
 800aafe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ab00:	4b03      	ldr	r3, [pc, #12]	@ (800ab10 <vTaskMissedYield+0x14>)
 800ab02:	2201      	movs	r2, #1
 800ab04:	601a      	str	r2, [r3, #0]
}
 800ab06:	bf00      	nop
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr
 800ab10:	20003c48 	.word	0x20003c48

0800ab14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ab1c:	f000 f852 	bl	800abc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ab20:	4b06      	ldr	r3, [pc, #24]	@ (800ab3c <prvIdleTask+0x28>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d9f9      	bls.n	800ab1c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ab28:	4b05      	ldr	r3, [pc, #20]	@ (800ab40 <prvIdleTask+0x2c>)
 800ab2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab2e:	601a      	str	r2, [r3, #0]
 800ab30:	f3bf 8f4f 	dsb	sy
 800ab34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ab38:	e7f0      	b.n	800ab1c <prvIdleTask+0x8>
 800ab3a:	bf00      	nop
 800ab3c:	20003764 	.word	0x20003764
 800ab40:	e000ed04 	.word	0xe000ed04

0800ab44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	607b      	str	r3, [r7, #4]
 800ab4e:	e00c      	b.n	800ab6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	4613      	mov	r3, r2
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	4413      	add	r3, r2
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	4a12      	ldr	r2, [pc, #72]	@ (800aba4 <prvInitialiseTaskLists+0x60>)
 800ab5c:	4413      	add	r3, r2
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fe f9ba 	bl	8008ed8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	3301      	adds	r3, #1
 800ab68:	607b      	str	r3, [r7, #4]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2b37      	cmp	r3, #55	@ 0x37
 800ab6e:	d9ef      	bls.n	800ab50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ab70:	480d      	ldr	r0, [pc, #52]	@ (800aba8 <prvInitialiseTaskLists+0x64>)
 800ab72:	f7fe f9b1 	bl	8008ed8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ab76:	480d      	ldr	r0, [pc, #52]	@ (800abac <prvInitialiseTaskLists+0x68>)
 800ab78:	f7fe f9ae 	bl	8008ed8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ab7c:	480c      	ldr	r0, [pc, #48]	@ (800abb0 <prvInitialiseTaskLists+0x6c>)
 800ab7e:	f7fe f9ab 	bl	8008ed8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ab82:	480c      	ldr	r0, [pc, #48]	@ (800abb4 <prvInitialiseTaskLists+0x70>)
 800ab84:	f7fe f9a8 	bl	8008ed8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ab88:	480b      	ldr	r0, [pc, #44]	@ (800abb8 <prvInitialiseTaskLists+0x74>)
 800ab8a:	f7fe f9a5 	bl	8008ed8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ab8e:	4b0b      	ldr	r3, [pc, #44]	@ (800abbc <prvInitialiseTaskLists+0x78>)
 800ab90:	4a05      	ldr	r2, [pc, #20]	@ (800aba8 <prvInitialiseTaskLists+0x64>)
 800ab92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ab94:	4b0a      	ldr	r3, [pc, #40]	@ (800abc0 <prvInitialiseTaskLists+0x7c>)
 800ab96:	4a05      	ldr	r2, [pc, #20]	@ (800abac <prvInitialiseTaskLists+0x68>)
 800ab98:	601a      	str	r2, [r3, #0]
}
 800ab9a:	bf00      	nop
 800ab9c:	3708      	adds	r7, #8
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	20003764 	.word	0x20003764
 800aba8:	20003bc4 	.word	0x20003bc4
 800abac:	20003bd8 	.word	0x20003bd8
 800abb0:	20003bf4 	.word	0x20003bf4
 800abb4:	20003c08 	.word	0x20003c08
 800abb8:	20003c20 	.word	0x20003c20
 800abbc:	20003bec 	.word	0x20003bec
 800abc0:	20003bf0 	.word	0x20003bf0

0800abc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800abca:	e019      	b.n	800ac00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800abcc:	f000 fed6 	bl	800b97c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abd0:	4b10      	ldr	r3, [pc, #64]	@ (800ac14 <prvCheckTasksWaitingTermination+0x50>)
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	68db      	ldr	r3, [r3, #12]
 800abd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	3304      	adds	r3, #4
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fe fa05 	bl	8008fec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800abe2:	4b0d      	ldr	r3, [pc, #52]	@ (800ac18 <prvCheckTasksWaitingTermination+0x54>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	3b01      	subs	r3, #1
 800abe8:	4a0b      	ldr	r2, [pc, #44]	@ (800ac18 <prvCheckTasksWaitingTermination+0x54>)
 800abea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800abec:	4b0b      	ldr	r3, [pc, #44]	@ (800ac1c <prvCheckTasksWaitingTermination+0x58>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	3b01      	subs	r3, #1
 800abf2:	4a0a      	ldr	r2, [pc, #40]	@ (800ac1c <prvCheckTasksWaitingTermination+0x58>)
 800abf4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800abf6:	f000 fef3 	bl	800b9e0 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 f848 	bl	800ac90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac00:	4b06      	ldr	r3, [pc, #24]	@ (800ac1c <prvCheckTasksWaitingTermination+0x58>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d1e1      	bne.n	800abcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ac08:	bf00      	nop
 800ac0a:	bf00      	nop
 800ac0c:	3708      	adds	r7, #8
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	20003c08 	.word	0x20003c08
 800ac18:	20003c34 	.word	0x20003c34
 800ac1c:	20003c1c 	.word	0x20003c1c

0800ac20 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800ac20:	b480      	push	{r7}
 800ac22:	b085      	sub	sp, #20
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ac2c:	e005      	b.n	800ac3a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	3301      	adds	r3, #1
 800ac32:	607b      	str	r3, [r7, #4]
			ulCount++;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	3301      	adds	r3, #1
 800ac38:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	2ba5      	cmp	r3, #165	@ 0xa5
 800ac40:	d0f5      	beq.n	800ac2e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	089b      	lsrs	r3, r3, #2
 800ac46:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	b29b      	uxth	r3, r3
	}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3714      	adds	r7, #20
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b086      	sub	sp, #24
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d102      	bne.n	800ac6c <uxTaskGetStackHighWaterMark+0x14>
 800ac66:	4b09      	ldr	r3, [pc, #36]	@ (800ac8c <uxTaskGetStackHighWaterMark+0x34>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	e000      	b.n	800ac6e <uxTaskGetStackHighWaterMark+0x16>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac74:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800ac76:	6938      	ldr	r0, [r7, #16]
 800ac78:	f7ff ffd2 	bl	800ac20 <prvTaskCheckFreeStackSpace>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800ac80:	68fb      	ldr	r3, [r7, #12]
	}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3718      	adds	r7, #24
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	20003760 	.word	0x20003760

0800ac90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	3354      	adds	r3, #84	@ 0x54
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f001 f9b9 	bl	800c014 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d108      	bne.n	800acbe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acb0:	4618      	mov	r0, r3
 800acb2:	f001 f871 	bl	800bd98 <vPortFree>
				vPortFree( pxTCB );
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f001 f86e 	bl	800bd98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800acbc:	e019      	b.n	800acf2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d103      	bne.n	800acd0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f001 f865 	bl	800bd98 <vPortFree>
	}
 800acce:	e010      	b.n	800acf2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800acd6:	2b02      	cmp	r3, #2
 800acd8:	d00b      	beq.n	800acf2 <prvDeleteTCB+0x62>
	__asm volatile
 800acda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acde:	f383 8811 	msr	BASEPRI, r3
 800ace2:	f3bf 8f6f 	isb	sy
 800ace6:	f3bf 8f4f 	dsb	sy
 800acea:	60fb      	str	r3, [r7, #12]
}
 800acec:	bf00      	nop
 800acee:	bf00      	nop
 800acf0:	e7fd      	b.n	800acee <prvDeleteTCB+0x5e>
	}
 800acf2:	bf00      	nop
 800acf4:	3710      	adds	r7, #16
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
	...

0800acfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad02:	4b0c      	ldr	r3, [pc, #48]	@ (800ad34 <prvResetNextTaskUnblockTime+0x38>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d104      	bne.n	800ad16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ad38 <prvResetNextTaskUnblockTime+0x3c>)
 800ad0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ad14:	e008      	b.n	800ad28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad16:	4b07      	ldr	r3, [pc, #28]	@ (800ad34 <prvResetNextTaskUnblockTime+0x38>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	68db      	ldr	r3, [r3, #12]
 800ad1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	4a04      	ldr	r2, [pc, #16]	@ (800ad38 <prvResetNextTaskUnblockTime+0x3c>)
 800ad26:	6013      	str	r3, [r2, #0]
}
 800ad28:	bf00      	nop
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr
 800ad34:	20003bec 	.word	0x20003bec
 800ad38:	20003c54 	.word	0x20003c54

0800ad3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ad42:	4b0b      	ldr	r3, [pc, #44]	@ (800ad70 <xTaskGetSchedulerState+0x34>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d102      	bne.n	800ad50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	607b      	str	r3, [r7, #4]
 800ad4e:	e008      	b.n	800ad62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad50:	4b08      	ldr	r3, [pc, #32]	@ (800ad74 <xTaskGetSchedulerState+0x38>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d102      	bne.n	800ad5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ad58:	2302      	movs	r3, #2
 800ad5a:	607b      	str	r3, [r7, #4]
 800ad5c:	e001      	b.n	800ad62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ad62:	687b      	ldr	r3, [r7, #4]
	}
 800ad64:	4618      	mov	r0, r3
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr
 800ad70:	20003c40 	.word	0x20003c40
 800ad74:	20003c5c 	.word	0x20003c5c

0800ad78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b086      	sub	sp, #24
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ad84:	2300      	movs	r3, #0
 800ad86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d064      	beq.n	800ae58 <xTaskPriorityDisinherit+0xe0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ad8e:	4b35      	ldr	r3, [pc, #212]	@ (800ae64 <xTaskPriorityDisinherit+0xec>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	693a      	ldr	r2, [r7, #16]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d00b      	beq.n	800adb0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ad98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad9c:	f383 8811 	msr	BASEPRI, r3
 800ada0:	f3bf 8f6f 	isb	sy
 800ada4:	f3bf 8f4f 	dsb	sy
 800ada8:	60fb      	str	r3, [r7, #12]
}
 800adaa:	bf00      	nop
 800adac:	bf00      	nop
 800adae:	e7fd      	b.n	800adac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d10b      	bne.n	800add0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800adb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adbc:	f383 8811 	msr	BASEPRI, r3
 800adc0:	f3bf 8f6f 	isb	sy
 800adc4:	f3bf 8f4f 	dsb	sy
 800adc8:	60bb      	str	r3, [r7, #8]
}
 800adca:	bf00      	nop
 800adcc:	bf00      	nop
 800adce:	e7fd      	b.n	800adcc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800add4:	1e5a      	subs	r2, r3, #1
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d038      	beq.n	800ae58 <xTaskPriorityDisinherit+0xe0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adea:	2b00      	cmp	r3, #0
 800adec:	d134      	bne.n	800ae58 <xTaskPriorityDisinherit+0xe0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	3304      	adds	r3, #4
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fe f8fa 	bl	8008fec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800adf8:	6939      	ldr	r1, [r7, #16]
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800adfe:	461a      	mov	r2, r3
 800ae00:	2006      	movs	r0, #6
 800ae02:	f7f6 f8cd 	bl	8000fa0 <xTraceEventCreate2>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae12:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	2030      	movs	r0, #48	@ 0x30
 800ae20:	f7f6 f83e 	bl	8000ea0 <xTraceEventCreate1>
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae28:	4b0f      	ldr	r3, [pc, #60]	@ (800ae68 <xTaskPriorityDisinherit+0xf0>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d903      	bls.n	800ae38 <xTaskPriorityDisinherit+0xc0>
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae34:	4a0c      	ldr	r2, [pc, #48]	@ (800ae68 <xTaskPriorityDisinherit+0xf0>)
 800ae36:	6013      	str	r3, [r2, #0]
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	4413      	add	r3, r2
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	4a09      	ldr	r2, [pc, #36]	@ (800ae6c <xTaskPriorityDisinherit+0xf4>)
 800ae46:	441a      	add	r2, r3
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	3304      	adds	r3, #4
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	4610      	mov	r0, r2
 800ae50:	f7fe f86f 	bl	8008f32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ae54:	2301      	movs	r3, #1
 800ae56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ae58:	697b      	ldr	r3, [r7, #20]
	}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3718      	adds	r7, #24
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	20003760 	.word	0x20003760
 800ae68:	20003c3c 	.word	0x20003c3c
 800ae6c:	20003764 	.word	0x20003764

0800ae70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ae7a:	4b21      	ldr	r3, [pc, #132]	@ (800af00 <prvAddCurrentTaskToDelayedList+0x90>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae80:	4b20      	ldr	r3, [pc, #128]	@ (800af04 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	3304      	adds	r3, #4
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7fe f8b0 	bl	8008fec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae92:	d10a      	bne.n	800aeaa <prvAddCurrentTaskToDelayedList+0x3a>
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d007      	beq.n	800aeaa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae9a:	4b1a      	ldr	r3, [pc, #104]	@ (800af04 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	3304      	adds	r3, #4
 800aea0:	4619      	mov	r1, r3
 800aea2:	4819      	ldr	r0, [pc, #100]	@ (800af08 <prvAddCurrentTaskToDelayedList+0x98>)
 800aea4:	f7fe f845 	bl	8008f32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aea8:	e026      	b.n	800aef8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aeaa:	68fa      	ldr	r2, [r7, #12]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	4413      	add	r3, r2
 800aeb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aeb2:	4b14      	ldr	r3, [pc, #80]	@ (800af04 <prvAddCurrentTaskToDelayedList+0x94>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	68ba      	ldr	r2, [r7, #8]
 800aeb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d209      	bcs.n	800aed6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aec2:	4b12      	ldr	r3, [pc, #72]	@ (800af0c <prvAddCurrentTaskToDelayedList+0x9c>)
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	4b0f      	ldr	r3, [pc, #60]	@ (800af04 <prvAddCurrentTaskToDelayedList+0x94>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	3304      	adds	r3, #4
 800aecc:	4619      	mov	r1, r3
 800aece:	4610      	mov	r0, r2
 800aed0:	f7fe f853 	bl	8008f7a <vListInsert>
}
 800aed4:	e010      	b.n	800aef8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aed6:	4b0e      	ldr	r3, [pc, #56]	@ (800af10 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	4b0a      	ldr	r3, [pc, #40]	@ (800af04 <prvAddCurrentTaskToDelayedList+0x94>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	3304      	adds	r3, #4
 800aee0:	4619      	mov	r1, r3
 800aee2:	4610      	mov	r0, r2
 800aee4:	f7fe f849 	bl	8008f7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aee8:	4b0a      	ldr	r3, [pc, #40]	@ (800af14 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	68ba      	ldr	r2, [r7, #8]
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d202      	bcs.n	800aef8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aef2:	4a08      	ldr	r2, [pc, #32]	@ (800af14 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	6013      	str	r3, [r2, #0]
}
 800aef8:	bf00      	nop
 800aefa:	3710      	adds	r7, #16
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	20003c38 	.word	0x20003c38
 800af04:	20003760 	.word	0x20003760
 800af08:	20003c20 	.word	0x20003c20
 800af0c:	20003bf0 	.word	0x20003bf0
 800af10:	20003bec 	.word	0x20003bec
 800af14:	20003c54 	.word	0x20003c54

0800af18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b08a      	sub	sp, #40	@ 0x28
 800af1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800af1e:	2300      	movs	r3, #0
 800af20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800af22:	f000 fbab 	bl	800b67c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800af26:	4b1d      	ldr	r3, [pc, #116]	@ (800af9c <xTimerCreateTimerTask+0x84>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d021      	beq.n	800af72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800af2e:	2300      	movs	r3, #0
 800af30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800af32:	2300      	movs	r3, #0
 800af34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800af36:	1d3a      	adds	r2, r7, #4
 800af38:	f107 0108 	add.w	r1, r7, #8
 800af3c:	f107 030c 	add.w	r3, r7, #12
 800af40:	4618      	mov	r0, r3
 800af42:	f7fd ffaf 	bl	8008ea4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800af46:	6879      	ldr	r1, [r7, #4]
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	9202      	str	r2, [sp, #8]
 800af4e:	9301      	str	r3, [sp, #4]
 800af50:	2302      	movs	r3, #2
 800af52:	9300      	str	r3, [sp, #0]
 800af54:	2300      	movs	r3, #0
 800af56:	460a      	mov	r2, r1
 800af58:	4911      	ldr	r1, [pc, #68]	@ (800afa0 <xTimerCreateTimerTask+0x88>)
 800af5a:	4812      	ldr	r0, [pc, #72]	@ (800afa4 <xTimerCreateTimerTask+0x8c>)
 800af5c:	f7fe ff80 	bl	8009e60 <xTaskCreateStatic>
 800af60:	4603      	mov	r3, r0
 800af62:	4a11      	ldr	r2, [pc, #68]	@ (800afa8 <xTimerCreateTimerTask+0x90>)
 800af64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800af66:	4b10      	ldr	r3, [pc, #64]	@ (800afa8 <xTimerCreateTimerTask+0x90>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d001      	beq.n	800af72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800af6e:	2301      	movs	r3, #1
 800af70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d10b      	bne.n	800af90 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800af78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af7c:	f383 8811 	msr	BASEPRI, r3
 800af80:	f3bf 8f6f 	isb	sy
 800af84:	f3bf 8f4f 	dsb	sy
 800af88:	613b      	str	r3, [r7, #16]
}
 800af8a:	bf00      	nop
 800af8c:	bf00      	nop
 800af8e:	e7fd      	b.n	800af8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800af90:	697b      	ldr	r3, [r7, #20]
}
 800af92:	4618      	mov	r0, r3
 800af94:	3718      	adds	r7, #24
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	20003c90 	.word	0x20003c90
 800afa0:	0800c448 	.word	0x0800c448
 800afa4:	0800b1fd 	.word	0x0800b1fd
 800afa8:	20003c94 	.word	0x20003c94

0800afac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b08a      	sub	sp, #40	@ 0x28
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	607a      	str	r2, [r7, #4]
 800afb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800afba:	2300      	movs	r3, #0
 800afbc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d10b      	bne.n	800afdc <xTimerGenericCommand+0x30>
	__asm volatile
 800afc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc8:	f383 8811 	msr	BASEPRI, r3
 800afcc:	f3bf 8f6f 	isb	sy
 800afd0:	f3bf 8f4f 	dsb	sy
 800afd4:	623b      	str	r3, [r7, #32]
}
 800afd6:	bf00      	nop
 800afd8:	bf00      	nop
 800afda:	e7fd      	b.n	800afd8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800afdc:	4b5c      	ldr	r3, [pc, #368]	@ (800b150 <xTimerGenericCommand+0x1a4>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f000 80b0 	beq.w	800b146 <xTimerGenericCommand+0x19a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	2b05      	cmp	r3, #5
 800aff6:	dc18      	bgt.n	800b02a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aff8:	f7ff fea0 	bl	800ad3c <xTaskGetSchedulerState>
 800affc:	4603      	mov	r3, r0
 800affe:	2b02      	cmp	r3, #2
 800b000:	d109      	bne.n	800b016 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b002:	4b53      	ldr	r3, [pc, #332]	@ (800b150 <xTimerGenericCommand+0x1a4>)
 800b004:	6818      	ldr	r0, [r3, #0]
 800b006:	f107 0110 	add.w	r1, r7, #16
 800b00a:	2300      	movs	r3, #0
 800b00c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b00e:	f7fe f97b 	bl	8009308 <xQueueGenericSend>
 800b012:	6278      	str	r0, [r7, #36]	@ 0x24
 800b014:	e012      	b.n	800b03c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b016:	4b4e      	ldr	r3, [pc, #312]	@ (800b150 <xTimerGenericCommand+0x1a4>)
 800b018:	6818      	ldr	r0, [r3, #0]
 800b01a:	f107 0110 	add.w	r1, r7, #16
 800b01e:	2300      	movs	r3, #0
 800b020:	2200      	movs	r2, #0
 800b022:	f7fe f971 	bl	8009308 <xQueueGenericSend>
 800b026:	6278      	str	r0, [r7, #36]	@ 0x24
 800b028:	e008      	b.n	800b03c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b02a:	4b49      	ldr	r3, [pc, #292]	@ (800b150 <xTimerGenericCommand+0x1a4>)
 800b02c:	6818      	ldr	r0, [r3, #0]
 800b02e:	f107 0110 	add.w	r1, r7, #16
 800b032:	2300      	movs	r3, #0
 800b034:	683a      	ldr	r2, [r7, #0]
 800b036:	f7fe fb23 	bl	8009680 <xQueueGenericSendFromISR>
 800b03a:	6278      	str	r0, [r7, #36]	@ 0x24
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	3b01      	subs	r3, #1
 800b040:	2b08      	cmp	r3, #8
 800b042:	f200 8080 	bhi.w	800b146 <xTimerGenericCommand+0x19a>
 800b046:	a201      	add	r2, pc, #4	@ (adr r2, 800b04c <xTimerGenericCommand+0xa0>)
 800b048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b04c:	0800b071 	.word	0x0800b071
 800b050:	0800b0d1 	.word	0x0800b0d1
 800b054:	0800b089 	.word	0x0800b089
 800b058:	0800b0a1 	.word	0x0800b0a1
 800b05c:	0800b0b9 	.word	0x0800b0b9
 800b060:	0800b0e9 	.word	0x0800b0e9
 800b064:	0800b101 	.word	0x0800b101
 800b068:	0800b119 	.word	0x0800b119
 800b06c:	0800b131 	.word	0x0800b131
 800b070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b072:	2b01      	cmp	r3, #1
 800b074:	d101      	bne.n	800b07a <xTimerGenericCommand+0xce>
 800b076:	23a0      	movs	r3, #160	@ 0xa0
 800b078:	e000      	b.n	800b07c <xTimerGenericCommand+0xd0>
 800b07a:	23a8      	movs	r3, #168	@ 0xa8
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	4611      	mov	r1, r2
 800b080:	4618      	mov	r0, r3
 800b082:	f7f5 ff0d 	bl	8000ea0 <xTraceEventCreate1>
 800b086:	e05e      	b.n	800b146 <xTimerGenericCommand+0x19a>
 800b088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d101      	bne.n	800b092 <xTimerGenericCommand+0xe6>
 800b08e:	23a2      	movs	r3, #162	@ 0xa2
 800b090:	e000      	b.n	800b094 <xTimerGenericCommand+0xe8>
 800b092:	23aa      	movs	r3, #170	@ 0xaa
 800b094:	68fa      	ldr	r2, [r7, #12]
 800b096:	4611      	mov	r1, r2
 800b098:	4618      	mov	r0, r3
 800b09a:	f7f5 ff01 	bl	8000ea0 <xTraceEventCreate1>
 800b09e:	e052      	b.n	800b146 <xTimerGenericCommand+0x19a>
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d101      	bne.n	800b0aa <xTimerGenericCommand+0xfe>
 800b0a6:	23a3      	movs	r3, #163	@ 0xa3
 800b0a8:	e000      	b.n	800b0ac <xTimerGenericCommand+0x100>
 800b0aa:	23ab      	movs	r3, #171	@ 0xab
 800b0ac:	68f9      	ldr	r1, [r7, #12]
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7f5 ff75 	bl	8000fa0 <xTraceEventCreate2>
 800b0b6:	e046      	b.n	800b146 <xTimerGenericCommand+0x19a>
 800b0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d101      	bne.n	800b0c2 <xTimerGenericCommand+0x116>
 800b0be:	2324      	movs	r3, #36	@ 0x24
 800b0c0:	e000      	b.n	800b0c4 <xTimerGenericCommand+0x118>
 800b0c2:	2348      	movs	r3, #72	@ 0x48
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	68f9      	ldr	r1, [r7, #12]
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7f6 fe6c 	bl	8001da6 <xTraceObjectUnregisterWithoutHandle>
 800b0ce:	e03a      	b.n	800b146 <xTimerGenericCommand+0x19a>
 800b0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d101      	bne.n	800b0da <xTimerGenericCommand+0x12e>
 800b0d6:	23a1      	movs	r3, #161	@ 0xa1
 800b0d8:	e000      	b.n	800b0dc <xTimerGenericCommand+0x130>
 800b0da:	23a9      	movs	r3, #169	@ 0xa9
 800b0dc:	68f9      	ldr	r1, [r7, #12]
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7f5 ff5d 	bl	8000fa0 <xTraceEventCreate2>
 800b0e6:	e02e      	b.n	800b146 <xTimerGenericCommand+0x19a>
 800b0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d101      	bne.n	800b0f2 <xTimerGenericCommand+0x146>
 800b0ee:	23a4      	movs	r3, #164	@ 0xa4
 800b0f0:	e000      	b.n	800b0f4 <xTimerGenericCommand+0x148>
 800b0f2:	23ac      	movs	r3, #172	@ 0xac
 800b0f4:	68f9      	ldr	r1, [r7, #12]
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f7f5 ff51 	bl	8000fa0 <xTraceEventCreate2>
 800b0fe:	e022      	b.n	800b146 <xTimerGenericCommand+0x19a>
 800b100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b102:	2b01      	cmp	r3, #1
 800b104:	d101      	bne.n	800b10a <xTimerGenericCommand+0x15e>
 800b106:	23a5      	movs	r3, #165	@ 0xa5
 800b108:	e000      	b.n	800b10c <xTimerGenericCommand+0x160>
 800b10a:	23ad      	movs	r3, #173	@ 0xad
 800b10c:	68f9      	ldr	r1, [r7, #12]
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	4618      	mov	r0, r3
 800b112:	f7f5 ff45 	bl	8000fa0 <xTraceEventCreate2>
 800b116:	e016      	b.n	800b146 <xTimerGenericCommand+0x19a>
 800b118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d101      	bne.n	800b122 <xTimerGenericCommand+0x176>
 800b11e:	23a6      	movs	r3, #166	@ 0xa6
 800b120:	e000      	b.n	800b124 <xTimerGenericCommand+0x178>
 800b122:	23ae      	movs	r3, #174	@ 0xae
 800b124:	68f9      	ldr	r1, [r7, #12]
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	4618      	mov	r0, r3
 800b12a:	f7f5 ff39 	bl	8000fa0 <xTraceEventCreate2>
 800b12e:	e00a      	b.n	800b146 <xTimerGenericCommand+0x19a>
 800b130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b132:	2b01      	cmp	r3, #1
 800b134:	d101      	bne.n	800b13a <xTimerGenericCommand+0x18e>
 800b136:	23a7      	movs	r3, #167	@ 0xa7
 800b138:	e000      	b.n	800b13c <xTimerGenericCommand+0x190>
 800b13a:	23af      	movs	r3, #175	@ 0xaf
 800b13c:	68f9      	ldr	r1, [r7, #12]
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	4618      	mov	r0, r3
 800b142:	f7f5 ff2d 	bl	8000fa0 <xTraceEventCreate2>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3728      	adds	r7, #40	@ 0x28
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	20003c90 	.word	0x20003c90

0800b154 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b088      	sub	sp, #32
 800b158:	af02      	add	r7, sp, #8
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b15e:	4b26      	ldr	r3, [pc, #152]	@ (800b1f8 <prvProcessExpiredTimer+0xa4>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	68db      	ldr	r3, [r3, #12]
 800b166:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	3304      	adds	r3, #4
 800b16c:	4618      	mov	r0, r3
 800b16e:	f7fd ff3d 	bl	8008fec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );
 800b172:	6979      	ldr	r1, [r7, #20]
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	6a1b      	ldr	r3, [r3, #32]
 800b178:	461a      	mov	r2, r3
 800b17a:	20d2      	movs	r0, #210	@ 0xd2
 800b17c:	f7f5 ff10 	bl	8000fa0 <xTraceEventCreate2>

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b186:	f003 0304 	and.w	r3, r3, #4
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d023      	beq.n	800b1d6 <prvProcessExpiredTimer+0x82>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	699a      	ldr	r2, [r3, #24]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	18d1      	adds	r1, r2, r3
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	683a      	ldr	r2, [r7, #0]
 800b19a:	6978      	ldr	r0, [r7, #20]
 800b19c:	f000 f8d4 	bl	800b348 <prvInsertTimerInActiveList>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d020      	beq.n	800b1e8 <prvProcessExpiredTimer+0x94>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	9300      	str	r3, [sp, #0]
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	6978      	ldr	r0, [r7, #20]
 800b1b2:	f7ff fefb 	bl	800afac <xTimerGenericCommand>
 800b1b6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d114      	bne.n	800b1e8 <prvProcessExpiredTimer+0x94>
	__asm volatile
 800b1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c2:	f383 8811 	msr	BASEPRI, r3
 800b1c6:	f3bf 8f6f 	isb	sy
 800b1ca:	f3bf 8f4f 	dsb	sy
 800b1ce:	60fb      	str	r3, [r7, #12]
}
 800b1d0:	bf00      	nop
 800b1d2:	bf00      	nop
 800b1d4:	e7fd      	b.n	800b1d2 <prvProcessExpiredTimer+0x7e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b1dc:	f023 0301 	bic.w	r3, r3, #1
 800b1e0:	b2da      	uxtb	r2, r3
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	6a1b      	ldr	r3, [r3, #32]
 800b1ec:	6978      	ldr	r0, [r7, #20]
 800b1ee:	4798      	blx	r3
}
 800b1f0:	bf00      	nop
 800b1f2:	3718      	adds	r7, #24
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	20003c88 	.word	0x20003c88

0800b1fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b204:	f107 0308 	add.w	r3, r7, #8
 800b208:	4618      	mov	r0, r3
 800b20a:	f000 f859 	bl	800b2c0 <prvGetNextExpireTime>
 800b20e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	4619      	mov	r1, r3
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f000 f805 	bl	800b224 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b21a:	f000 f8d7 	bl	800b3cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b21e:	bf00      	nop
 800b220:	e7f0      	b.n	800b204 <prvTimerTask+0x8>
	...

0800b224 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b22e:	f7ff f927 	bl	800a480 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b232:	f107 0308 	add.w	r3, r7, #8
 800b236:	4618      	mov	r0, r3
 800b238:	f000 f866 	bl	800b308 <prvSampleTimeNow>
 800b23c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d130      	bne.n	800b2a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d10a      	bne.n	800b260 <prvProcessTimerOrBlockTask+0x3c>
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	429a      	cmp	r2, r3
 800b250:	d806      	bhi.n	800b260 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b252:	f7ff f923 	bl	800a49c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b256:	68f9      	ldr	r1, [r7, #12]
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f7ff ff7b 	bl	800b154 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b25e:	e024      	b.n	800b2aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d008      	beq.n	800b278 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b266:	4b13      	ldr	r3, [pc, #76]	@ (800b2b4 <prvProcessTimerOrBlockTask+0x90>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d101      	bne.n	800b274 <prvProcessTimerOrBlockTask+0x50>
 800b270:	2301      	movs	r3, #1
 800b272:	e000      	b.n	800b276 <prvProcessTimerOrBlockTask+0x52>
 800b274:	2300      	movs	r3, #0
 800b276:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b278:	4b0f      	ldr	r3, [pc, #60]	@ (800b2b8 <prvProcessTimerOrBlockTask+0x94>)
 800b27a:	6818      	ldr	r0, [r3, #0]
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	1ad3      	subs	r3, r2, r3
 800b282:	683a      	ldr	r2, [r7, #0]
 800b284:	4619      	mov	r1, r3
 800b286:	f7fe fdb7 	bl	8009df8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b28a:	f7ff f907 	bl	800a49c <xTaskResumeAll>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d10a      	bne.n	800b2aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b294:	4b09      	ldr	r3, [pc, #36]	@ (800b2bc <prvProcessTimerOrBlockTask+0x98>)
 800b296:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b29a:	601a      	str	r2, [r3, #0]
 800b29c:	f3bf 8f4f 	dsb	sy
 800b2a0:	f3bf 8f6f 	isb	sy
}
 800b2a4:	e001      	b.n	800b2aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b2a6:	f7ff f8f9 	bl	800a49c <xTaskResumeAll>
}
 800b2aa:	bf00      	nop
 800b2ac:	3710      	adds	r7, #16
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	20003c8c 	.word	0x20003c8c
 800b2b8:	20003c90 	.word	0x20003c90
 800b2bc:	e000ed04 	.word	0xe000ed04

0800b2c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b085      	sub	sp, #20
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b2c8:	4b0e      	ldr	r3, [pc, #56]	@ (800b304 <prvGetNextExpireTime+0x44>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d101      	bne.n	800b2d6 <prvGetNextExpireTime+0x16>
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	e000      	b.n	800b2d8 <prvGetNextExpireTime+0x18>
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d105      	bne.n	800b2f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b2e4:	4b07      	ldr	r3, [pc, #28]	@ (800b304 <prvGetNextExpireTime+0x44>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	68db      	ldr	r3, [r3, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	60fb      	str	r3, [r7, #12]
 800b2ee:	e001      	b.n	800b2f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3714      	adds	r7, #20
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b300:	4770      	bx	lr
 800b302:	bf00      	nop
 800b304:	20003c88 	.word	0x20003c88

0800b308 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b084      	sub	sp, #16
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b310:	f7ff f968 	bl	800a5e4 <xTaskGetTickCount>
 800b314:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b316:	4b0b      	ldr	r3, [pc, #44]	@ (800b344 <prvSampleTimeNow+0x3c>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	68fa      	ldr	r2, [r7, #12]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d205      	bcs.n	800b32c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b320:	f000 f940 	bl	800b5a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2201      	movs	r2, #1
 800b328:	601a      	str	r2, [r3, #0]
 800b32a:	e002      	b.n	800b332 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b332:	4a04      	ldr	r2, [pc, #16]	@ (800b344 <prvSampleTimeNow+0x3c>)
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b338:	68fb      	ldr	r3, [r7, #12]
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	20003c98 	.word	0x20003c98

0800b348 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b086      	sub	sp, #24
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	60b9      	str	r1, [r7, #8]
 800b352:	607a      	str	r2, [r7, #4]
 800b354:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b356:	2300      	movs	r3, #0
 800b358:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	68ba      	ldr	r2, [r7, #8]
 800b35e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	68fa      	ldr	r2, [r7, #12]
 800b364:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b366:	68ba      	ldr	r2, [r7, #8]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d812      	bhi.n	800b394 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	1ad2      	subs	r2, r2, r3
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	699b      	ldr	r3, [r3, #24]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d302      	bcc.n	800b382 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b37c:	2301      	movs	r3, #1
 800b37e:	617b      	str	r3, [r7, #20]
 800b380:	e01b      	b.n	800b3ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b382:	4b10      	ldr	r3, [pc, #64]	@ (800b3c4 <prvInsertTimerInActiveList+0x7c>)
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	3304      	adds	r3, #4
 800b38a:	4619      	mov	r1, r3
 800b38c:	4610      	mov	r0, r2
 800b38e:	f7fd fdf4 	bl	8008f7a <vListInsert>
 800b392:	e012      	b.n	800b3ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d206      	bcs.n	800b3aa <prvInsertTimerInActiveList+0x62>
 800b39c:	68ba      	ldr	r2, [r7, #8]
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d302      	bcc.n	800b3aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	617b      	str	r3, [r7, #20]
 800b3a8:	e007      	b.n	800b3ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b3aa:	4b07      	ldr	r3, [pc, #28]	@ (800b3c8 <prvInsertTimerInActiveList+0x80>)
 800b3ac:	681a      	ldr	r2, [r3, #0]
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	3304      	adds	r3, #4
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	4610      	mov	r0, r2
 800b3b6:	f7fd fde0 	bl	8008f7a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b3ba:	697b      	ldr	r3, [r7, #20]
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3718      	adds	r7, #24
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	20003c8c 	.word	0x20003c8c
 800b3c8:	20003c88 	.word	0x20003c88

0800b3cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b08e      	sub	sp, #56	@ 0x38
 800b3d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b3d2:	e0d5      	b.n	800b580 <prvProcessReceivedCommands+0x1b4>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	da19      	bge.n	800b40e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b3da:	1d3b      	adds	r3, r7, #4
 800b3dc:	3304      	adds	r3, #4
 800b3de:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d10b      	bne.n	800b3fe <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b3e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ea:	f383 8811 	msr	BASEPRI, r3
 800b3ee:	f3bf 8f6f 	isb	sy
 800b3f2:	f3bf 8f4f 	dsb	sy
 800b3f6:	61fb      	str	r3, [r7, #28]
}
 800b3f8:	bf00      	nop
 800b3fa:	bf00      	nop
 800b3fc:	e7fd      	b.n	800b3fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b3fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b404:	6850      	ldr	r0, [r2, #4]
 800b406:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b408:	6892      	ldr	r2, [r2, #8]
 800b40a:	4611      	mov	r1, r2
 800b40c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2b00      	cmp	r3, #0
 800b412:	f2c0 80b5 	blt.w	800b580 <prvProcessReceivedCommands+0x1b4>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b41a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b41c:	695b      	ldr	r3, [r3, #20]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d004      	beq.n	800b42c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b424:	3304      	adds	r3, #4
 800b426:	4618      	mov	r0, r3
 800b428:	f7fd fde0 	bl	8008fec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b42c:	463b      	mov	r3, r7
 800b42e:	4618      	mov	r0, r3
 800b430:	f7ff ff6a 	bl	800b308 <prvSampleTimeNow>
 800b434:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2b09      	cmp	r3, #9
 800b43a:	f200 809e 	bhi.w	800b57a <prvProcessReceivedCommands+0x1ae>
 800b43e:	a201      	add	r2, pc, #4	@ (adr r2, 800b444 <prvProcessReceivedCommands+0x78>)
 800b440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b444:	0800b46d 	.word	0x0800b46d
 800b448:	0800b46d 	.word	0x0800b46d
 800b44c:	0800b46d 	.word	0x0800b46d
 800b450:	0800b4f1 	.word	0x0800b4f1
 800b454:	0800b505 	.word	0x0800b505
 800b458:	0800b551 	.word	0x0800b551
 800b45c:	0800b46d 	.word	0x0800b46d
 800b460:	0800b46d 	.word	0x0800b46d
 800b464:	0800b4f1 	.word	0x0800b4f1
 800b468:	0800b505 	.word	0x0800b505
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b46c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b46e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b472:	f043 0301 	orr.w	r3, r3, #1
 800b476:	b2da      	uxtb	r2, r3
 800b478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b47a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b47e:	68ba      	ldr	r2, [r7, #8]
 800b480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b482:	699b      	ldr	r3, [r3, #24]
 800b484:	18d1      	adds	r1, r2, r3
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b48a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b48c:	f7ff ff5c 	bl	800b348 <prvInsertTimerInActiveList>
 800b490:	4603      	mov	r3, r0
 800b492:	2b00      	cmp	r3, #0
 800b494:	d073      	beq.n	800b57e <prvProcessReceivedCommands+0x1b2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b498:	6a1b      	ldr	r3, [r3, #32]
 800b49a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b49c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );
 800b49e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a2:	6a1b      	ldr	r3, [r3, #32]
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	20d2      	movs	r0, #210	@ 0xd2
 800b4a8:	f7f5 fd7a 	bl	8000fa0 <xTraceEventCreate2>

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b4ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4b2:	f003 0304 	and.w	r3, r3, #4
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d061      	beq.n	800b57e <prvProcessReceivedCommands+0x1b2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b4ba:	68ba      	ldr	r2, [r7, #8]
 800b4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4be:	699b      	ldr	r3, [r3, #24]
 800b4c0:	441a      	add	r2, r3
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	9300      	str	r3, [sp, #0]
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	2100      	movs	r1, #0
 800b4ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4cc:	f7ff fd6e 	bl	800afac <xTimerGenericCommand>
 800b4d0:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b4d2:	6a3b      	ldr	r3, [r7, #32]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d152      	bne.n	800b57e <prvProcessReceivedCommands+0x1b2>
	__asm volatile
 800b4d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4dc:	f383 8811 	msr	BASEPRI, r3
 800b4e0:	f3bf 8f6f 	isb	sy
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	61bb      	str	r3, [r7, #24]
}
 800b4ea:	bf00      	nop
 800b4ec:	bf00      	nop
 800b4ee:	e7fd      	b.n	800b4ec <prvProcessReceivedCommands+0x120>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4f6:	f023 0301 	bic.w	r3, r3, #1
 800b4fa:	b2da      	uxtb	r2, r3
 800b4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b502:	e03d      	b.n	800b580 <prvProcessReceivedCommands+0x1b4>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b506:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b50a:	f043 0301 	orr.w	r3, r3, #1
 800b50e:	b2da      	uxtb	r2, r3
 800b510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b512:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b516:	68ba      	ldr	r2, [r7, #8]
 800b518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b51a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b51e:	699b      	ldr	r3, [r3, #24]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d10b      	bne.n	800b53c <prvProcessReceivedCommands+0x170>
	__asm volatile
 800b524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b528:	f383 8811 	msr	BASEPRI, r3
 800b52c:	f3bf 8f6f 	isb	sy
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	617b      	str	r3, [r7, #20]
}
 800b536:	bf00      	nop
 800b538:	bf00      	nop
 800b53a:	e7fd      	b.n	800b538 <prvProcessReceivedCommands+0x16c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b53c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b53e:	699a      	ldr	r2, [r3, #24]
 800b540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b542:	18d1      	adds	r1, r2, r3
 800b544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b548:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b54a:	f7ff fefd 	bl	800b348 <prvInsertTimerInActiveList>
					break;
 800b54e:	e017      	b.n	800b580 <prvProcessReceivedCommands+0x1b4>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b552:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b556:	f003 0302 	and.w	r3, r3, #2
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d103      	bne.n	800b566 <prvProcessReceivedCommands+0x19a>
						{
							vPortFree( pxTimer );
 800b55e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b560:	f000 fc1a 	bl	800bd98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b564:	e00c      	b.n	800b580 <prvProcessReceivedCommands+0x1b4>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b568:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b56c:	f023 0301 	bic.w	r3, r3, #1
 800b570:	b2da      	uxtb	r2, r3
 800b572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b574:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b578:	e002      	b.n	800b580 <prvProcessReceivedCommands+0x1b4>

				default	:
					/* Don't expect to get here. */
					break;
 800b57a:	bf00      	nop
 800b57c:	e000      	b.n	800b580 <prvProcessReceivedCommands+0x1b4>
					break;
 800b57e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b580:	4b07      	ldr	r3, [pc, #28]	@ (800b5a0 <prvProcessReceivedCommands+0x1d4>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	1d39      	adds	r1, r7, #4
 800b586:	2200      	movs	r2, #0
 800b588:	4618      	mov	r0, r3
 800b58a:	f7fe f957 	bl	800983c <xQueueReceive>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	f47f af1f 	bne.w	800b3d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b596:	bf00      	nop
 800b598:	bf00      	nop
 800b59a:	3730      	adds	r7, #48	@ 0x30
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	20003c90 	.word	0x20003c90

0800b5a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b088      	sub	sp, #32
 800b5a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b5aa:	e050      	b.n	800b64e <prvSwitchTimerLists+0xaa>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b5ac:	4b31      	ldr	r3, [pc, #196]	@ (800b674 <prvSwitchTimerLists+0xd0>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5b6:	4b2f      	ldr	r3, [pc, #188]	@ (800b674 <prvSwitchTimerLists+0xd0>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	3304      	adds	r3, #4
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f7fd fd11 	bl	8008fec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );
 800b5ca:	68f9      	ldr	r1, [r7, #12]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6a1b      	ldr	r3, [r3, #32]
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	20d2      	movs	r0, #210	@ 0xd2
 800b5d4:	f7f5 fce4 	bl	8000fa0 <xTraceEventCreate2>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	6a1b      	ldr	r3, [r3, #32]
 800b5dc:	68f8      	ldr	r0, [r7, #12]
 800b5de:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b5e6:	f003 0304 	and.w	r3, r3, #4
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d02f      	beq.n	800b64e <prvSwitchTimerLists+0xaa>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	699b      	ldr	r3, [r3, #24]
 800b5f2:	693a      	ldr	r2, [r7, #16]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b5f8:	68ba      	ldr	r2, [r7, #8]
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d90e      	bls.n	800b61e <prvSwitchTimerLists+0x7a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	68ba      	ldr	r2, [r7, #8]
 800b604:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	68fa      	ldr	r2, [r7, #12]
 800b60a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b60c:	4b19      	ldr	r3, [pc, #100]	@ (800b674 <prvSwitchTimerLists+0xd0>)
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	3304      	adds	r3, #4
 800b614:	4619      	mov	r1, r3
 800b616:	4610      	mov	r0, r2
 800b618:	f7fd fcaf 	bl	8008f7a <vListInsert>
 800b61c:	e017      	b.n	800b64e <prvSwitchTimerLists+0xaa>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b61e:	2300      	movs	r3, #0
 800b620:	9300      	str	r3, [sp, #0]
 800b622:	2300      	movs	r3, #0
 800b624:	693a      	ldr	r2, [r7, #16]
 800b626:	2100      	movs	r1, #0
 800b628:	68f8      	ldr	r0, [r7, #12]
 800b62a:	f7ff fcbf 	bl	800afac <xTimerGenericCommand>
 800b62e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d10b      	bne.n	800b64e <prvSwitchTimerLists+0xaa>
	__asm volatile
 800b636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b63a:	f383 8811 	msr	BASEPRI, r3
 800b63e:	f3bf 8f6f 	isb	sy
 800b642:	f3bf 8f4f 	dsb	sy
 800b646:	603b      	str	r3, [r7, #0]
}
 800b648:	bf00      	nop
 800b64a:	bf00      	nop
 800b64c:	e7fd      	b.n	800b64a <prvSwitchTimerLists+0xa6>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b64e:	4b09      	ldr	r3, [pc, #36]	@ (800b674 <prvSwitchTimerLists+0xd0>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d1a9      	bne.n	800b5ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b658:	4b06      	ldr	r3, [pc, #24]	@ (800b674 <prvSwitchTimerLists+0xd0>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b65e:	4b06      	ldr	r3, [pc, #24]	@ (800b678 <prvSwitchTimerLists+0xd4>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4a04      	ldr	r2, [pc, #16]	@ (800b674 <prvSwitchTimerLists+0xd0>)
 800b664:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b666:	4a04      	ldr	r2, [pc, #16]	@ (800b678 <prvSwitchTimerLists+0xd4>)
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	6013      	str	r3, [r2, #0]
}
 800b66c:	bf00      	nop
 800b66e:	3718      	adds	r7, #24
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}
 800b674:	20003c88 	.word	0x20003c88
 800b678:	20003c8c 	.word	0x20003c8c

0800b67c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b682:	f000 f97b 	bl	800b97c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b686:	4b15      	ldr	r3, [pc, #84]	@ (800b6dc <prvCheckForValidListAndQueue+0x60>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d120      	bne.n	800b6d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b68e:	4814      	ldr	r0, [pc, #80]	@ (800b6e0 <prvCheckForValidListAndQueue+0x64>)
 800b690:	f7fd fc22 	bl	8008ed8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b694:	4813      	ldr	r0, [pc, #76]	@ (800b6e4 <prvCheckForValidListAndQueue+0x68>)
 800b696:	f7fd fc1f 	bl	8008ed8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b69a:	4b13      	ldr	r3, [pc, #76]	@ (800b6e8 <prvCheckForValidListAndQueue+0x6c>)
 800b69c:	4a10      	ldr	r2, [pc, #64]	@ (800b6e0 <prvCheckForValidListAndQueue+0x64>)
 800b69e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b6a0:	4b12      	ldr	r3, [pc, #72]	@ (800b6ec <prvCheckForValidListAndQueue+0x70>)
 800b6a2:	4a10      	ldr	r2, [pc, #64]	@ (800b6e4 <prvCheckForValidListAndQueue+0x68>)
 800b6a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	9300      	str	r3, [sp, #0]
 800b6aa:	4b11      	ldr	r3, [pc, #68]	@ (800b6f0 <prvCheckForValidListAndQueue+0x74>)
 800b6ac:	4a11      	ldr	r2, [pc, #68]	@ (800b6f4 <prvCheckForValidListAndQueue+0x78>)
 800b6ae:	2110      	movs	r1, #16
 800b6b0:	200a      	movs	r0, #10
 800b6b2:	f7fd fd2f 	bl	8009114 <xQueueGenericCreateStatic>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	4a08      	ldr	r2, [pc, #32]	@ (800b6dc <prvCheckForValidListAndQueue+0x60>)
 800b6ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b6bc:	4b07      	ldr	r3, [pc, #28]	@ (800b6dc <prvCheckForValidListAndQueue+0x60>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d005      	beq.n	800b6d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b6c4:	4b05      	ldr	r3, [pc, #20]	@ (800b6dc <prvCheckForValidListAndQueue+0x60>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	490b      	ldr	r1, [pc, #44]	@ (800b6f8 <prvCheckForValidListAndQueue+0x7c>)
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7fe fb68 	bl	8009da0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b6d0:	f000 f986 	bl	800b9e0 <vPortExitCritical>
}
 800b6d4:	bf00      	nop
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	20003c90 	.word	0x20003c90
 800b6e0:	20003c60 	.word	0x20003c60
 800b6e4:	20003c74 	.word	0x20003c74
 800b6e8:	20003c88 	.word	0x20003c88
 800b6ec:	20003c8c 	.word	0x20003c8c
 800b6f0:	20003d3c 	.word	0x20003d3c
 800b6f4:	20003c9c 	.word	0x20003c9c
 800b6f8:	0800c450 	.word	0x0800c450

0800b6fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b085      	sub	sp, #20
 800b700:	af00      	add	r7, sp, #0
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	3b04      	subs	r3, #4
 800b70c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b714:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	3b04      	subs	r3, #4
 800b71a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	f023 0201 	bic.w	r2, r3, #1
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	3b04      	subs	r3, #4
 800b72a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b72c:	4a0c      	ldr	r2, [pc, #48]	@ (800b760 <pxPortInitialiseStack+0x64>)
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	3b14      	subs	r3, #20
 800b736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b738:	687a      	ldr	r2, [r7, #4]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	3b04      	subs	r3, #4
 800b742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f06f 0202 	mvn.w	r2, #2
 800b74a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	3b20      	subs	r3, #32
 800b750:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b752:	68fb      	ldr	r3, [r7, #12]
}
 800b754:	4618      	mov	r0, r3
 800b756:	3714      	adds	r7, #20
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr
 800b760:	0800b765 	.word	0x0800b765

0800b764 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b764:	b480      	push	{r7}
 800b766:	b085      	sub	sp, #20
 800b768:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b76a:	2300      	movs	r3, #0
 800b76c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b76e:	4b13      	ldr	r3, [pc, #76]	@ (800b7bc <prvTaskExitError+0x58>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b776:	d00b      	beq.n	800b790 <prvTaskExitError+0x2c>
	__asm volatile
 800b778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b77c:	f383 8811 	msr	BASEPRI, r3
 800b780:	f3bf 8f6f 	isb	sy
 800b784:	f3bf 8f4f 	dsb	sy
 800b788:	60fb      	str	r3, [r7, #12]
}
 800b78a:	bf00      	nop
 800b78c:	bf00      	nop
 800b78e:	e7fd      	b.n	800b78c <prvTaskExitError+0x28>
	__asm volatile
 800b790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b794:	f383 8811 	msr	BASEPRI, r3
 800b798:	f3bf 8f6f 	isb	sy
 800b79c:	f3bf 8f4f 	dsb	sy
 800b7a0:	60bb      	str	r3, [r7, #8]
}
 800b7a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b7a4:	bf00      	nop
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d0fc      	beq.n	800b7a6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b7ac:	bf00      	nop
 800b7ae:	bf00      	nop
 800b7b0:	3714      	adds	r7, #20
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	2000000c 	.word	0x2000000c

0800b7c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b7c0:	4b07      	ldr	r3, [pc, #28]	@ (800b7e0 <pxCurrentTCBConst2>)
 800b7c2:	6819      	ldr	r1, [r3, #0]
 800b7c4:	6808      	ldr	r0, [r1, #0]
 800b7c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ca:	f380 8809 	msr	PSP, r0
 800b7ce:	f3bf 8f6f 	isb	sy
 800b7d2:	f04f 0000 	mov.w	r0, #0
 800b7d6:	f380 8811 	msr	BASEPRI, r0
 800b7da:	4770      	bx	lr
 800b7dc:	f3af 8000 	nop.w

0800b7e0 <pxCurrentTCBConst2>:
 800b7e0:	20003760 	.word	0x20003760
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b7e4:	bf00      	nop
 800b7e6:	bf00      	nop

0800b7e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b7e8:	4808      	ldr	r0, [pc, #32]	@ (800b80c <prvPortStartFirstTask+0x24>)
 800b7ea:	6800      	ldr	r0, [r0, #0]
 800b7ec:	6800      	ldr	r0, [r0, #0]
 800b7ee:	f380 8808 	msr	MSP, r0
 800b7f2:	f04f 0000 	mov.w	r0, #0
 800b7f6:	f380 8814 	msr	CONTROL, r0
 800b7fa:	b662      	cpsie	i
 800b7fc:	b661      	cpsie	f
 800b7fe:	f3bf 8f4f 	dsb	sy
 800b802:	f3bf 8f6f 	isb	sy
 800b806:	df00      	svc	0
 800b808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b80a:	bf00      	nop
 800b80c:	e000ed08 	.word	0xe000ed08

0800b810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b088      	sub	sp, #32
 800b814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b816:	4b50      	ldr	r3, [pc, #320]	@ (800b958 <xPortStartScheduler+0x148>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	4a50      	ldr	r2, [pc, #320]	@ (800b95c <xPortStartScheduler+0x14c>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d10b      	bne.n	800b838 <xPortStartScheduler+0x28>
	__asm volatile
 800b820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b824:	f383 8811 	msr	BASEPRI, r3
 800b828:	f3bf 8f6f 	isb	sy
 800b82c:	f3bf 8f4f 	dsb	sy
 800b830:	61bb      	str	r3, [r7, #24]
}
 800b832:	bf00      	nop
 800b834:	bf00      	nop
 800b836:	e7fd      	b.n	800b834 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b838:	4b47      	ldr	r3, [pc, #284]	@ (800b958 <xPortStartScheduler+0x148>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a48      	ldr	r2, [pc, #288]	@ (800b960 <xPortStartScheduler+0x150>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d10b      	bne.n	800b85a <xPortStartScheduler+0x4a>
	__asm volatile
 800b842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b846:	f383 8811 	msr	BASEPRI, r3
 800b84a:	f3bf 8f6f 	isb	sy
 800b84e:	f3bf 8f4f 	dsb	sy
 800b852:	617b      	str	r3, [r7, #20]
}
 800b854:	bf00      	nop
 800b856:	bf00      	nop
 800b858:	e7fd      	b.n	800b856 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b85a:	4b42      	ldr	r3, [pc, #264]	@ (800b964 <xPortStartScheduler+0x154>)
 800b85c:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b85e:	69fb      	ldr	r3, [r7, #28]
 800b860:	781b      	ldrb	r3, [r3, #0]
 800b862:	b2db      	uxtb	r3, r3
 800b864:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b866:	69fb      	ldr	r3, [r7, #28]
 800b868:	22ff      	movs	r2, #255	@ 0xff
 800b86a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b86c:	69fb      	ldr	r3, [r7, #28]
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	b2db      	uxtb	r3, r3
 800b872:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b874:	79fb      	ldrb	r3, [r7, #7]
 800b876:	b2db      	uxtb	r3, r3
 800b878:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b87c:	b2da      	uxtb	r2, r3
 800b87e:	4b3a      	ldr	r3, [pc, #232]	@ (800b968 <xPortStartScheduler+0x158>)
 800b880:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b882:	4b3a      	ldr	r3, [pc, #232]	@ (800b96c <xPortStartScheduler+0x15c>)
 800b884:	2207      	movs	r2, #7
 800b886:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b888:	e009      	b.n	800b89e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b88a:	4b38      	ldr	r3, [pc, #224]	@ (800b96c <xPortStartScheduler+0x15c>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	3b01      	subs	r3, #1
 800b890:	4a36      	ldr	r2, [pc, #216]	@ (800b96c <xPortStartScheduler+0x15c>)
 800b892:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b894:	79fb      	ldrb	r3, [r7, #7]
 800b896:	b2db      	uxtb	r3, r3
 800b898:	005b      	lsls	r3, r3, #1
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b89e:	79fb      	ldrb	r3, [r7, #7]
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8a6:	2b80      	cmp	r3, #128	@ 0x80
 800b8a8:	d0ef      	beq.n	800b88a <xPortStartScheduler+0x7a>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800b8aa:	4b30      	ldr	r3, [pc, #192]	@ (800b96c <xPortStartScheduler+0x15c>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f1c3 0307 	rsb	r3, r3, #7
 800b8b2:	2b04      	cmp	r3, #4
 800b8b4:	d00b      	beq.n	800b8ce <xPortStartScheduler+0xbe>
	__asm volatile
 800b8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ba:	f383 8811 	msr	BASEPRI, r3
 800b8be:	f3bf 8f6f 	isb	sy
 800b8c2:	f3bf 8f4f 	dsb	sy
 800b8c6:	613b      	str	r3, [r7, #16]
}
 800b8c8:	bf00      	nop
 800b8ca:	bf00      	nop
 800b8cc:	e7fd      	b.n	800b8ca <xPortStartScheduler+0xba>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b8ce:	4b27      	ldr	r3, [pc, #156]	@ (800b96c <xPortStartScheduler+0x15c>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f1c3 0307 	rsb	r3, r3, #7
 800b8d6:	2b04      	cmp	r3, #4
 800b8d8:	d00b      	beq.n	800b8f2 <xPortStartScheduler+0xe2>
	__asm volatile
 800b8da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8de:	f383 8811 	msr	BASEPRI, r3
 800b8e2:	f3bf 8f6f 	isb	sy
 800b8e6:	f3bf 8f4f 	dsb	sy
 800b8ea:	60fb      	str	r3, [r7, #12]
}
 800b8ec:	bf00      	nop
 800b8ee:	bf00      	nop
 800b8f0:	e7fd      	b.n	800b8ee <xPortStartScheduler+0xde>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b8f2:	4b1e      	ldr	r3, [pc, #120]	@ (800b96c <xPortStartScheduler+0x15c>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	021b      	lsls	r3, r3, #8
 800b8f8:	4a1c      	ldr	r2, [pc, #112]	@ (800b96c <xPortStartScheduler+0x15c>)
 800b8fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b8fc:	4b1b      	ldr	r3, [pc, #108]	@ (800b96c <xPortStartScheduler+0x15c>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b904:	4a19      	ldr	r2, [pc, #100]	@ (800b96c <xPortStartScheduler+0x15c>)
 800b906:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	b2da      	uxtb	r2, r3
 800b90c:	69fb      	ldr	r3, [r7, #28]
 800b90e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b910:	4b17      	ldr	r3, [pc, #92]	@ (800b970 <xPortStartScheduler+0x160>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	4a16      	ldr	r2, [pc, #88]	@ (800b970 <xPortStartScheduler+0x160>)
 800b916:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b91a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b91c:	4b14      	ldr	r3, [pc, #80]	@ (800b970 <xPortStartScheduler+0x160>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a13      	ldr	r2, [pc, #76]	@ (800b970 <xPortStartScheduler+0x160>)
 800b922:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b926:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b928:	f000 f8e0 	bl	800baec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b92c:	4b11      	ldr	r3, [pc, #68]	@ (800b974 <xPortStartScheduler+0x164>)
 800b92e:	2200      	movs	r2, #0
 800b930:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b932:	f000 f8ff 	bl	800bb34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b936:	4b10      	ldr	r3, [pc, #64]	@ (800b978 <xPortStartScheduler+0x168>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	4a0f      	ldr	r2, [pc, #60]	@ (800b978 <xPortStartScheduler+0x168>)
 800b93c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b940:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b942:	f7ff ff51 	bl	800b7e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b946:	f7fe ff2d 	bl	800a7a4 <vTaskSwitchContext>
	prvTaskExitError();
 800b94a:	f7ff ff0b 	bl	800b764 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3720      	adds	r7, #32
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}
 800b958:	e000ed00 	.word	0xe000ed00
 800b95c:	410fc271 	.word	0x410fc271
 800b960:	410fc270 	.word	0x410fc270
 800b964:	e000e400 	.word	0xe000e400
 800b968:	20003d8c 	.word	0x20003d8c
 800b96c:	20003d90 	.word	0x20003d90
 800b970:	e000ed20 	.word	0xe000ed20
 800b974:	2000000c 	.word	0x2000000c
 800b978:	e000ef34 	.word	0xe000ef34

0800b97c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
	__asm volatile
 800b982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b986:	f383 8811 	msr	BASEPRI, r3
 800b98a:	f3bf 8f6f 	isb	sy
 800b98e:	f3bf 8f4f 	dsb	sy
 800b992:	607b      	str	r3, [r7, #4]
}
 800b994:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b996:	4b10      	ldr	r3, [pc, #64]	@ (800b9d8 <vPortEnterCritical+0x5c>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	3301      	adds	r3, #1
 800b99c:	4a0e      	ldr	r2, [pc, #56]	@ (800b9d8 <vPortEnterCritical+0x5c>)
 800b99e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b9a0:	4b0d      	ldr	r3, [pc, #52]	@ (800b9d8 <vPortEnterCritical+0x5c>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d110      	bne.n	800b9ca <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b9a8:	4b0c      	ldr	r3, [pc, #48]	@ (800b9dc <vPortEnterCritical+0x60>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d00b      	beq.n	800b9ca <vPortEnterCritical+0x4e>
	__asm volatile
 800b9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9b6:	f383 8811 	msr	BASEPRI, r3
 800b9ba:	f3bf 8f6f 	isb	sy
 800b9be:	f3bf 8f4f 	dsb	sy
 800b9c2:	603b      	str	r3, [r7, #0]
}
 800b9c4:	bf00      	nop
 800b9c6:	bf00      	nop
 800b9c8:	e7fd      	b.n	800b9c6 <vPortEnterCritical+0x4a>
	}
}
 800b9ca:	bf00      	nop
 800b9cc:	370c      	adds	r7, #12
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr
 800b9d6:	bf00      	nop
 800b9d8:	2000000c 	.word	0x2000000c
 800b9dc:	e000ed04 	.word	0xe000ed04

0800b9e0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b083      	sub	sp, #12
 800b9e4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b9e6:	4b12      	ldr	r3, [pc, #72]	@ (800ba30 <vPortExitCritical+0x50>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d10b      	bne.n	800ba06 <vPortExitCritical+0x26>
	__asm volatile
 800b9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9f2:	f383 8811 	msr	BASEPRI, r3
 800b9f6:	f3bf 8f6f 	isb	sy
 800b9fa:	f3bf 8f4f 	dsb	sy
 800b9fe:	607b      	str	r3, [r7, #4]
}
 800ba00:	bf00      	nop
 800ba02:	bf00      	nop
 800ba04:	e7fd      	b.n	800ba02 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ba06:	4b0a      	ldr	r3, [pc, #40]	@ (800ba30 <vPortExitCritical+0x50>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	3b01      	subs	r3, #1
 800ba0c:	4a08      	ldr	r2, [pc, #32]	@ (800ba30 <vPortExitCritical+0x50>)
 800ba0e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ba10:	4b07      	ldr	r3, [pc, #28]	@ (800ba30 <vPortExitCritical+0x50>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d105      	bne.n	800ba24 <vPortExitCritical+0x44>
 800ba18:	2300      	movs	r3, #0
 800ba1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	f383 8811 	msr	BASEPRI, r3
}
 800ba22:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ba24:	bf00      	nop
 800ba26:	370c      	adds	r7, #12
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr
 800ba30:	2000000c 	.word	0x2000000c
	...

0800ba40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ba40:	f3ef 8009 	mrs	r0, PSP
 800ba44:	f3bf 8f6f 	isb	sy
 800ba48:	4b15      	ldr	r3, [pc, #84]	@ (800baa0 <pxCurrentTCBConst>)
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	f01e 0f10 	tst.w	lr, #16
 800ba50:	bf08      	it	eq
 800ba52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ba56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba5a:	6010      	str	r0, [r2, #0]
 800ba5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ba60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ba64:	f380 8811 	msr	BASEPRI, r0
 800ba68:	f3bf 8f4f 	dsb	sy
 800ba6c:	f3bf 8f6f 	isb	sy
 800ba70:	f7fe fe98 	bl	800a7a4 <vTaskSwitchContext>
 800ba74:	f04f 0000 	mov.w	r0, #0
 800ba78:	f380 8811 	msr	BASEPRI, r0
 800ba7c:	bc09      	pop	{r0, r3}
 800ba7e:	6819      	ldr	r1, [r3, #0]
 800ba80:	6808      	ldr	r0, [r1, #0]
 800ba82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba86:	f01e 0f10 	tst.w	lr, #16
 800ba8a:	bf08      	it	eq
 800ba8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ba90:	f380 8809 	msr	PSP, r0
 800ba94:	f3bf 8f6f 	isb	sy
 800ba98:	4770      	bx	lr
 800ba9a:	bf00      	nop
 800ba9c:	f3af 8000 	nop.w

0800baa0 <pxCurrentTCBConst>:
 800baa0:	20003760 	.word	0x20003760
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800baa4:	bf00      	nop
 800baa6:	bf00      	nop

0800baa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
	__asm volatile
 800baae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bab2:	f383 8811 	msr	BASEPRI, r3
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	607b      	str	r3, [r7, #4]
}
 800bac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bac2:	f7fe fd9f 	bl	800a604 <xTaskIncrementTick>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d003      	beq.n	800bad4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bacc:	4b06      	ldr	r3, [pc, #24]	@ (800bae8 <xPortSysTickHandler+0x40>)
 800bace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bad2:	601a      	str	r2, [r3, #0]
 800bad4:	2300      	movs	r3, #0
 800bad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	f383 8811 	msr	BASEPRI, r3
}
 800bade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bae0:	bf00      	nop
 800bae2:	3708      	adds	r7, #8
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	e000ed04 	.word	0xe000ed04

0800baec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800baec:	b480      	push	{r7}
 800baee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800baf0:	4b0b      	ldr	r3, [pc, #44]	@ (800bb20 <vPortSetupTimerInterrupt+0x34>)
 800baf2:	2200      	movs	r2, #0
 800baf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800baf6:	4b0b      	ldr	r3, [pc, #44]	@ (800bb24 <vPortSetupTimerInterrupt+0x38>)
 800baf8:	2200      	movs	r2, #0
 800bafa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bafc:	4b0a      	ldr	r3, [pc, #40]	@ (800bb28 <vPortSetupTimerInterrupt+0x3c>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a0a      	ldr	r2, [pc, #40]	@ (800bb2c <vPortSetupTimerInterrupt+0x40>)
 800bb02:	fba2 2303 	umull	r2, r3, r2, r3
 800bb06:	099b      	lsrs	r3, r3, #6
 800bb08:	4a09      	ldr	r2, [pc, #36]	@ (800bb30 <vPortSetupTimerInterrupt+0x44>)
 800bb0a:	3b01      	subs	r3, #1
 800bb0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bb0e:	4b04      	ldr	r3, [pc, #16]	@ (800bb20 <vPortSetupTimerInterrupt+0x34>)
 800bb10:	2207      	movs	r2, #7
 800bb12:	601a      	str	r2, [r3, #0]
}
 800bb14:	bf00      	nop
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop
 800bb20:	e000e010 	.word	0xe000e010
 800bb24:	e000e018 	.word	0xe000e018
 800bb28:	20000000 	.word	0x20000000
 800bb2c:	10624dd3 	.word	0x10624dd3
 800bb30:	e000e014 	.word	0xe000e014

0800bb34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bb34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bb44 <vPortEnableVFP+0x10>
 800bb38:	6801      	ldr	r1, [r0, #0]
 800bb3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bb3e:	6001      	str	r1, [r0, #0]
 800bb40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bb42:	bf00      	nop
 800bb44:	e000ed88 	.word	0xe000ed88

0800bb48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bb48:	b480      	push	{r7}
 800bb4a:	b085      	sub	sp, #20
 800bb4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bb4e:	f3ef 8305 	mrs	r3, IPSR
 800bb52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2b0f      	cmp	r3, #15
 800bb58:	d915      	bls.n	800bb86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bb5a:	4a18      	ldr	r2, [pc, #96]	@ (800bbbc <vPortValidateInterruptPriority+0x74>)
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	4413      	add	r3, r2
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bb64:	4b16      	ldr	r3, [pc, #88]	@ (800bbc0 <vPortValidateInterruptPriority+0x78>)
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	7afa      	ldrb	r2, [r7, #11]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d20b      	bcs.n	800bb86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bb6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb72:	f383 8811 	msr	BASEPRI, r3
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	f3bf 8f4f 	dsb	sy
 800bb7e:	607b      	str	r3, [r7, #4]
}
 800bb80:	bf00      	nop
 800bb82:	bf00      	nop
 800bb84:	e7fd      	b.n	800bb82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bb86:	4b0f      	ldr	r3, [pc, #60]	@ (800bbc4 <vPortValidateInterruptPriority+0x7c>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bb8e:	4b0e      	ldr	r3, [pc, #56]	@ (800bbc8 <vPortValidateInterruptPriority+0x80>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d90b      	bls.n	800bbae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bb96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb9a:	f383 8811 	msr	BASEPRI, r3
 800bb9e:	f3bf 8f6f 	isb	sy
 800bba2:	f3bf 8f4f 	dsb	sy
 800bba6:	603b      	str	r3, [r7, #0]
}
 800bba8:	bf00      	nop
 800bbaa:	bf00      	nop
 800bbac:	e7fd      	b.n	800bbaa <vPortValidateInterruptPriority+0x62>
	}
 800bbae:	bf00      	nop
 800bbb0:	3714      	adds	r7, #20
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr
 800bbba:	bf00      	nop
 800bbbc:	e000e3f0 	.word	0xe000e3f0
 800bbc0:	20003d8c 	.word	0x20003d8c
 800bbc4:	e000ed0c 	.word	0xe000ed0c
 800bbc8:	20003d90 	.word	0x20003d90

0800bbcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b08a      	sub	sp, #40	@ 0x28
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bbd8:	f7fe fc52 	bl	800a480 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bbdc:	4b66      	ldr	r3, [pc, #408]	@ (800bd78 <pvPortMalloc+0x1ac>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d101      	bne.n	800bbe8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bbe4:	f000 f952 	bl	800be8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bbe8:	4b64      	ldr	r3, [pc, #400]	@ (800bd7c <pvPortMalloc+0x1b0>)
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	4013      	ands	r3, r2
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	f040 8095 	bne.w	800bd20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d01e      	beq.n	800bc3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bbfc:	2208      	movs	r2, #8
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	4413      	add	r3, r2
 800bc02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f003 0307 	and.w	r3, r3, #7
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d015      	beq.n	800bc3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f023 0307 	bic.w	r3, r3, #7
 800bc14:	3308      	adds	r3, #8
 800bc16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f003 0307 	and.w	r3, r3, #7
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d00b      	beq.n	800bc3a <pvPortMalloc+0x6e>
	__asm volatile
 800bc22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc26:	f383 8811 	msr	BASEPRI, r3
 800bc2a:	f3bf 8f6f 	isb	sy
 800bc2e:	f3bf 8f4f 	dsb	sy
 800bc32:	617b      	str	r3, [r7, #20]
}
 800bc34:	bf00      	nop
 800bc36:	bf00      	nop
 800bc38:	e7fd      	b.n	800bc36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d06f      	beq.n	800bd20 <pvPortMalloc+0x154>
 800bc40:	4b4f      	ldr	r3, [pc, #316]	@ (800bd80 <pvPortMalloc+0x1b4>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d86a      	bhi.n	800bd20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bc4a:	4b4e      	ldr	r3, [pc, #312]	@ (800bd84 <pvPortMalloc+0x1b8>)
 800bc4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bc4e:	4b4d      	ldr	r3, [pc, #308]	@ (800bd84 <pvPortMalloc+0x1b8>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc54:	e004      	b.n	800bc60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bc56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bc5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	687a      	ldr	r2, [r7, #4]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d903      	bls.n	800bc72 <pvPortMalloc+0xa6>
 800bc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d1f1      	bne.n	800bc56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bc72:	4b41      	ldr	r3, [pc, #260]	@ (800bd78 <pvPortMalloc+0x1ac>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d051      	beq.n	800bd20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bc7c:	6a3b      	ldr	r3, [r7, #32]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2208      	movs	r2, #8
 800bc82:	4413      	add	r3, r2
 800bc84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bc86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc88:	681a      	ldr	r2, [r3, #0]
 800bc8a:	6a3b      	ldr	r3, [r7, #32]
 800bc8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bc8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc90:	685a      	ldr	r2, [r3, #4]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	1ad2      	subs	r2, r2, r3
 800bc96:	2308      	movs	r3, #8
 800bc98:	005b      	lsls	r3, r3, #1
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d920      	bls.n	800bce0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bc9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	4413      	add	r3, r2
 800bca4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bca6:	69bb      	ldr	r3, [r7, #24]
 800bca8:	f003 0307 	and.w	r3, r3, #7
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00b      	beq.n	800bcc8 <pvPortMalloc+0xfc>
	__asm volatile
 800bcb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcb4:	f383 8811 	msr	BASEPRI, r3
 800bcb8:	f3bf 8f6f 	isb	sy
 800bcbc:	f3bf 8f4f 	dsb	sy
 800bcc0:	613b      	str	r3, [r7, #16]
}
 800bcc2:	bf00      	nop
 800bcc4:	bf00      	nop
 800bcc6:	e7fd      	b.n	800bcc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bcc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcca:	685a      	ldr	r2, [r3, #4]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	1ad2      	subs	r2, r2, r3
 800bcd0:	69bb      	ldr	r3, [r7, #24]
 800bcd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bcd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bcda:	69b8      	ldr	r0, [r7, #24]
 800bcdc:	f000 f938 	bl	800bf50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bce0:	4b27      	ldr	r3, [pc, #156]	@ (800bd80 <pvPortMalloc+0x1b4>)
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	1ad3      	subs	r3, r2, r3
 800bcea:	4a25      	ldr	r2, [pc, #148]	@ (800bd80 <pvPortMalloc+0x1b4>)
 800bcec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bcee:	4b24      	ldr	r3, [pc, #144]	@ (800bd80 <pvPortMalloc+0x1b4>)
 800bcf0:	681a      	ldr	r2, [r3, #0]
 800bcf2:	4b25      	ldr	r3, [pc, #148]	@ (800bd88 <pvPortMalloc+0x1bc>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d203      	bcs.n	800bd02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bcfa:	4b21      	ldr	r3, [pc, #132]	@ (800bd80 <pvPortMalloc+0x1b4>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4a22      	ldr	r2, [pc, #136]	@ (800bd88 <pvPortMalloc+0x1bc>)
 800bd00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bd02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd04:	685a      	ldr	r2, [r3, #4]
 800bd06:	4b1d      	ldr	r3, [pc, #116]	@ (800bd7c <pvPortMalloc+0x1b0>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	431a      	orrs	r2, r3
 800bd0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bd10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd12:	2200      	movs	r2, #0
 800bd14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bd16:	4b1d      	ldr	r3, [pc, #116]	@ (800bd8c <pvPortMalloc+0x1c0>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	4a1b      	ldr	r2, [pc, #108]	@ (800bd8c <pvPortMalloc+0x1c0>)
 800bd1e:	6013      	str	r3, [r2, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
 800bd20:	4b1b      	ldr	r3, [pc, #108]	@ (800bd90 <pvPortMalloc+0x1c4>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f003 0301 	and.w	r3, r3, #1
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d00c      	beq.n	800bd46 <pvPortMalloc+0x17a>
 800bd2c:	4b19      	ldr	r3, [pc, #100]	@ (800bd94 <pvPortMalloc+0x1c8>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d007      	beq.n	800bd46 <pvPortMalloc+0x17a>
 800bd36:	f7f5 fe3b 	bl	80019b0 <xTraceKernelPortGetSystemHeapHandle>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	69f9      	ldr	r1, [r7, #28]
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7f5 fd1b 	bl	800177c <xTraceHeapAlloc>
	}
	( void ) xTaskResumeAll();
 800bd46:	f7fe fba9 	bl	800a49c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	f003 0307 	and.w	r3, r3, #7
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d00b      	beq.n	800bd6c <pvPortMalloc+0x1a0>
	__asm volatile
 800bd54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd58:	f383 8811 	msr	BASEPRI, r3
 800bd5c:	f3bf 8f6f 	isb	sy
 800bd60:	f3bf 8f4f 	dsb	sy
 800bd64:	60fb      	str	r3, [r7, #12]
}
 800bd66:	bf00      	nop
 800bd68:	bf00      	nop
 800bd6a:	e7fd      	b.n	800bd68 <pvPortMalloc+0x19c>
	return pvReturn;
 800bd6c:	69fb      	ldr	r3, [r7, #28]
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3728      	adds	r7, #40	@ 0x28
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	20004954 	.word	0x20004954
 800bd7c:	20004968 	.word	0x20004968
 800bd80:	20004958 	.word	0x20004958
 800bd84:	2000494c 	.word	0x2000494c
 800bd88:	2000495c 	.word	0x2000495c
 800bd8c:	20004960 	.word	0x20004960
 800bd90:	20001eec 	.word	0x20001eec
 800bd94:	20001ee4 	.word	0x20001ee4

0800bd98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b086      	sub	sp, #24
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d062      	beq.n	800be70 <vPortFree+0xd8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bdaa:	2308      	movs	r3, #8
 800bdac:	425b      	negs	r3, r3
 800bdae:	697a      	ldr	r2, [r7, #20]
 800bdb0:	4413      	add	r3, r2
 800bdb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	685a      	ldr	r2, [r3, #4]
 800bdbc:	4b2e      	ldr	r3, [pc, #184]	@ (800be78 <vPortFree+0xe0>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4013      	ands	r3, r2
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d10b      	bne.n	800bdde <vPortFree+0x46>
	__asm volatile
 800bdc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdca:	f383 8811 	msr	BASEPRI, r3
 800bdce:	f3bf 8f6f 	isb	sy
 800bdd2:	f3bf 8f4f 	dsb	sy
 800bdd6:	60fb      	str	r3, [r7, #12]
}
 800bdd8:	bf00      	nop
 800bdda:	bf00      	nop
 800bddc:	e7fd      	b.n	800bdda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d00b      	beq.n	800bdfe <vPortFree+0x66>
	__asm volatile
 800bde6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdea:	f383 8811 	msr	BASEPRI, r3
 800bdee:	f3bf 8f6f 	isb	sy
 800bdf2:	f3bf 8f4f 	dsb	sy
 800bdf6:	60bb      	str	r3, [r7, #8]
}
 800bdf8:	bf00      	nop
 800bdfa:	bf00      	nop
 800bdfc:	e7fd      	b.n	800bdfa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	685a      	ldr	r2, [r3, #4]
 800be02:	4b1d      	ldr	r3, [pc, #116]	@ (800be78 <vPortFree+0xe0>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4013      	ands	r3, r2
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d031      	beq.n	800be70 <vPortFree+0xd8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d12d      	bne.n	800be70 <vPortFree+0xd8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	685a      	ldr	r2, [r3, #4]
 800be18:	4b17      	ldr	r3, [pc, #92]	@ (800be78 <vPortFree+0xe0>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	43db      	mvns	r3, r3
 800be1e:	401a      	ands	r2, r3
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800be24:	f7fe fb2c 	bl	800a480 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	685a      	ldr	r2, [r3, #4]
 800be2c:	4b13      	ldr	r3, [pc, #76]	@ (800be7c <vPortFree+0xe4>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4413      	add	r3, r2
 800be32:	4a12      	ldr	r2, [pc, #72]	@ (800be7c <vPortFree+0xe4>)
 800be34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
 800be36:	4b12      	ldr	r3, [pc, #72]	@ (800be80 <vPortFree+0xe8>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f003 0301 	and.w	r3, r3, #1
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00c      	beq.n	800be5c <vPortFree+0xc4>
 800be42:	4b10      	ldr	r3, [pc, #64]	@ (800be84 <vPortFree+0xec>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d007      	beq.n	800be5c <vPortFree+0xc4>
 800be4c:	f7f5 fdb0 	bl	80019b0 <xTraceKernelPortGetSystemHeapHandle>
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	461a      	mov	r2, r3
 800be56:	6879      	ldr	r1, [r7, #4]
 800be58:	f7f5 fcc4 	bl	80017e4 <xTraceHeapFree>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800be5c:	6938      	ldr	r0, [r7, #16]
 800be5e:	f000 f877 	bl	800bf50 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800be62:	4b09      	ldr	r3, [pc, #36]	@ (800be88 <vPortFree+0xf0>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	3301      	adds	r3, #1
 800be68:	4a07      	ldr	r2, [pc, #28]	@ (800be88 <vPortFree+0xf0>)
 800be6a:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800be6c:	f7fe fb16 	bl	800a49c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800be70:	bf00      	nop
 800be72:	3718      	adds	r7, #24
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}
 800be78:	20004968 	.word	0x20004968
 800be7c:	20004958 	.word	0x20004958
 800be80:	20001eec 	.word	0x20001eec
 800be84:	20001ee4 	.word	0x20001ee4
 800be88:	20004964 	.word	0x20004964

0800be8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800be8c:	b480      	push	{r7}
 800be8e:	b085      	sub	sp, #20
 800be90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800be92:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800be96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800be98:	4b27      	ldr	r3, [pc, #156]	@ (800bf38 <prvHeapInit+0xac>)
 800be9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f003 0307 	and.w	r3, r3, #7
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d00c      	beq.n	800bec0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	3307      	adds	r3, #7
 800beaa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	f023 0307 	bic.w	r3, r3, #7
 800beb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800beb4:	68ba      	ldr	r2, [r7, #8]
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	1ad3      	subs	r3, r2, r3
 800beba:	4a1f      	ldr	r2, [pc, #124]	@ (800bf38 <prvHeapInit+0xac>)
 800bebc:	4413      	add	r3, r2
 800bebe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bec4:	4a1d      	ldr	r2, [pc, #116]	@ (800bf3c <prvHeapInit+0xb0>)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800beca:	4b1c      	ldr	r3, [pc, #112]	@ (800bf3c <prvHeapInit+0xb0>)
 800becc:	2200      	movs	r2, #0
 800bece:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	68ba      	ldr	r2, [r7, #8]
 800bed4:	4413      	add	r3, r2
 800bed6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bed8:	2208      	movs	r2, #8
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	1a9b      	subs	r3, r3, r2
 800bede:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f023 0307 	bic.w	r3, r3, #7
 800bee6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	4a15      	ldr	r2, [pc, #84]	@ (800bf40 <prvHeapInit+0xb4>)
 800beec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800beee:	4b14      	ldr	r3, [pc, #80]	@ (800bf40 <prvHeapInit+0xb4>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2200      	movs	r2, #0
 800bef4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bef6:	4b12      	ldr	r3, [pc, #72]	@ (800bf40 <prvHeapInit+0xb4>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2200      	movs	r2, #0
 800befc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	68fa      	ldr	r2, [r7, #12]
 800bf06:	1ad2      	subs	r2, r2, r3
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bf0c:	4b0c      	ldr	r3, [pc, #48]	@ (800bf40 <prvHeapInit+0xb4>)
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	4a0a      	ldr	r2, [pc, #40]	@ (800bf44 <prvHeapInit+0xb8>)
 800bf1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	4a09      	ldr	r2, [pc, #36]	@ (800bf48 <prvHeapInit+0xbc>)
 800bf22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bf24:	4b09      	ldr	r3, [pc, #36]	@ (800bf4c <prvHeapInit+0xc0>)
 800bf26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bf2a:	601a      	str	r2, [r3, #0]
}
 800bf2c:	bf00      	nop
 800bf2e:	3714      	adds	r7, #20
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr
 800bf38:	20003d94 	.word	0x20003d94
 800bf3c:	2000494c 	.word	0x2000494c
 800bf40:	20004954 	.word	0x20004954
 800bf44:	2000495c 	.word	0x2000495c
 800bf48:	20004958 	.word	0x20004958
 800bf4c:	20004968 	.word	0x20004968

0800bf50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bf50:	b480      	push	{r7}
 800bf52:	b085      	sub	sp, #20
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bf58:	4b28      	ldr	r3, [pc, #160]	@ (800bffc <prvInsertBlockIntoFreeList+0xac>)
 800bf5a:	60fb      	str	r3, [r7, #12]
 800bf5c:	e002      	b.n	800bf64 <prvInsertBlockIntoFreeList+0x14>
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	60fb      	str	r3, [r7, #12]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d8f7      	bhi.n	800bf5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	68ba      	ldr	r2, [r7, #8]
 800bf78:	4413      	add	r3, r2
 800bf7a:	687a      	ldr	r2, [r7, #4]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d108      	bne.n	800bf92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	685a      	ldr	r2, [r3, #4]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	441a      	add	r2, r3
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	68ba      	ldr	r2, [r7, #8]
 800bf9c:	441a      	add	r2, r3
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d118      	bne.n	800bfd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	4b15      	ldr	r3, [pc, #84]	@ (800c000 <prvInsertBlockIntoFreeList+0xb0>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d00d      	beq.n	800bfce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	685a      	ldr	r2, [r3, #4]
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	441a      	add	r2, r3
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	601a      	str	r2, [r3, #0]
 800bfcc:	e008      	b.n	800bfe0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bfce:	4b0c      	ldr	r3, [pc, #48]	@ (800c000 <prvInsertBlockIntoFreeList+0xb0>)
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	601a      	str	r2, [r3, #0]
 800bfd6:	e003      	b.n	800bfe0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681a      	ldr	r2, [r3, #0]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bfe0:	68fa      	ldr	r2, [r7, #12]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d002      	beq.n	800bfee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bfee:	bf00      	nop
 800bff0:	3714      	adds	r7, #20
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	2000494c 	.word	0x2000494c
 800c000:	20004954 	.word	0x20004954

0800c004 <memset>:
 800c004:	4402      	add	r2, r0
 800c006:	4603      	mov	r3, r0
 800c008:	4293      	cmp	r3, r2
 800c00a:	d100      	bne.n	800c00e <memset+0xa>
 800c00c:	4770      	bx	lr
 800c00e:	f803 1b01 	strb.w	r1, [r3], #1
 800c012:	e7f9      	b.n	800c008 <memset+0x4>

0800c014 <_reclaim_reent>:
 800c014:	4b29      	ldr	r3, [pc, #164]	@ (800c0bc <_reclaim_reent+0xa8>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4283      	cmp	r3, r0
 800c01a:	b570      	push	{r4, r5, r6, lr}
 800c01c:	4604      	mov	r4, r0
 800c01e:	d04b      	beq.n	800c0b8 <_reclaim_reent+0xa4>
 800c020:	69c3      	ldr	r3, [r0, #28]
 800c022:	b1ab      	cbz	r3, 800c050 <_reclaim_reent+0x3c>
 800c024:	68db      	ldr	r3, [r3, #12]
 800c026:	b16b      	cbz	r3, 800c044 <_reclaim_reent+0x30>
 800c028:	2500      	movs	r5, #0
 800c02a:	69e3      	ldr	r3, [r4, #28]
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	5959      	ldr	r1, [r3, r5]
 800c030:	2900      	cmp	r1, #0
 800c032:	d13b      	bne.n	800c0ac <_reclaim_reent+0x98>
 800c034:	3504      	adds	r5, #4
 800c036:	2d80      	cmp	r5, #128	@ 0x80
 800c038:	d1f7      	bne.n	800c02a <_reclaim_reent+0x16>
 800c03a:	69e3      	ldr	r3, [r4, #28]
 800c03c:	4620      	mov	r0, r4
 800c03e:	68d9      	ldr	r1, [r3, #12]
 800c040:	f000 f872 	bl	800c128 <_free_r>
 800c044:	69e3      	ldr	r3, [r4, #28]
 800c046:	6819      	ldr	r1, [r3, #0]
 800c048:	b111      	cbz	r1, 800c050 <_reclaim_reent+0x3c>
 800c04a:	4620      	mov	r0, r4
 800c04c:	f000 f86c 	bl	800c128 <_free_r>
 800c050:	6961      	ldr	r1, [r4, #20]
 800c052:	b111      	cbz	r1, 800c05a <_reclaim_reent+0x46>
 800c054:	4620      	mov	r0, r4
 800c056:	f000 f867 	bl	800c128 <_free_r>
 800c05a:	69e1      	ldr	r1, [r4, #28]
 800c05c:	b111      	cbz	r1, 800c064 <_reclaim_reent+0x50>
 800c05e:	4620      	mov	r0, r4
 800c060:	f000 f862 	bl	800c128 <_free_r>
 800c064:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c066:	b111      	cbz	r1, 800c06e <_reclaim_reent+0x5a>
 800c068:	4620      	mov	r0, r4
 800c06a:	f000 f85d 	bl	800c128 <_free_r>
 800c06e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c070:	b111      	cbz	r1, 800c078 <_reclaim_reent+0x64>
 800c072:	4620      	mov	r0, r4
 800c074:	f000 f858 	bl	800c128 <_free_r>
 800c078:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c07a:	b111      	cbz	r1, 800c082 <_reclaim_reent+0x6e>
 800c07c:	4620      	mov	r0, r4
 800c07e:	f000 f853 	bl	800c128 <_free_r>
 800c082:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c084:	b111      	cbz	r1, 800c08c <_reclaim_reent+0x78>
 800c086:	4620      	mov	r0, r4
 800c088:	f000 f84e 	bl	800c128 <_free_r>
 800c08c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c08e:	b111      	cbz	r1, 800c096 <_reclaim_reent+0x82>
 800c090:	4620      	mov	r0, r4
 800c092:	f000 f849 	bl	800c128 <_free_r>
 800c096:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c098:	b111      	cbz	r1, 800c0a0 <_reclaim_reent+0x8c>
 800c09a:	4620      	mov	r0, r4
 800c09c:	f000 f844 	bl	800c128 <_free_r>
 800c0a0:	6a23      	ldr	r3, [r4, #32]
 800c0a2:	b14b      	cbz	r3, 800c0b8 <_reclaim_reent+0xa4>
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c0aa:	4718      	bx	r3
 800c0ac:	680e      	ldr	r6, [r1, #0]
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	f000 f83a 	bl	800c128 <_free_r>
 800c0b4:	4631      	mov	r1, r6
 800c0b6:	e7bb      	b.n	800c030 <_reclaim_reent+0x1c>
 800c0b8:	bd70      	pop	{r4, r5, r6, pc}
 800c0ba:	bf00      	nop
 800c0bc:	20000010 	.word	0x20000010

0800c0c0 <__libc_init_array>:
 800c0c0:	b570      	push	{r4, r5, r6, lr}
 800c0c2:	4d0d      	ldr	r5, [pc, #52]	@ (800c0f8 <__libc_init_array+0x38>)
 800c0c4:	4c0d      	ldr	r4, [pc, #52]	@ (800c0fc <__libc_init_array+0x3c>)
 800c0c6:	1b64      	subs	r4, r4, r5
 800c0c8:	10a4      	asrs	r4, r4, #2
 800c0ca:	2600      	movs	r6, #0
 800c0cc:	42a6      	cmp	r6, r4
 800c0ce:	d109      	bne.n	800c0e4 <__libc_init_array+0x24>
 800c0d0:	4d0b      	ldr	r5, [pc, #44]	@ (800c100 <__libc_init_array+0x40>)
 800c0d2:	4c0c      	ldr	r4, [pc, #48]	@ (800c104 <__libc_init_array+0x44>)
 800c0d4:	f000 f87e 	bl	800c1d4 <_init>
 800c0d8:	1b64      	subs	r4, r4, r5
 800c0da:	10a4      	asrs	r4, r4, #2
 800c0dc:	2600      	movs	r6, #0
 800c0de:	42a6      	cmp	r6, r4
 800c0e0:	d105      	bne.n	800c0ee <__libc_init_array+0x2e>
 800c0e2:	bd70      	pop	{r4, r5, r6, pc}
 800c0e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0e8:	4798      	blx	r3
 800c0ea:	3601      	adds	r6, #1
 800c0ec:	e7ee      	b.n	800c0cc <__libc_init_array+0xc>
 800c0ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0f2:	4798      	blx	r3
 800c0f4:	3601      	adds	r6, #1
 800c0f6:	e7f2      	b.n	800c0de <__libc_init_array+0x1e>
 800c0f8:	0800c4f0 	.word	0x0800c4f0
 800c0fc:	0800c4f0 	.word	0x0800c4f0
 800c100:	0800c4f0 	.word	0x0800c4f0
 800c104:	0800c4f4 	.word	0x0800c4f4

0800c108 <__retarget_lock_acquire_recursive>:
 800c108:	4770      	bx	lr

0800c10a <__retarget_lock_release_recursive>:
 800c10a:	4770      	bx	lr

0800c10c <memcpy>:
 800c10c:	440a      	add	r2, r1
 800c10e:	4291      	cmp	r1, r2
 800c110:	f100 33ff 	add.w	r3, r0, #4294967295
 800c114:	d100      	bne.n	800c118 <memcpy+0xc>
 800c116:	4770      	bx	lr
 800c118:	b510      	push	{r4, lr}
 800c11a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c11e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c122:	4291      	cmp	r1, r2
 800c124:	d1f9      	bne.n	800c11a <memcpy+0xe>
 800c126:	bd10      	pop	{r4, pc}

0800c128 <_free_r>:
 800c128:	b538      	push	{r3, r4, r5, lr}
 800c12a:	4605      	mov	r5, r0
 800c12c:	2900      	cmp	r1, #0
 800c12e:	d041      	beq.n	800c1b4 <_free_r+0x8c>
 800c130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c134:	1f0c      	subs	r4, r1, #4
 800c136:	2b00      	cmp	r3, #0
 800c138:	bfb8      	it	lt
 800c13a:	18e4      	addlt	r4, r4, r3
 800c13c:	f000 f83e 	bl	800c1bc <__malloc_lock>
 800c140:	4a1d      	ldr	r2, [pc, #116]	@ (800c1b8 <_free_r+0x90>)
 800c142:	6813      	ldr	r3, [r2, #0]
 800c144:	b933      	cbnz	r3, 800c154 <_free_r+0x2c>
 800c146:	6063      	str	r3, [r4, #4]
 800c148:	6014      	str	r4, [r2, #0]
 800c14a:	4628      	mov	r0, r5
 800c14c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c150:	f000 b83a 	b.w	800c1c8 <__malloc_unlock>
 800c154:	42a3      	cmp	r3, r4
 800c156:	d908      	bls.n	800c16a <_free_r+0x42>
 800c158:	6820      	ldr	r0, [r4, #0]
 800c15a:	1821      	adds	r1, r4, r0
 800c15c:	428b      	cmp	r3, r1
 800c15e:	bf01      	itttt	eq
 800c160:	6819      	ldreq	r1, [r3, #0]
 800c162:	685b      	ldreq	r3, [r3, #4]
 800c164:	1809      	addeq	r1, r1, r0
 800c166:	6021      	streq	r1, [r4, #0]
 800c168:	e7ed      	b.n	800c146 <_free_r+0x1e>
 800c16a:	461a      	mov	r2, r3
 800c16c:	685b      	ldr	r3, [r3, #4]
 800c16e:	b10b      	cbz	r3, 800c174 <_free_r+0x4c>
 800c170:	42a3      	cmp	r3, r4
 800c172:	d9fa      	bls.n	800c16a <_free_r+0x42>
 800c174:	6811      	ldr	r1, [r2, #0]
 800c176:	1850      	adds	r0, r2, r1
 800c178:	42a0      	cmp	r0, r4
 800c17a:	d10b      	bne.n	800c194 <_free_r+0x6c>
 800c17c:	6820      	ldr	r0, [r4, #0]
 800c17e:	4401      	add	r1, r0
 800c180:	1850      	adds	r0, r2, r1
 800c182:	4283      	cmp	r3, r0
 800c184:	6011      	str	r1, [r2, #0]
 800c186:	d1e0      	bne.n	800c14a <_free_r+0x22>
 800c188:	6818      	ldr	r0, [r3, #0]
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	6053      	str	r3, [r2, #4]
 800c18e:	4408      	add	r0, r1
 800c190:	6010      	str	r0, [r2, #0]
 800c192:	e7da      	b.n	800c14a <_free_r+0x22>
 800c194:	d902      	bls.n	800c19c <_free_r+0x74>
 800c196:	230c      	movs	r3, #12
 800c198:	602b      	str	r3, [r5, #0]
 800c19a:	e7d6      	b.n	800c14a <_free_r+0x22>
 800c19c:	6820      	ldr	r0, [r4, #0]
 800c19e:	1821      	adds	r1, r4, r0
 800c1a0:	428b      	cmp	r3, r1
 800c1a2:	bf04      	itt	eq
 800c1a4:	6819      	ldreq	r1, [r3, #0]
 800c1a6:	685b      	ldreq	r3, [r3, #4]
 800c1a8:	6063      	str	r3, [r4, #4]
 800c1aa:	bf04      	itt	eq
 800c1ac:	1809      	addeq	r1, r1, r0
 800c1ae:	6021      	streq	r1, [r4, #0]
 800c1b0:	6054      	str	r4, [r2, #4]
 800c1b2:	e7ca      	b.n	800c14a <_free_r+0x22>
 800c1b4:	bd38      	pop	{r3, r4, r5, pc}
 800c1b6:	bf00      	nop
 800c1b8:	20004aa8 	.word	0x20004aa8

0800c1bc <__malloc_lock>:
 800c1bc:	4801      	ldr	r0, [pc, #4]	@ (800c1c4 <__malloc_lock+0x8>)
 800c1be:	f7ff bfa3 	b.w	800c108 <__retarget_lock_acquire_recursive>
 800c1c2:	bf00      	nop
 800c1c4:	20004aa4 	.word	0x20004aa4

0800c1c8 <__malloc_unlock>:
 800c1c8:	4801      	ldr	r0, [pc, #4]	@ (800c1d0 <__malloc_unlock+0x8>)
 800c1ca:	f7ff bf9e 	b.w	800c10a <__retarget_lock_release_recursive>
 800c1ce:	bf00      	nop
 800c1d0:	20004aa4 	.word	0x20004aa4

0800c1d4 <_init>:
 800c1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1d6:	bf00      	nop
 800c1d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1da:	bc08      	pop	{r3}
 800c1dc:	469e      	mov	lr, r3
 800c1de:	4770      	bx	lr

0800c1e0 <_fini>:
 800c1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1e2:	bf00      	nop
 800c1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1e6:	bc08      	pop	{r3}
 800c1e8:	469e      	mov	lr, r3
 800c1ea:	4770      	bx	lr
